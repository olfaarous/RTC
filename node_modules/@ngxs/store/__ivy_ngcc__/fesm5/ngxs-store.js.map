{"version":3,"sources":["/home/olfa/Desktop/Pixels/RTC/node_modules/@ngxs/store/fesm5/ngxs-store.js"],"names":[],"mappings":"AAAA;;;;;;;;;AAOA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;MAoMM,AAGA;;;;;;;;;;;;;kCAKG;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;KA4DJ,AAGC;;;;;;;gDAEqjCrD,AAGA;;;;;;;;;;;;kCAIG;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;KAsHJ;;;;;;0BAGC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;KAuCD,AAGC;;;;;;;;;;kHAKG;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;KAsEJ,AAGC;;;;;;;gDAEsD;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;MAwDtD,AAGA;;;;;;;;;;;;;;;;;;;kCAKG;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;KAgCJ;;;;;;0BAGC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;MAiKA,AAGA;;;;;;;;;;;;;;4OASG;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;KA+EJ,AAGC;;;;;;;;;;;;;;;;kCAKG;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;MAyDH,AAGA;;;;;;;;;;+FAKG;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;MAoHH,AAGA;;;;;;;;;;;;oJAOG;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;MA+KH,AAGA;;;;;;;;;igBH,AAGA;;;;;;;;;;;;;;;;;;;;;;;;kCAUG;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;MA0MH,AAGA;;;;;;;;;;;mJAMG;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;MAgaH,AAGA;;;;;;;;;;;;;;;;;;;kCASG;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;gCA8CuB,AAG1B;;;;;;;;;;qFAKG;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;KAqIJ,AAGC;;;;;;;;;;;;;;;;;;;mEASG;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;MA8CH,AAGA;;;;;;;;;;;;;;;;;;mEAQG;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;iEAsLwD;;;;;gDAG3D;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;MA6bA;;;;;gDAGA","file":"ngxs-store.js","sourcesContent":["import { __assign, __extends, __spread, __values } from 'tslib';\nimport { NgZone, Injectable, Inject, PLATFORM_ID, InjectionToken, Optional, SkipSelf, ErrorHandler, Injector, isDevMode, NgModule, APP_BOOTSTRAP_LISTENER } from '@angular/core';\nimport { memoize, INITIAL_STATE_TOKEN, NgxsBootstrapper, isAngularInTestMode, NGXS_STATE_CONTEXT_FACTORY, NGXS_STATE_FACTORY, InitialState } from '@ngxs/store/internals';\nimport { isPlatformServer } from '@angular/common';\nimport { Observable, Subject, BehaviorSubject, of, forkJoin, throwError, EMPTY, from, ReplaySubject } from 'rxjs';\nimport { filter, map, shareReplay, take, exhaustMap, mergeMap, defaultIfEmpty, catchError, takeUntil, tap, distinctUntilChanged } from 'rxjs/operators';\n\nvar _a;\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\n/** @enum {string} */\r\nvar VALIDATION_CODE = {\r\n    STATE_NAME: 'STATE_NAME',\r\n    STATE_UNIQUE: 'STATE_UNIQUE',\r\n    STATE_NAME_PROPERTY: 'STATE_NAME_PROPERTY',\r\n    STATE_DECORATOR: 'STATE_DECORATOR',\r\n    INCORRECT_PRODUCTION: 'INCORRECT_PRODUCTION',\r\n    INCORRECT_DEVELOPMENT: 'INCORRECT_DEVELOPMENT',\r\n    SELECT_FACTORY_NOT_CONNECTED: 'SELECT_FACTORY_NOT_CONNECTED',\r\n    ACTION_DECORATOR: 'ACTION_DECORATOR',\r\n    SELECTOR_DECORATOR: 'SELECTOR_DECORATOR',\r\n    ZONE_WARNING: 'ZONE_WARNING',\r\n    PATCHING_ARRAY: 'PATCHING_ARRAY',\r\n    PATCHING_PRIMITIVE: 'PATCHING_PRIMITIVE',\r\n    UNDECORATED_STATE_IN_IVY: 'UNDECORATED_STATE_IN_IVY',\r\n};\r\n/** @type {?} */\r\nvar CONFIG_MESSAGES = (_a = {},\r\n    _a[VALIDATION_CODE.STATE_NAME] = (/**\r\n     * @param {?} name\r\n     * @return {?}\r\n     */\r\n    function (name) {\r\n        return name + \" is not a valid state name. It needs to be a valid object property name.\";\r\n    }),\r\n    _a[VALIDATION_CODE.STATE_NAME_PROPERTY] = (/**\r\n     * @return {?}\r\n     */\r\n    function () { return \"States must register a 'name' property\"; }),\r\n    _a[VALIDATION_CODE.STATE_UNIQUE] = (/**\r\n     * @param {?} current\r\n     * @param {?} newName\r\n     * @param {?} oldName\r\n     * @return {?}\r\n     */\r\n    function (current, newName, oldName) {\r\n        return \"State name '\" + current + \"' from \" + newName + \" already exists in \" + oldName;\r\n    }),\r\n    _a[VALIDATION_CODE.STATE_DECORATOR] = (/**\r\n     * @return {?}\r\n     */\r\n    function () { return 'States must be decorated with @State() decorator'; }),\r\n    _a[VALIDATION_CODE.INCORRECT_PRODUCTION] = (/**\r\n     * @return {?}\r\n     */\r\n    function () {\r\n        return 'Angular is running in production mode but NGXS is still running in the development mode!\\n' +\r\n            'Please set developmentMode to false on the NgxsModule options when in production mode.\\n' +\r\n            'NgxsModule.forRoot(states, { developmentMode: !environment.production })';\r\n    }),\r\n    _a[VALIDATION_CODE.INCORRECT_DEVELOPMENT] = (/**\r\n     * @return {?}\r\n     */\r\n    function () {\r\n        return 'RECOMMENDATION: Set developmentMode to true on the NgxsModule when Angular is running in development mode.\\n' +\r\n            'NgxsModule.forRoot(states, { developmentMode: !environment.production })';\r\n    }),\r\n    _a[VALIDATION_CODE.SELECT_FACTORY_NOT_CONNECTED] = (/**\r\n     * @return {?}\r\n     */\r\n    function () {\r\n        return 'You have forgotten to import the NGXS module!';\r\n    }),\r\n    _a[VALIDATION_CODE.ACTION_DECORATOR] = (/**\r\n     * @return {?}\r\n     */\r\n    function () {\r\n        return '@Action() decorator cannot be used with static methods';\r\n    }),\r\n    _a[VALIDATION_CODE.SELECTOR_DECORATOR] = (/**\r\n     * @return {?}\r\n     */\r\n    function () { return 'Selectors only work on methods'; }),\r\n    _a[VALIDATION_CODE.ZONE_WARNING] = (/**\r\n     * @return {?}\r\n     */\r\n    function () {\r\n        return 'Your application was bootstrapped with nooped zone and your execution strategy requires an actual NgZone!\\n' +\r\n            'Please set the value of the executionStrategy property to NoopNgxsExecutionStrategy.\\n' +\r\n            'NgxsModule.forRoot(states, { executionStrategy: NoopNgxsExecutionStrategy })';\r\n    }),\r\n    _a[VALIDATION_CODE.PATCHING_ARRAY] = (/**\r\n     * @return {?}\r\n     */\r\n    function () { return 'Patching arrays is not supported.'; }),\r\n    _a[VALIDATION_CODE.PATCHING_PRIMITIVE] = (/**\r\n     * @return {?}\r\n     */\r\n    function () { return 'Patching primitives is not supported.'; }),\r\n    _a[VALIDATION_CODE.UNDECORATED_STATE_IN_IVY] = (/**\r\n     * @param {?} name\r\n     * @return {?}\r\n     */\r\n    function (name) {\r\n        return \"'\" + name + \"' class should be decorated with @Injectable() right after the @State() decorator\";\r\n    }),\r\n    _a);\n\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\nvar DispatchOutsideZoneNgxsExecutionStrategy = /** @class */ (function () {\r\n    function DispatchOutsideZoneNgxsExecutionStrategy(_ngZone, _platformId) {\r\n        this._ngZone = _ngZone;\r\n        this._platformId = _platformId;\r\n        this.verifyZoneIsNotNooped(this._ngZone);\r\n    }\r\n    /**\r\n     * @template T\r\n     * @param {?} func\r\n     * @return {?}\r\n     */\r\n    DispatchOutsideZoneNgxsExecutionStrategy.prototype.enter = /**\r\n     * @template T\r\n     * @param {?} func\r\n     * @return {?}\r\n     */\r\n    function (func) {\r\n        if (isPlatformServer(this._platformId)) {\r\n            return this.runInsideAngular(func);\r\n        }\r\n        return this.runOutsideAngular(func);\r\n    };\r\n    /**\r\n     * @template T\r\n     * @param {?} func\r\n     * @return {?}\r\n     */\r\n    DispatchOutsideZoneNgxsExecutionStrategy.prototype.leave = /**\r\n     * @template T\r\n     * @param {?} func\r\n     * @return {?}\r\n     */\r\n    function (func) {\r\n        return this.runInsideAngular(func);\r\n    };\r\n    /**\r\n     * @private\r\n     * @template T\r\n     * @param {?} func\r\n     * @return {?}\r\n     */\r\n    DispatchOutsideZoneNgxsExecutionStrategy.prototype.runInsideAngular = /**\r\n     * @private\r\n     * @template T\r\n     * @param {?} func\r\n     * @return {?}\r\n     */\r\n    function (func) {\r\n        if (NgZone.isInAngularZone()) {\r\n            return func();\r\n        }\r\n        return this._ngZone.run(func);\r\n    };\r\n    /**\r\n     * @private\r\n     * @template T\r\n     * @param {?} func\r\n     * @return {?}\r\n     */\r\n    DispatchOutsideZoneNgxsExecutionStrategy.prototype.runOutsideAngular = /**\r\n     * @private\r\n     * @template T\r\n     * @param {?} func\r\n     * @return {?}\r\n     */\r\n    function (func) {\r\n        if (NgZone.isInAngularZone()) {\r\n            return this._ngZone.runOutsideAngular(func);\r\n        }\r\n        return func();\r\n    };\r\n    /**\r\n     * @private\r\n     * @param {?} ngZone\r\n     * @return {?}\r\n     */\r\n    DispatchOutsideZoneNgxsExecutionStrategy.prototype.verifyZoneIsNotNooped = /**\r\n     * @private\r\n     * @param {?} ngZone\r\n     * @return {?}\r\n     */\r\n    function (ngZone) {\r\n        // `NoopNgZone` is not exposed publicly as it doesn't expect\r\n        // to be used outside of the core Angular code, thus we just have\r\n        // to check if the zone doesn't extend or instanceof `NgZone`\r\n        if (ngZone instanceof NgZone) {\r\n            return;\r\n        }\r\n        console.warn(CONFIG_MESSAGES[VALIDATION_CODE.ZONE_WARNING]());\r\n    };\r\n    DispatchOutsideZoneNgxsExecutionStrategy.decorators = [\r\n        { type: Injectable }\r\n    ];\r\n    /** @nocollapse */\r\n    DispatchOutsideZoneNgxsExecutionStrategy.ctorParameters = function () { return [\r\n        { type: NgZone },\r\n        { type: String, decorators: [{ type: Inject, args: [PLATFORM_ID,] }] }\r\n    ]; };\r\n    return DispatchOutsideZoneNgxsExecutionStrategy;\r\n}());\r\nif (false) {\r\n    /**\r\n     * @type {?}\r\n     * @private\r\n     */\r\n    DispatchOutsideZoneNgxsExecutionStrategy.prototype._ngZone;\r\n    /**\r\n     * @type {?}\r\n     * @private\r\n     */\r\n    DispatchOutsideZoneNgxsExecutionStrategy.prototype._platformId;\r\n}\n\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\n/** @type {?} */\r\nvar ROOT_STATE_TOKEN = new InjectionToken('ROOT_STATE_TOKEN');\r\n/** @type {?} */\r\nvar FEATURE_STATE_TOKEN = new InjectionToken('FEATURE_STATE_TOKEN');\r\n/** @type {?} */\r\nvar NGXS_PLUGINS = new InjectionToken('NGXS_PLUGINS');\r\n/** @type {?} */\r\nvar NG_TEST_MODE = new InjectionToken('NG_TEST_MODE');\r\n/** @type {?} */\r\nvar NG_DEV_MODE = new InjectionToken('NG_DEV_MODE');\r\n/** @type {?} */\r\nvar META_KEY = 'NGXS_META';\r\n/** @type {?} */\r\nvar META_OPTIONS_KEY = 'NGXS_OPTIONS_META';\r\n/** @type {?} */\r\nvar SELECTOR_META_KEY = 'NGXS_SELECTOR_META';\r\n/**\r\n * The NGXS config settings.\r\n */\r\nvar NgxsConfig = /** @class */ (function () {\r\n    function NgxsConfig() {\r\n        /**\r\n         * Defining the default state before module initialization\r\n         * This is convenient if we need to create a define our own set of states.\r\n         * @deprecated will be removed after v4\r\n         * (default: {})\r\n         */\r\n        this.defaultsState = {};\r\n        /**\r\n         * Defining shared selector options\r\n         */\r\n        this.selectorOptions = {\r\n            injectContainerState: true,\r\n            // TODO: default is true in v3, will change in v4\r\n            suppressErrors: true // TODO: default is true in v3, will change in v4\r\n        };\r\n        this.compatibility = {\r\n            strictContentSecurityPolicy: false\r\n        };\r\n        this.executionStrategy = DispatchOutsideZoneNgxsExecutionStrategy;\r\n    }\r\n    NgxsConfig.decorators = [\r\n        { type: Injectable }\r\n    ];\r\n    /** @nocollapse */\r\n    NgxsConfig.ctorParameters = function () { return []; };\r\n    return NgxsConfig;\r\n}());\r\nif (false) {\r\n    /**\r\n     * Run in development mode. This will add additional debugging features:\r\n     * - Object.freeze on the state and actions to guarantee immutability\r\n     * (default: false)\r\n     * @type {?}\r\n     */\r\n    NgxsConfig.prototype.developmentMode;\r\n    /** @type {?} */\r\n    NgxsConfig.prototype.compatibility;\r\n    /**\r\n     * Determines the execution context to perform async operations inside. An implementation can be\r\n     * provided to override the default behaviour where the async operations are run\r\n     * outside Angular's zone but all observable behaviours of NGXS are run back inside Angular's zone.\r\n     * These observable behaviours are from:\r\n     *   `\\@Select(...)`, `store.select(...)`, `actions.subscribe(...)` or `store.dispatch(...).subscribe(...)`\r\n     * Every `zone.run` causes Angular to run change detection on the whole tree (`app.tick()`) so of your\r\n     * application doesn't rely on zone.js running change detection then you can switch to the\r\n     * `NoopNgxsExecutionStrategy` that doesn't interact with zones.\r\n     * (default: null)\r\n     * @type {?}\r\n     */\r\n    NgxsConfig.prototype.executionStrategy;\r\n    /**\r\n     * Defining the default state before module initialization\r\n     * This is convenient if we need to create a define our own set of states.\r\n     * @deprecated will be removed after v4\r\n     * (default: {})\r\n     * @type {?}\r\n     */\r\n    NgxsConfig.prototype.defaultsState;\r\n    /**\r\n     * Defining shared selector options\r\n     * @type {?}\r\n     */\r\n    NgxsConfig.prototype.selectorOptions;\r\n}\r\n/**\r\n * State context provided to the actions in the state.\r\n * @record\r\n * @template T\r\n */\r\nfunction StateContext() { }\r\nif (false) {\r\n    /**\r\n     * Get the current state.\r\n     * @return {?}\r\n     */\r\n    StateContext.prototype.getState = function () { };\r\n    /**\r\n     * Reset the state to a new value.\r\n     * @param {?} val\r\n     * @return {?}\r\n     */\r\n    StateContext.prototype.setState = function (val) { };\r\n    /**\r\n     * Patch the existing state with the provided value.\r\n     * @param {?} val\r\n     * @return {?}\r\n     */\r\n    StateContext.prototype.patchState = function (val) { };\r\n    /**\r\n     * Dispatch a new action and return the dispatched observable.\r\n     * @param {?} actions\r\n     * @return {?}\r\n     */\r\n    StateContext.prototype.dispatch = function (actions) { };\r\n}\r\n/**\r\n * Plugin interface\r\n * @record\r\n */\r\nfunction NgxsPlugin() { }\r\nif (false) {\r\n    /**\r\n     * Handle the state/action before its submitted to the state handlers.\r\n     * @param {?} state\r\n     * @param {?} action\r\n     * @param {?} next\r\n     * @return {?}\r\n     */\r\n    NgxsPlugin.prototype.handle = function (state, action, next) { };\r\n}\r\n/**\r\n * Options that can be provided to the store.\r\n * @record\r\n * @template T\r\n */\r\nfunction StoreOptions() { }\r\nif (false) {\r\n    /**\r\n     * Name of the state. Required.\r\n     * @type {?}\r\n     */\r\n    StoreOptions.prototype.name;\r\n    /**\r\n     * Default values for the state. If not provided, uses empty object.\r\n     * @type {?|undefined}\r\n     */\r\n    StoreOptions.prototype.defaults;\r\n    /**\r\n     * Sub states for the given state.\r\n     * @type {?|undefined}\r\n     */\r\n    StoreOptions.prototype.children;\r\n}\r\n/**\r\n * Represents a basic change from a previous to a new value for a single state instance.\r\n * Passed as a value in a NgxsSimpleChanges object to the ngxsOnChanges hook.\r\n * @template T\r\n */\r\nvar  /**\r\n * Represents a basic change from a previous to a new value for a single state instance.\r\n * Passed as a value in a NgxsSimpleChanges object to the ngxsOnChanges hook.\r\n * @template T\r\n */\r\nNgxsSimpleChange = /** @class */ (function () {\r\n    function NgxsSimpleChange(previousValue, currentValue, firstChange) {\r\n        this.previousValue = previousValue;\r\n        this.currentValue = currentValue;\r\n        this.firstChange = firstChange;\r\n    }\r\n    return NgxsSimpleChange;\r\n}());\r\nif (false) {\r\n    /** @type {?} */\r\n    NgxsSimpleChange.prototype.previousValue;\r\n    /** @type {?} */\r\n    NgxsSimpleChange.prototype.currentValue;\r\n    /** @type {?} */\r\n    NgxsSimpleChange.prototype.firstChange;\r\n}\r\n/**\r\n * On init interface\r\n * @record\r\n */\r\nfunction NgxsOnInit() { }\r\nif (false) {\r\n    /**\r\n     * @param {?=} ctx\r\n     * @return {?}\r\n     */\r\n    NgxsOnInit.prototype.ngxsOnInit = function (ctx) { };\r\n}\r\n/**\r\n * On change interface\r\n * @record\r\n */\r\nfunction NgxsOnChanges() { }\r\nif (false) {\r\n    /**\r\n     * @param {?} change\r\n     * @return {?}\r\n     */\r\n    NgxsOnChanges.prototype.ngxsOnChanges = function (change) { };\r\n}\r\n/**\r\n * After bootstrap interface\r\n * @record\r\n */\r\nfunction NgxsAfterBootstrap() { }\r\nif (false) {\r\n    /**\r\n     * @param {?=} ctx\r\n     * @return {?}\r\n     */\r\n    NgxsAfterBootstrap.prototype.ngxsAfterBootstrap = function (ctx) { };\r\n}\n\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\n/*\r\n * Internal execution strategy injection token\r\n */\r\n/** @type {?} */\r\nvar NGXS_EXECUTION_STRATEGY = new InjectionToken('NGXS_EXECUTION_STRATEGY');\r\n/**\r\n * @record\r\n */\r\nfunction NgxsExecutionStrategy() { }\r\nif (false) {\r\n    /**\r\n     * @template T\r\n     * @param {?} func\r\n     * @return {?}\r\n     */\r\n    NgxsExecutionStrategy.prototype.enter = function (func) { };\r\n    /**\r\n     * @template T\r\n     * @param {?} func\r\n     * @return {?}\r\n     */\r\n    NgxsExecutionStrategy.prototype.leave = function (func) { };\r\n}\n\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\n/**\r\n * Returns the type from an action instance/class.\r\n * @ignore\r\n * @param {?} action\r\n * @return {?}\r\n */\r\nfunction getActionTypeFromInstance(action) {\r\n    if (action.constructor && action.constructor.type) {\r\n        return action.constructor.type;\r\n    }\r\n    return action.type;\r\n}\r\n/**\r\n * Matches a action\r\n * @ignore\r\n * @param {?} action1\r\n * @return {?}\r\n */\r\nfunction actionMatcher(action1) {\r\n    /** @type {?} */\r\n    var type1 = getActionTypeFromInstance(action1);\r\n    return (/**\r\n     * @param {?} action2\r\n     * @return {?}\r\n     */\r\n    function (action2) {\r\n        return type1 === getActionTypeFromInstance(action2);\r\n    });\r\n}\r\n/**\r\n * Set a deeply nested value. Example:\r\n *\r\n *   setValue({ foo: { bar: { eat: false } } },\r\n *      'foo.bar.eat', true) //=> { foo: { bar: { eat: true } } }\r\n *\r\n * While it traverses it also creates new objects from top down.\r\n *\r\n * @ignore\r\n * @type {?}\r\n */\r\nvar setValue = (/**\r\n * @param {?} obj\r\n * @param {?} prop\r\n * @param {?} val\r\n * @return {?}\r\n */\r\nfunction (obj, prop, val) {\r\n    obj = __assign({}, obj);\r\n    /** @type {?} */\r\n    var split = prop.split('.');\r\n    /** @type {?} */\r\n    var lastIndex = split.length - 1;\r\n    split.reduce((/**\r\n     * @param {?} acc\r\n     * @param {?} part\r\n     * @param {?} index\r\n     * @return {?}\r\n     */\r\n    function (acc, part, index) {\r\n        if (index === lastIndex) {\r\n            acc[part] = val;\r\n        }\r\n        else {\r\n            acc[part] = Array.isArray(acc[part]) ? acc[part].slice() : __assign({}, acc[part]);\r\n        }\r\n        return acc && acc[part];\r\n    }), obj);\r\n    return obj;\r\n});\r\n/**\r\n * Get a deeply nested value. Example:\r\n *\r\n *    getValue({ foo: bar: [] }, 'foo.bar') //=> []\r\n *\r\n * @ignore\r\n * @type {?}\r\n */\r\nvar getValue = (/**\r\n * @param {?} obj\r\n * @param {?} prop\r\n * @return {?}\r\n */\r\nfunction (obj, prop) {\r\n    return prop.split('.').reduce((/**\r\n     * @param {?} acc\r\n     * @param {?} part\r\n     * @return {?}\r\n     */\r\n    function (acc, part) { return acc && acc[part]; }), obj);\r\n});\n\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\n/**\r\n * @record\r\n * @template T, U\r\n */\r\nfunction StateClassInternal() { }\r\nif (false) {\r\n    /* Skipping unnamed member:\r\n    [META_KEY]?: MetaDataModel;*/\r\n    /* Skipping unnamed member:\r\n    [META_OPTIONS_KEY]?: StoreOptions<U>;*/\r\n}\r\n/**\r\n * @record\r\n * @template T\r\n */\r\nfunction StateOperations() { }\r\nif (false) {\r\n    /**\r\n     * @return {?}\r\n     */\r\n    StateOperations.prototype.getState = function () { };\r\n    /**\r\n     * @param {?} val\r\n     * @return {?}\r\n     */\r\n    StateOperations.prototype.setState = function (val) { };\r\n    /**\r\n     * @param {?} actions\r\n     * @return {?}\r\n     */\r\n    StateOperations.prototype.dispatch = function (actions) { };\r\n}\r\n/**\r\n * @record\r\n */\r\nfunction MetaDataModel() { }\r\nif (false) {\r\n    /** @type {?} */\r\n    MetaDataModel.prototype.name;\r\n    /** @type {?} */\r\n    MetaDataModel.prototype.actions;\r\n    /** @type {?} */\r\n    MetaDataModel.prototype.defaults;\r\n    /** @type {?} */\r\n    MetaDataModel.prototype.path;\r\n    /** @type {?} */\r\n    MetaDataModel.prototype.makeRootSelector;\r\n    /** @type {?|undefined} */\r\n    MetaDataModel.prototype.children;\r\n}\r\n/**\r\n * @record\r\n */\r\nfunction RuntimeSelectorContext() { }\r\nif (false) {\r\n    /**\r\n     * @param {?} key\r\n     * @return {?}\r\n     */\r\n    RuntimeSelectorContext.prototype.getStateGetter = function (key) { };\r\n    /**\r\n     * @param {?=} localOptions\r\n     * @return {?}\r\n     */\r\n    RuntimeSelectorContext.prototype.getSelectorOptions = function (localOptions) { };\r\n}\r\n/**\r\n * @record\r\n */\r\nfunction SharedSelectorOptions() { }\r\nif (false) {\r\n    /** @type {?|undefined} */\r\n    SharedSelectorOptions.prototype.injectContainerState;\r\n    /** @type {?|undefined} */\r\n    SharedSelectorOptions.prototype.suppressErrors;\r\n}\r\n/**\r\n * @record\r\n */\r\nfunction SelectorMetaDataModel() { }\r\nif (false) {\r\n    /** @type {?} */\r\n    SelectorMetaDataModel.prototype.makeRootSelector;\r\n    /** @type {?} */\r\n    SelectorMetaDataModel.prototype.originalFn;\r\n    /** @type {?} */\r\n    SelectorMetaDataModel.prototype.containerClass;\r\n    /** @type {?} */\r\n    SelectorMetaDataModel.prototype.selectorName;\r\n    /** @type {?} */\r\n    SelectorMetaDataModel.prototype.getSelectorOptions;\r\n}\r\n/**\r\n * @record\r\n */\r\nfunction MappedStore() { }\r\nif (false) {\r\n    /** @type {?} */\r\n    MappedStore.prototype.name;\r\n    /** @type {?} */\r\n    MappedStore.prototype.isInitialised;\r\n    /** @type {?} */\r\n    MappedStore.prototype.actions;\r\n    /** @type {?} */\r\n    MappedStore.prototype.defaults;\r\n    /** @type {?} */\r\n    MappedStore.prototype.instance;\r\n    /** @type {?} */\r\n    MappedStore.prototype.path;\r\n}\r\n/**\r\n * @record\r\n */\r\nfunction StatesAndDefaults() { }\r\nif (false) {\r\n    /** @type {?} */\r\n    StatesAndDefaults.prototype.defaults;\r\n    /** @type {?} */\r\n    StatesAndDefaults.prototype.states;\r\n}\r\n/**\r\n * @record\r\n * @template T\r\n */\r\nfunction RootStateDiff() { }\r\nif (false) {\r\n    /** @type {?} */\r\n    RootStateDiff.prototype.currentAppState;\r\n    /** @type {?} */\r\n    RootStateDiff.prototype.newAppState;\r\n}\r\n/**\r\n * Ensures metadata is attached to the class and returns it.\r\n *\r\n * @ignore\r\n * @param {?} target\r\n * @return {?}\r\n */\r\nfunction ensureStoreMetadata(target) {\r\n    if (!target.hasOwnProperty(META_KEY)) {\r\n        /** @type {?} */\r\n        var defaultMetadata_1 = {\r\n            name: null,\r\n            actions: {},\r\n            defaults: {},\r\n            path: null,\r\n            makeRootSelector: /**\r\n             * @param {?} context\r\n             * @return {?}\r\n             */\r\n            function (context) {\r\n                return context.getStateGetter(defaultMetadata_1.name);\r\n            },\r\n            children: []\r\n        };\r\n        Object.defineProperty(target, META_KEY, { value: defaultMetadata_1 });\r\n    }\r\n    return getStoreMetadata(target);\r\n}\r\n/**\r\n * Get the metadata attached to the state class if it exists.\r\n *\r\n * @ignore\r\n * @param {?} target\r\n * @return {?}\r\n */\r\nfunction getStoreMetadata(target) {\r\n    return (/** @type {?} */ (target[META_KEY]));\r\n}\r\n/**\r\n * Ensures metadata is attached to the selector and returns it.\r\n *\r\n * @ignore\r\n * @param {?} target\r\n * @return {?}\r\n */\r\nfunction ensureSelectorMetadata(target) {\r\n    if (!target.hasOwnProperty(SELECTOR_META_KEY)) {\r\n        /** @type {?} */\r\n        var defaultMetadata = {\r\n            makeRootSelector: null,\r\n            originalFn: null,\r\n            containerClass: null,\r\n            selectorName: null,\r\n            getSelectorOptions: (/**\r\n             * @return {?}\r\n             */\r\n            function () { return ({}); })\r\n        };\r\n        Object.defineProperty(target, SELECTOR_META_KEY, { value: defaultMetadata });\r\n    }\r\n    return getSelectorMetadata(target);\r\n}\r\n/**\r\n * Get the metadata attached to the selector if it exists.\r\n *\r\n * @ignore\r\n * @param {?} target\r\n * @return {?}\r\n */\r\nfunction getSelectorMetadata(target) {\r\n    return target[SELECTOR_META_KEY];\r\n}\r\n/**\r\n * Get a deeply nested value. Example:\r\n *\r\n *    getValue({ foo: bar: [] }, 'foo.bar') //=> []\r\n *\r\n * Note: This is not as fast as the `fastPropGetter` but is strict Content Security Policy compliant.\r\n * See perf hit: https://jsperf.com/fast-value-getter-given-path/1\r\n *\r\n * @ignore\r\n * @param {?} paths\r\n * @return {?}\r\n */\r\nfunction compliantPropGetter(paths) {\r\n    /** @type {?} */\r\n    var copyOfPaths = paths.slice();\r\n    return (/**\r\n     * @param {?} obj\r\n     * @return {?}\r\n     */\r\n    function (obj) { return copyOfPaths.reduce((/**\r\n     * @param {?} acc\r\n     * @param {?} part\r\n     * @return {?}\r\n     */\r\n    function (acc, part) { return acc && acc[part]; }), obj); });\r\n}\r\n/**\r\n * The generated function is faster than:\r\n * - pluck (Observable operator)\r\n * - memoize\r\n *\r\n * @ignore\r\n * @param {?} paths\r\n * @return {?}\r\n */\r\nfunction fastPropGetter(paths) {\r\n    /** @type {?} */\r\n    var segments = paths;\r\n    /** @type {?} */\r\n    var seg = 'store.' + segments[0];\r\n    /** @type {?} */\r\n    var i = 0;\r\n    /** @type {?} */\r\n    var l = segments.length;\r\n    /** @type {?} */\r\n    var expr = seg;\r\n    while (++i < l) {\r\n        expr = expr + ' && ' + (seg = seg + '.' + segments[i]);\r\n    }\r\n    /** @type {?} */\r\n    var fn = new Function('store', 'return ' + expr + ';');\r\n    return (/** @type {?} */ (fn));\r\n}\r\n/**\r\n * Get a deeply nested value. Example:\r\n *\r\n *    getValue({ foo: bar: [] }, 'foo.bar') //=> []\r\n *\r\n * @ignore\r\n * @param {?} paths\r\n * @param {?} config\r\n * @return {?}\r\n */\r\nfunction propGetter(paths, config) {\r\n    if (config && config.compatibility && config.compatibility.strictContentSecurityPolicy) {\r\n        return compliantPropGetter(paths);\r\n    }\r\n    else {\r\n        return fastPropGetter(paths);\r\n    }\r\n}\r\n/**\r\n * Given an array of states, it will return a object graph. Example:\r\n *    const states = [\r\n *      Cart,\r\n *      CartSaved,\r\n *      CartSavedItems\r\n *    ]\r\n *\r\n * would return:\r\n *\r\n *  const graph = {\r\n *    cart: ['saved'],\r\n *    saved: ['items'],\r\n *    items: []\r\n *  };\r\n *\r\n * @ignore\r\n * @param {?} stateClasses\r\n * @return {?}\r\n */\r\nfunction buildGraph(stateClasses) {\r\n    /** @type {?} */\r\n    var findName = (/**\r\n     * @param {?} stateClass\r\n     * @return {?}\r\n     */\r\n    function (stateClass) {\r\n        /** @type {?} */\r\n        var meta = stateClasses.find((/**\r\n         * @param {?} g\r\n         * @return {?}\r\n         */\r\n        function (g) { return g === stateClass; }));\r\n        if (!meta) {\r\n            throw new Error(\"Child state not found: \" + stateClass + \". \\r\\nYou may have forgotten to add states to module\");\r\n        }\r\n        return (/** @type {?} */ ((/** @type {?} */ (meta[META_KEY])).name));\r\n    });\r\n    return stateClasses.reduce((/**\r\n     * @param {?} result\r\n     * @param {?} stateClass\r\n     * @return {?}\r\n     */\r\n    function (result, stateClass) {\r\n        var _a = (/** @type {?} */ (stateClass[META_KEY])), name = _a.name, children = _a.children;\r\n        result[(/** @type {?} */ (name))] = (children || []).map(findName);\r\n        return result;\r\n    }), {});\r\n}\r\n/**\r\n * Given a states array, returns object graph\r\n * returning the name and state metadata. Example:\r\n *\r\n *  const graph = {\r\n *    cart: { metadata }\r\n *  };\r\n *\r\n * @ignore\r\n * @param {?} states\r\n * @return {?}\r\n */\r\nfunction nameToState(states) {\r\n    return states.reduce((/**\r\n     * @param {?} result\r\n     * @param {?} stateClass\r\n     * @return {?}\r\n     */\r\n    function (result, stateClass) {\r\n        /** @type {?} */\r\n        var meta = (/** @type {?} */ (stateClass[META_KEY]));\r\n        result[(/** @type {?} */ (meta.name))] = stateClass;\r\n        return result;\r\n    }), {});\r\n}\r\n/**\r\n * Given a object relationship graph will return the full path\r\n * for the child items. Example:\r\n *\r\n *  const graph = {\r\n *    cart: ['saved'],\r\n *    saved: ['items'],\r\n *    items: []\r\n *  };\r\n *\r\n * would return:\r\n *\r\n *  const r = {\r\n *    cart: 'cart',\r\n *    saved: 'cart.saved',\r\n *    items: 'cart.saved.items'\r\n *  };\r\n *\r\n * @ignore\r\n * @param {?} obj\r\n * @param {?=} newObj\r\n * @return {?}\r\n */\r\nfunction findFullParentPath(obj, newObj) {\r\n    if (newObj === void 0) { newObj = {}; }\r\n    /** @type {?} */\r\n    var visit = (/**\r\n     * @param {?} child\r\n     * @param {?} keyToFind\r\n     * @return {?}\r\n     */\r\n    function (child, keyToFind) {\r\n        for (var key in child) {\r\n            if (child.hasOwnProperty(key) && child[key].indexOf(keyToFind) >= 0) {\r\n                /** @type {?} */\r\n                var parent_1 = visit(child, key);\r\n                return parent_1 !== null ? parent_1 + \".\" + key : key;\r\n            }\r\n        }\r\n        return null;\r\n    });\r\n    for (var key in obj) {\r\n        if (obj.hasOwnProperty(key)) {\r\n            /** @type {?} */\r\n            var parent_2 = visit(obj, key);\r\n            newObj[key] = parent_2 ? parent_2 + \".\" + key : key;\r\n        }\r\n    }\r\n    return newObj;\r\n}\r\n/**\r\n * Given a object graph, it will return the items topologically sorted Example:\r\n *\r\n *  const graph = {\r\n *    cart: ['saved'],\r\n *    saved: ['items'],\r\n *    items: []\r\n *  };\r\n *\r\n * would return:\r\n *\r\n *  const results = [\r\n *    'items',\r\n *    'saved',\r\n *    'cart'\r\n *  ];\r\n *\r\n * @ignore\r\n * @param {?} graph\r\n * @return {?}\r\n */\r\nfunction topologicalSort(graph) {\r\n    /** @type {?} */\r\n    var sorted = [];\r\n    /** @type {?} */\r\n    var visited = {};\r\n    /** @type {?} */\r\n    var visit = (/**\r\n     * @param {?} name\r\n     * @param {?=} ancestors\r\n     * @return {?}\r\n     */\r\n    function (name, ancestors) {\r\n        if (ancestors === void 0) { ancestors = []; }\r\n        if (!Array.isArray(ancestors)) {\r\n            ancestors = [];\r\n        }\r\n        ancestors.push(name);\r\n        visited[name] = true;\r\n        graph[name].forEach((/**\r\n         * @param {?} dep\r\n         * @return {?}\r\n         */\r\n        function (dep) {\r\n            if (ancestors.indexOf(dep) >= 0) {\r\n                throw new Error(\"Circular dependency '\" + dep + \"' is required by '\" + name + \"': \" + ancestors.join(' -> '));\r\n            }\r\n            if (visited[dep]) {\r\n                return;\r\n            }\r\n            visit(dep, ancestors.slice(0));\r\n        }));\r\n        if (sorted.indexOf(name) < 0) {\r\n            sorted.push(name);\r\n        }\r\n    });\r\n    Object.keys(graph).forEach((/**\r\n     * @param {?} k\r\n     * @return {?}\r\n     */\r\n    function (k) { return visit(k); }));\r\n    return sorted.reverse();\r\n}\r\n/**\r\n * Returns if the parameter is a object or not.\r\n *\r\n * @ignore\r\n * @param {?} obj\r\n * @return {?}\r\n */\r\nfunction isObject(obj) {\r\n    return (typeof obj === 'object' && obj !== null) || typeof obj === 'function';\r\n}\r\n/**\r\n * @template T\r\n * @param {?} mappedStore\r\n * @param {?} diff\r\n * @return {?}\r\n */\r\nfunction getStateDiffChanges(mappedStore, diff) {\r\n    /** @type {?} */\r\n    var previousValue = getValue(diff.currentAppState, mappedStore.path);\r\n    /** @type {?} */\r\n    var currentValue = getValue(diff.newAppState, mappedStore.path);\r\n    return new NgxsSimpleChange(previousValue, currentValue, !mappedStore.isInitialised);\r\n}\n\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\n/**\r\n * @record\r\n * @template T, E\r\n */\r\nfunction ActionCompletion() { }\r\nif (false) {\r\n    /** @type {?} */\r\n    ActionCompletion.prototype.action;\r\n    /** @type {?} */\r\n    ActionCompletion.prototype.result;\r\n}\r\n/**\r\n * RxJS operator for selecting out specific actions.\r\n *\r\n * This will grab actions that have just been dispatched as well as actions that have completed\r\n * @param {...?} allowedTypes\r\n * @return {?}\r\n */\r\nfunction ofAction() {\r\n    var allowedTypes = [];\r\n    for (var _i = 0; _i < arguments.length; _i++) {\r\n        allowedTypes[_i] = arguments[_i];\r\n    }\r\n    return ofActionOperator(allowedTypes);\r\n}\r\n/**\r\n * RxJS operator for selecting out specific actions.\r\n *\r\n * This will ONLY grab actions that have just been dispatched\r\n * @param {...?} allowedTypes\r\n * @return {?}\r\n */\r\nfunction ofActionDispatched() {\r\n    var allowedTypes = [];\r\n    for (var _i = 0; _i < arguments.length; _i++) {\r\n        allowedTypes[_i] = arguments[_i];\r\n    }\r\n    return ofActionOperator(allowedTypes, [\"DISPATCHED\" /* Dispatched */]);\r\n}\r\n/**\r\n * RxJS operator for selecting out specific actions.\r\n *\r\n * This will ONLY grab actions that have just been successfully completed\r\n * @param {...?} allowedTypes\r\n * @return {?}\r\n */\r\nfunction ofActionSuccessful() {\r\n    var allowedTypes = [];\r\n    for (var _i = 0; _i < arguments.length; _i++) {\r\n        allowedTypes[_i] = arguments[_i];\r\n    }\r\n    return ofActionOperator(allowedTypes, [\"SUCCESSFUL\" /* Successful */]);\r\n}\r\n/**\r\n * RxJS operator for selecting out specific actions.\r\n *\r\n * This will ONLY grab actions that have just been canceled\r\n * @param {...?} allowedTypes\r\n * @return {?}\r\n */\r\nfunction ofActionCanceled() {\r\n    var allowedTypes = [];\r\n    for (var _i = 0; _i < arguments.length; _i++) {\r\n        allowedTypes[_i] = arguments[_i];\r\n    }\r\n    return ofActionOperator(allowedTypes, [\"CANCELED\" /* Canceled */]);\r\n}\r\n/**\r\n * RxJS operator for selecting out specific actions.\r\n *\r\n * This will ONLY grab actions that have just been completed\r\n * @param {...?} allowedTypes\r\n * @return {?}\r\n */\r\nfunction ofActionCompleted() {\r\n    var allowedTypes = [];\r\n    for (var _i = 0; _i < arguments.length; _i++) {\r\n        allowedTypes[_i] = arguments[_i];\r\n    }\r\n    /** @type {?} */\r\n    var allowedStatuses = [\r\n        \"SUCCESSFUL\" /* Successful */,\r\n        \"CANCELED\" /* Canceled */,\r\n        \"ERRORED\" /* Errored */\r\n    ];\r\n    return ofActionOperator(allowedTypes, allowedStatuses, mapActionResult);\r\n}\r\n/**\r\n * RxJS operator for selecting out specific actions.\r\n *\r\n * This will ONLY grab actions that have just thrown an error\r\n * @param {...?} allowedTypes\r\n * @return {?}\r\n */\r\nfunction ofActionErrored() {\r\n    var allowedTypes = [];\r\n    for (var _i = 0; _i < arguments.length; _i++) {\r\n        allowedTypes[_i] = arguments[_i];\r\n    }\r\n    return ofActionOperator(allowedTypes, [\"ERRORED\" /* Errored */]);\r\n}\r\n/**\r\n * @template T\r\n * @param {?} allowedTypes\r\n * @param {?=} statuses\r\n * @param {?=} mapOperator\r\n * @return {?}\r\n */\r\nfunction ofActionOperator(allowedTypes, statuses, mapOperator) {\r\n    if (mapOperator === void 0) { mapOperator = mapAction; }\r\n    /** @type {?} */\r\n    var allowedMap = createAllowedActionTypesMap(allowedTypes);\r\n    /** @type {?} */\r\n    var allowedStatusMap = statuses && createAllowedStatusesMap(statuses);\r\n    return (/**\r\n     * @param {?} o\r\n     * @return {?}\r\n     */\r\n    function (o) {\r\n        return o.pipe(filterStatus(allowedMap, allowedStatusMap), mapOperator());\r\n    });\r\n}\r\n/**\r\n * @param {?} allowedTypes\r\n * @param {?=} allowedStatuses\r\n * @return {?}\r\n */\r\nfunction filterStatus(allowedTypes, allowedStatuses) {\r\n    return filter((/**\r\n     * @param {?} ctx\r\n     * @return {?}\r\n     */\r\n    function (ctx) {\r\n        /** @type {?} */\r\n        var actionType = (/** @type {?} */ (getActionTypeFromInstance(ctx.action)));\r\n        /** @type {?} */\r\n        var typeMatch = allowedTypes[actionType];\r\n        /** @type {?} */\r\n        var statusMatch = allowedStatuses ? allowedStatuses[ctx.status] : true;\r\n        return typeMatch && statusMatch;\r\n    }));\r\n}\r\n/**\r\n * @return {?}\r\n */\r\nfunction mapActionResult() {\r\n    return map((/**\r\n     * @param {?} __0\r\n     * @return {?}\r\n     */\r\n    function (_a) {\r\n        var action = _a.action, status = _a.status, error = _a.error;\r\n        return (/** @type {?} */ ({\r\n            action: action,\r\n            result: {\r\n                successful: \"SUCCESSFUL\" /* Successful */ === status,\r\n                canceled: \"CANCELED\" /* Canceled */ === status,\r\n                error: error\r\n            }\r\n        }));\r\n    }));\r\n}\r\n/**\r\n * @template T\r\n * @return {?}\r\n */\r\nfunction mapAction() {\r\n    return map((/**\r\n     * @param {?} ctx\r\n     * @return {?}\r\n     */\r\n    function (ctx) { return (/** @type {?} */ (ctx.action)); }));\r\n}\r\n/**\r\n * @record\r\n */\r\nfunction FilterMap() { }\r\n/**\r\n * @param {?} types\r\n * @return {?}\r\n */\r\nfunction createAllowedActionTypesMap(types) {\r\n    return types.reduce((/**\r\n     * @param {?} filterMap\r\n     * @param {?} klass\r\n     * @return {?}\r\n     */\r\n    function (filterMap, klass) {\r\n        filterMap[(/** @type {?} */ (getActionTypeFromInstance(klass)))] = true;\r\n        return filterMap;\r\n    }), (/** @type {?} */ ({})));\r\n}\r\n/**\r\n * @param {?} statuses\r\n * @return {?}\r\n */\r\nfunction createAllowedStatusesMap(statuses) {\r\n    return statuses.reduce((/**\r\n     * @param {?} filterMap\r\n     * @param {?} status\r\n     * @return {?}\r\n     */\r\n    function (filterMap, status) {\r\n        filterMap[status] = true;\r\n        return filterMap;\r\n    }), (/** @type {?} */ ({})));\r\n}\n\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\n/**\r\n * Returns operator that will run\r\n * `subscribe` outside of the ngxs execution context\r\n * @template T\r\n * @param {?} ngxsExecutionStrategy\r\n * @return {?}\r\n */\r\nfunction leaveNgxs(ngxsExecutionStrategy) {\r\n    return (/**\r\n     * @param {?} source\r\n     * @return {?}\r\n     */\r\n    function (source) {\r\n        return new Observable((/**\r\n         * @param {?} sink\r\n         * @return {?}\r\n         */\r\n        function (sink) {\r\n            return source.subscribe({\r\n                next: /**\r\n                 * @param {?} value\r\n                 * @return {?}\r\n                 */\r\n                function (value) {\r\n                    ngxsExecutionStrategy.leave((/**\r\n                     * @return {?}\r\n                     */\r\n                    function () { return sink.next(value); }));\r\n                },\r\n                error: /**\r\n                 * @param {?} error\r\n                 * @return {?}\r\n                 */\r\n                function (error) {\r\n                    ngxsExecutionStrategy.leave((/**\r\n                     * @return {?}\r\n                     */\r\n                    function () { return sink.error(error); }));\r\n                },\r\n                complete: /**\r\n                 * @return {?}\r\n                 */\r\n                function () {\r\n                    ngxsExecutionStrategy.leave((/**\r\n                     * @return {?}\r\n                     */\r\n                    function () { return sink.complete(); }));\r\n                }\r\n            });\r\n        }));\r\n    });\r\n}\n\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\nvar InternalNgxsExecutionStrategy = /** @class */ (function () {\r\n    function InternalNgxsExecutionStrategy(_executionStrategy) {\r\n        this._executionStrategy = _executionStrategy;\r\n    }\r\n    /**\r\n     * @template T\r\n     * @param {?} func\r\n     * @return {?}\r\n     */\r\n    InternalNgxsExecutionStrategy.prototype.enter = /**\r\n     * @template T\r\n     * @param {?} func\r\n     * @return {?}\r\n     */\r\n    function (func) {\r\n        return this._executionStrategy.enter(func);\r\n    };\r\n    /**\r\n     * @template T\r\n     * @param {?} func\r\n     * @return {?}\r\n     */\r\n    InternalNgxsExecutionStrategy.prototype.leave = /**\r\n     * @template T\r\n     * @param {?} func\r\n     * @return {?}\r\n     */\r\n    function (func) {\r\n        return this._executionStrategy.leave(func);\r\n    };\r\n    InternalNgxsExecutionStrategy.decorators = [\r\n        { type: Injectable }\r\n    ];\r\n    /** @nocollapse */\r\n    InternalNgxsExecutionStrategy.ctorParameters = function () { return [\r\n        { type: undefined, decorators: [{ type: Inject, args: [NGXS_EXECUTION_STRATEGY,] }] }\r\n    ]; };\r\n    return InternalNgxsExecutionStrategy;\r\n}());\r\nif (false) {\r\n    /**\r\n     * @type {?}\r\n     * @private\r\n     */\r\n    InternalNgxsExecutionStrategy.prototype._executionStrategy;\r\n}\n\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\n/** @enum {string} */\r\nvar ActionStatus = {\r\n    Dispatched: 'DISPATCHED',\r\n    Successful: 'SUCCESSFUL',\r\n    Canceled: 'CANCELED',\r\n    Errored: 'ERRORED',\r\n};\r\n/**\r\n * @record\r\n * @template T\r\n */\r\nfunction ActionContext() { }\r\nif (false) {\r\n    /** @type {?} */\r\n    ActionContext.prototype.status;\r\n    /** @type {?} */\r\n    ActionContext.prototype.action;\r\n    /** @type {?|undefined} */\r\n    ActionContext.prototype.error;\r\n}\r\n/**\r\n * Custom Subject that ensures that subscribers are notified of values in the order that they arrived.\r\n * A standard Subject does not have this guarantee.\r\n * For example, given the following code:\r\n * ```typescript\r\n *   const subject = new Subject<string>();\r\n * subject.subscribe(value => {\r\n * if (value === 'start') subject.next('end');\r\n * });\r\n * subject.subscribe(value => { });\r\n * subject.next('start');\r\n * ```\r\n * When `subject` is a standard `Subject<T>` the second subscriber would recieve `end` and then `start`.\r\n * When `subject` is a `OrderedSubject<T>` the second subscriber would recieve `start` and then `end`.\r\n * @template T\r\n */\r\nvar  /**\r\n * Custom Subject that ensures that subscribers are notified of values in the order that they arrived.\r\n * A standard Subject does not have this guarantee.\r\n * For example, given the following code:\r\n * ```typescript\r\n *   const subject = new Subject<string>();\r\n * subject.subscribe(value => {\r\n * if (value === 'start') subject.next('end');\r\n * });\r\n * subject.subscribe(value => { });\r\n * subject.next('start');\r\n * ```\r\n * When `subject` is a standard `Subject<T>` the second subscriber would recieve `end` and then `start`.\r\n * When `subject` is a `OrderedSubject<T>` the second subscriber would recieve `start` and then `end`.\r\n * @template T\r\n */\r\nOrderedSubject = /** @class */ (function (_super) {\r\n    __extends(OrderedSubject, _super);\r\n    function OrderedSubject() {\r\n        var _this = _super !== null && _super.apply(this, arguments) || this;\r\n        _this._itemQueue = [];\r\n        _this._busyPushingNext = false;\r\n        return _this;\r\n    }\r\n    /**\r\n     * @param {?=} value\r\n     * @return {?}\r\n     */\r\n    OrderedSubject.prototype.next = /**\r\n     * @param {?=} value\r\n     * @return {?}\r\n     */\r\n    function (value) {\r\n        if (this._busyPushingNext) {\r\n            this._itemQueue.unshift((/** @type {?} */ (value)));\r\n            return;\r\n        }\r\n        this._busyPushingNext = true;\r\n        _super.prototype.next.call(this, value);\r\n        while (this._itemQueue.length > 0) {\r\n            /** @type {?} */\r\n            var nextValue = this._itemQueue.pop();\r\n            _super.prototype.next.call(this, nextValue);\r\n        }\r\n        this._busyPushingNext = false;\r\n    };\r\n    return OrderedSubject;\r\n}(Subject));\r\nif (false) {\r\n    /**\r\n     * @type {?}\r\n     * @private\r\n     */\r\n    OrderedSubject.prototype._itemQueue;\r\n    /**\r\n     * @type {?}\r\n     * @private\r\n     */\r\n    OrderedSubject.prototype._busyPushingNext;\r\n}\r\n/**\r\n * Internal Action stream that is emitted anytime an action is dispatched.\r\n */\r\nvar InternalActions = /** @class */ (function (_super) {\r\n    __extends(InternalActions, _super);\r\n    function InternalActions() {\r\n        return _super !== null && _super.apply(this, arguments) || this;\r\n    }\r\n    InternalActions.decorators = [\r\n        { type: Injectable }\r\n    ];\r\n    return InternalActions;\r\n}(OrderedSubject));\r\n/**\r\n * Action stream that is emitted anytime an action is dispatched.\r\n *\r\n * You can listen to this in services to react without stores.\r\n */\r\nvar Actions = /** @class */ (function (_super) {\r\n    __extends(Actions, _super);\r\n    // This has to be `Observable<ActionContext>` in the v4. Because `InternalActions`\r\n    // is a `Subject<ActionContext>`. Leave it as `any` to avoid breaking changes\r\n    function Actions(internalActions$, internalExecutionStrategy) {\r\n        return _super.call(this, (/**\r\n         * @param {?} observer\r\n         * @return {?}\r\n         */\r\n        function (observer) {\r\n            /** @type {?} */\r\n            var childSubscription = internalActions$\r\n                .pipe(leaveNgxs(internalExecutionStrategy))\r\n                .subscribe({\r\n                next: (/**\r\n                 * @param {?} ctx\r\n                 * @return {?}\r\n                 */\r\n                function (ctx) { return observer.next(ctx); }),\r\n                error: (/**\r\n                 * @param {?} error\r\n                 * @return {?}\r\n                 */\r\n                function (error) { return observer.error(error); }),\r\n                complete: (/**\r\n                 * @return {?}\r\n                 */\r\n                function () { return observer.complete(); })\r\n            });\r\n            observer.add(childSubscription);\r\n        })) || this;\r\n    }\r\n    Actions.decorators = [\r\n        { type: Injectable }\r\n    ];\r\n    /** @nocollapse */\r\n    Actions.ctorParameters = function () { return [\r\n        { type: InternalActions },\r\n        { type: InternalNgxsExecutionStrategy }\r\n    ]; };\r\n    return Actions;\r\n}(Observable));\n\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\n/**\r\n * Composes a array of functions from left to right. Example:\r\n *\r\n *      compose([fn, final])(state, action);\r\n *\r\n * then the funcs have a signature like:\r\n *\r\n *      function fn (state, action, next) {\r\n *          console.log('here', state, action, next);\r\n *          return next(state, action);\r\n *      }\r\n *\r\n *      function final (state, action) {\r\n *          console.log('here', state, action);\r\n *          return state;\r\n *      }\r\n *\r\n * the last function should not call `next`.\r\n *\r\n * @ignore\r\n * @type {?}\r\n */\r\nvar compose = (/**\r\n * @param {?} funcs\r\n * @return {?}\r\n */\r\nfunction (funcs) { return (/**\r\n * @param {...?} args\r\n * @return {?}\r\n */\r\nfunction () {\r\n    var args = [];\r\n    for (var _i = 0; _i < arguments.length; _i++) {\r\n        args[_i] = arguments[_i];\r\n    }\r\n    /** @type {?} */\r\n    var curr = (/** @type {?} */ (funcs.shift()));\r\n    return curr.apply(void 0, __spread(args, [(/**\r\n         * @param {...?} nextArgs\r\n         * @return {?}\r\n         */\r\n        function () {\r\n            var nextArgs = [];\r\n            for (var _i = 0; _i < arguments.length; _i++) {\r\n                nextArgs[_i] = arguments[_i];\r\n            }\r\n            return compose(funcs).apply(void 0, __spread(nextArgs));\r\n        })]));\r\n}); });\n\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\n/**\r\n * BehaviorSubject of the entire state.\r\n * @ignore\r\n */\r\nvar StateStream = /** @class */ (function (_super) {\r\n    __extends(StateStream, _super);\r\n    function StateStream() {\r\n        return _super.call(this, {}) || this;\r\n    }\r\n    StateStream.decorators = [\r\n        { type: Injectable }\r\n    ];\r\n    /** @nocollapse */\r\n    StateStream.ctorParameters = function () { return []; };\r\n    return StateStream;\r\n}(BehaviorSubject));\n\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\nvar PluginManager = /** @class */ (function () {\r\n    function PluginManager(_parentManager, _pluginHandlers) {\r\n        this._parentManager = _parentManager;\r\n        this._pluginHandlers = _pluginHandlers;\r\n        this.plugins = [];\r\n        this.registerHandlers();\r\n    }\r\n    Object.defineProperty(PluginManager.prototype, \"rootPlugins\", {\r\n        get: /**\r\n         * @private\r\n         * @return {?}\r\n         */\r\n        function () {\r\n            return (this._parentManager && this._parentManager.plugins) || this.plugins;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * @private\r\n     * @return {?}\r\n     */\r\n    PluginManager.prototype.registerHandlers = /**\r\n     * @private\r\n     * @return {?}\r\n     */\r\n    function () {\r\n        var _a;\r\n        /** @type {?} */\r\n        var pluginHandlers = this.getPluginHandlers();\r\n        (_a = this.rootPlugins).push.apply(_a, __spread(pluginHandlers));\r\n    };\r\n    /**\r\n     * @private\r\n     * @return {?}\r\n     */\r\n    PluginManager.prototype.getPluginHandlers = /**\r\n     * @private\r\n     * @return {?}\r\n     */\r\n    function () {\r\n        /** @type {?} */\r\n        var handlers = this._pluginHandlers || [];\r\n        return handlers.map((/**\r\n         * @param {?} plugin\r\n         * @return {?}\r\n         */\r\n        function (plugin) { return (/** @type {?} */ ((plugin.handle ? plugin.handle.bind(plugin) : plugin))); }));\r\n    };\r\n    PluginManager.decorators = [\r\n        { type: Injectable }\r\n    ];\r\n    /** @nocollapse */\r\n    PluginManager.ctorParameters = function () { return [\r\n        { type: PluginManager, decorators: [{ type: Optional }, { type: SkipSelf }] },\r\n        { type: Array, decorators: [{ type: Inject, args: [NGXS_PLUGINS,] }, { type: Optional }] }\r\n    ]; };\r\n    return PluginManager;\r\n}());\r\nif (false) {\r\n    /** @type {?} */\r\n    PluginManager.prototype.plugins;\r\n    /**\r\n     * @type {?}\r\n     * @private\r\n     */\r\n    PluginManager.prototype._parentManager;\r\n    /**\r\n     * @type {?}\r\n     * @private\r\n     */\r\n    PluginManager.prototype._pluginHandlers;\r\n}\n\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\n/**\r\n * Internal Action result stream that is emitted when an action is completed.\r\n * This is used as a method of returning the action result to the dispatcher\r\n * for the observable returned by the dispatch(...) call.\r\n * The dispatcher then asynchronously pushes the result from this stream onto the main action stream as a result.\r\n */\r\nvar InternalDispatchedActionResults = /** @class */ (function (_super) {\r\n    __extends(InternalDispatchedActionResults, _super);\r\n    function InternalDispatchedActionResults() {\r\n        return _super !== null && _super.apply(this, arguments) || this;\r\n    }\r\n    InternalDispatchedActionResults.decorators = [\r\n        { type: Injectable }\r\n    ];\r\n    return InternalDispatchedActionResults;\r\n}(Subject));\r\nvar InternalDispatcher = /** @class */ (function () {\r\n    function InternalDispatcher(_errorHandler, _actions, _actionResults, _pluginManager, _stateStream, _ngxsExecutionStrategy) {\r\n        this._errorHandler = _errorHandler;\r\n        this._actions = _actions;\r\n        this._actionResults = _actionResults;\r\n        this._pluginManager = _pluginManager;\r\n        this._stateStream = _stateStream;\r\n        this._ngxsExecutionStrategy = _ngxsExecutionStrategy;\r\n    }\r\n    /**\r\n     * Dispatches event(s).\r\n     */\r\n    /**\r\n     * Dispatches event(s).\r\n     * @param {?} actionOrActions\r\n     * @return {?}\r\n     */\r\n    InternalDispatcher.prototype.dispatch = /**\r\n     * Dispatches event(s).\r\n     * @param {?} actionOrActions\r\n     * @return {?}\r\n     */\r\n    function (actionOrActions) {\r\n        var _this = this;\r\n        /** @type {?} */\r\n        var result = this._ngxsExecutionStrategy.enter((/**\r\n         * @return {?}\r\n         */\r\n        function () {\r\n            return _this.dispatchByEvents(actionOrActions);\r\n        }));\r\n        result.subscribe({\r\n            error: (/**\r\n             * @param {?} error\r\n             * @return {?}\r\n             */\r\n            function (error) {\r\n                return _this._ngxsExecutionStrategy.leave((/**\r\n                 * @return {?}\r\n                 */\r\n                function () {\r\n                    try {\r\n                        _this._errorHandler.handleError(error);\r\n                    }\r\n                    catch (_a) { }\r\n                }));\r\n            })\r\n        });\r\n        return result.pipe(leaveNgxs(this._ngxsExecutionStrategy));\r\n    };\r\n    /**\r\n     * @private\r\n     * @param {?} actionOrActions\r\n     * @return {?}\r\n     */\r\n    InternalDispatcher.prototype.dispatchByEvents = /**\r\n     * @private\r\n     * @param {?} actionOrActions\r\n     * @return {?}\r\n     */\r\n    function (actionOrActions) {\r\n        var _this = this;\r\n        if (Array.isArray(actionOrActions)) {\r\n            if (actionOrActions.length === 0)\r\n                return of(this._stateStream.getValue());\r\n            return forkJoin(actionOrActions.map((/**\r\n             * @param {?} action\r\n             * @return {?}\r\n             */\r\n            function (action) { return _this.dispatchSingle(action); })));\r\n        }\r\n        else {\r\n            return this.dispatchSingle(actionOrActions);\r\n        }\r\n    };\r\n    /**\r\n     * @private\r\n     * @param {?} action\r\n     * @return {?}\r\n     */\r\n    InternalDispatcher.prototype.dispatchSingle = /**\r\n     * @private\r\n     * @param {?} action\r\n     * @return {?}\r\n     */\r\n    function (action) {\r\n        var _this = this;\r\n        /** @type {?} */\r\n        var prevState = this._stateStream.getValue();\r\n        /** @type {?} */\r\n        var plugins = this._pluginManager.plugins;\r\n        return ((/** @type {?} */ (compose(__spread(plugins, [\r\n            (/**\r\n             * @param {?} nextState\r\n             * @param {?} nextAction\r\n             * @return {?}\r\n             */\r\n            function (nextState, nextAction) {\r\n                if (nextState !== prevState) {\r\n                    _this._stateStream.next(nextState);\r\n                }\r\n                /** @type {?} */\r\n                var actionResult$ = _this.getActionResultStream(nextAction);\r\n                actionResult$.subscribe((/**\r\n                 * @param {?} ctx\r\n                 * @return {?}\r\n                 */\r\n                function (ctx) { return _this._actions.next(ctx); }));\r\n                _this._actions.next({ action: nextAction, status: \"DISPATCHED\" /* Dispatched */ });\r\n                return _this.createDispatchObservable(actionResult$);\r\n            })\r\n        ]))(prevState, action)))).pipe(shareReplay());\r\n    };\r\n    /**\r\n     * @private\r\n     * @param {?} action\r\n     * @return {?}\r\n     */\r\n    InternalDispatcher.prototype.getActionResultStream = /**\r\n     * @private\r\n     * @param {?} action\r\n     * @return {?}\r\n     */\r\n    function (action) {\r\n        return this._actionResults.pipe(filter((/**\r\n         * @param {?} ctx\r\n         * @return {?}\r\n         */\r\n        function (ctx) { return ctx.action === action && ctx.status !== \"DISPATCHED\" /* Dispatched */; })), take(1), shareReplay());\r\n    };\r\n    /**\r\n     * @private\r\n     * @param {?} actionResult$\r\n     * @return {?}\r\n     */\r\n    InternalDispatcher.prototype.createDispatchObservable = /**\r\n     * @private\r\n     * @param {?} actionResult$\r\n     * @return {?}\r\n     */\r\n    function (actionResult$) {\r\n        var _this = this;\r\n        return actionResult$\r\n            .pipe(exhaustMap((/**\r\n         * @param {?} ctx\r\n         * @return {?}\r\n         */\r\n        function (ctx) {\r\n            switch (ctx.status) {\r\n                case \"SUCCESSFUL\" /* Successful */:\r\n                    return of(_this._stateStream.getValue());\r\n                case \"ERRORED\" /* Errored */:\r\n                    return throwError(ctx.error);\r\n                default:\r\n                    return EMPTY;\r\n            }\r\n        })))\r\n            .pipe(shareReplay());\r\n    };\r\n    InternalDispatcher.decorators = [\r\n        { type: Injectable }\r\n    ];\r\n    /** @nocollapse */\r\n    InternalDispatcher.ctorParameters = function () { return [\r\n        { type: ErrorHandler },\r\n        { type: InternalActions },\r\n        { type: InternalDispatchedActionResults },\r\n        { type: PluginManager },\r\n        { type: StateStream },\r\n        { type: InternalNgxsExecutionStrategy }\r\n    ]; };\r\n    return InternalDispatcher;\r\n}());\r\nif (false) {\r\n    /**\r\n     * @type {?}\r\n     * @private\r\n     */\r\n    InternalDispatcher.prototype._errorHandler;\r\n    /**\r\n     * @type {?}\r\n     * @private\r\n     */\r\n    InternalDispatcher.prototype._actions;\r\n    /**\r\n     * @type {?}\r\n     * @private\r\n     */\r\n    InternalDispatcher.prototype._actionResults;\r\n    /**\r\n     * @type {?}\r\n     * @private\r\n     */\r\n    InternalDispatcher.prototype._pluginManager;\r\n    /**\r\n     * @type {?}\r\n     * @private\r\n     */\r\n    InternalDispatcher.prototype._stateStream;\r\n    /**\r\n     * @type {?}\r\n     * @private\r\n     */\r\n    InternalDispatcher.prototype._ngxsExecutionStrategy;\r\n}\n\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\n/**\r\n * Object freeze code\r\n * https://github.com/jsdf/deep-freeze\r\n * @type {?}\r\n */\r\nvar deepFreeze = (/**\r\n * @param {?} o\r\n * @return {?}\r\n */\r\nfunction (o) {\r\n    Object.freeze(o);\r\n    /** @type {?} */\r\n    var oIsFunction = typeof o === 'function';\r\n    /** @type {?} */\r\n    var hasOwnProp = Object.prototype.hasOwnProperty;\r\n    Object.getOwnPropertyNames(o).forEach((/**\r\n     * @param {?} prop\r\n     * @return {?}\r\n     */\r\n    function (prop) {\r\n        if (hasOwnProp.call(o, prop) &&\r\n            (oIsFunction ? prop !== 'caller' && prop !== 'callee' && prop !== 'arguments' : true) &&\r\n            o[prop] !== null &&\r\n            (typeof o[prop] === 'object' || typeof o[prop] === 'function') &&\r\n            !Object.isFrozen(o[prop])) {\r\n            deepFreeze(o[prop]);\r\n        }\r\n    }));\r\n    return o;\r\n});\n\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\nvar HostEnvironment = /** @class */ (function () {\r\n    function HostEnvironment(isDevMode, isTestMode) {\r\n        this.isDevMode = isDevMode;\r\n        this.isTestMode = isTestMode;\r\n    }\r\n    HostEnvironment.decorators = [\r\n        { type: Injectable }\r\n    ];\r\n    /** @nocollapse */\r\n    HostEnvironment.ctorParameters = function () { return [\r\n        { type: undefined, decorators: [{ type: Inject, args: [NG_DEV_MODE,] }] },\r\n        { type: undefined, decorators: [{ type: Inject, args: [NG_TEST_MODE,] }] }\r\n    ]; };\r\n    return HostEnvironment;\r\n}());\r\nif (false) {\r\n    /** @type {?} */\r\n    HostEnvironment.prototype.isDevMode;\r\n    /** @type {?} */\r\n    HostEnvironment.prototype.isTestMode;\r\n}\n\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\nvar ConfigValidator = /** @class */ (function () {\r\n    function ConfigValidator(_host, _config) {\r\n        this._host = _host;\r\n        this._config = _config;\r\n    }\r\n    Object.defineProperty(ConfigValidator.prototype, \"isIncorrectProduction\", {\r\n        get: /**\r\n         * @private\r\n         * @return {?}\r\n         */\r\n        function () {\r\n            return !this._host.isDevMode() && this._config.developmentMode;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(ConfigValidator.prototype, \"isIncorrectDevelopment\", {\r\n        get: /**\r\n         * @private\r\n         * @return {?}\r\n         */\r\n        function () {\r\n            return this._host.isDevMode() && !this._config.developmentMode;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * @return {?}\r\n     */\r\n    ConfigValidator.prototype.verifyDevMode = /**\r\n     * @return {?}\r\n     */\r\n    function () {\r\n        if (this._host.isTestMode()) {\r\n            return;\r\n        }\r\n        if (this.isIncorrectProduction) {\r\n            console.warn(CONFIG_MESSAGES[VALIDATION_CODE.INCORRECT_PRODUCTION]());\r\n        }\r\n        else if (this.isIncorrectDevelopment) {\r\n            console.warn(CONFIG_MESSAGES[VALIDATION_CODE.INCORRECT_DEVELOPMENT]());\r\n        }\r\n    };\r\n    ConfigValidator.decorators = [\r\n        { type: Injectable }\r\n    ];\r\n    /** @nocollapse */\r\n    ConfigValidator.ctorParameters = function () { return [\r\n        { type: HostEnvironment },\r\n        { type: NgxsConfig }\r\n    ]; };\r\n    return ConfigValidator;\r\n}());\r\nif (false) {\r\n    /**\r\n     * @type {?}\r\n     * @private\r\n     */\r\n    ConfigValidator.prototype._host;\r\n    /**\r\n     * @type {?}\r\n     * @private\r\n     */\r\n    ConfigValidator.prototype._config;\r\n}\n\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\n/**\r\n * State Context factory class\r\n * @ignore\r\n */\r\nvar InternalStateOperations = /** @class */ (function () {\r\n    function InternalStateOperations(_stateStream, _dispatcher, _config, configValidator) {\r\n        this._stateStream = _stateStream;\r\n        this._dispatcher = _dispatcher;\r\n        this._config = _config;\r\n        configValidator.verifyDevMode();\r\n    }\r\n    /**\r\n     * Returns the root state operators.\r\n     */\r\n    /**\r\n     * Returns the root state operators.\r\n     * @return {?}\r\n     */\r\n    InternalStateOperations.prototype.getRootStateOperations = /**\r\n     * Returns the root state operators.\r\n     * @return {?}\r\n     */\r\n    function () {\r\n        var _this = this;\r\n        /** @type {?} */\r\n        var rootStateOperations = {\r\n            getState: (/**\r\n             * @return {?}\r\n             */\r\n            function () { return _this._stateStream.getValue(); }),\r\n            setState: (/**\r\n             * @param {?} newState\r\n             * @return {?}\r\n             */\r\n            function (newState) { return _this._stateStream.next(newState); }),\r\n            dispatch: (/**\r\n             * @param {?} actions\r\n             * @return {?}\r\n             */\r\n            function (actions) { return _this._dispatcher.dispatch(actions); })\r\n        };\r\n        if (this._config.developmentMode) {\r\n            return this.ensureStateAndActionsAreImmutable(rootStateOperations);\r\n        }\r\n        return rootStateOperations;\r\n    };\r\n    /**\r\n     * @private\r\n     * @param {?} root\r\n     * @return {?}\r\n     */\r\n    InternalStateOperations.prototype.ensureStateAndActionsAreImmutable = /**\r\n     * @private\r\n     * @param {?} root\r\n     * @return {?}\r\n     */\r\n    function (root) {\r\n        return {\r\n            getState: (/**\r\n             * @return {?}\r\n             */\r\n            function () { return root.getState(); }),\r\n            setState: (/**\r\n             * @param {?} value\r\n             * @return {?}\r\n             */\r\n            function (value) {\r\n                /** @type {?} */\r\n                var frozenValue = deepFreeze(value);\r\n                return root.setState(frozenValue);\r\n            }),\r\n            dispatch: (/**\r\n             * @param {?} actions\r\n             * @return {?}\r\n             */\r\n            function (actions) {\r\n                return root.dispatch(actions);\r\n            })\r\n        };\r\n    };\r\n    /**\r\n     * @param {?} results\r\n     * @return {?}\r\n     */\r\n    InternalStateOperations.prototype.setStateToTheCurrentWithNew = /**\r\n     * @param {?} results\r\n     * @return {?}\r\n     */\r\n    function (results) {\r\n        /** @type {?} */\r\n        var stateOperations = this.getRootStateOperations();\r\n        // Get our current stream\r\n        /** @type {?} */\r\n        var currentState = stateOperations.getState();\r\n        // Set the state to the current + new\r\n        stateOperations.setState(__assign({}, currentState, results.defaults));\r\n    };\r\n    InternalStateOperations.decorators = [\r\n        { type: Injectable }\r\n    ];\r\n    /** @nocollapse */\r\n    InternalStateOperations.ctorParameters = function () { return [\r\n        { type: StateStream },\r\n        { type: InternalDispatcher },\r\n        { type: NgxsConfig },\r\n        { type: ConfigValidator }\r\n    ]; };\r\n    return InternalStateOperations;\r\n}());\r\nif (false) {\r\n    /**\r\n     * @type {?}\r\n     * @private\r\n     */\r\n    InternalStateOperations.prototype._stateStream;\r\n    /**\r\n     * @type {?}\r\n     * @private\r\n     */\r\n    InternalStateOperations.prototype._dispatcher;\r\n    /**\r\n     * @type {?}\r\n     * @private\r\n     */\r\n    InternalStateOperations.prototype._config;\r\n}\n\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\n/**\r\n * @template T\r\n * @param {?} val\r\n * @return {?}\r\n */\r\nfunction simplePatch(val) {\r\n    return (/**\r\n     * @param {?} existingState\r\n     * @return {?}\r\n     */\r\n    function (existingState) {\r\n        if (Array.isArray(val)) {\r\n            throw new Error(CONFIG_MESSAGES[VALIDATION_CODE.PATCHING_ARRAY]());\r\n        }\r\n        else if (typeof val !== 'object') {\r\n            throw new Error(CONFIG_MESSAGES[VALIDATION_CODE.PATCHING_PRIMITIVE]());\r\n        }\r\n        /** @type {?} */\r\n        var newState = __assign({}, ((/** @type {?} */ (existingState))));\r\n        for (var key in val) {\r\n            // deep clone for patch compatibility\r\n            // noinspection JSUnfilteredForInLoop (IDE)\r\n            newState[key] = ((/** @type {?} */ (val)))[key];\r\n        }\r\n        return (/** @type {?} */ (newState));\r\n    });\r\n}\n\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\n/**\r\n * State Context factory class\r\n * @ignore\r\n */\r\nvar StateContextFactory = /** @class */ (function () {\r\n    function StateContextFactory(_internalStateOperations) {\r\n        this._internalStateOperations = _internalStateOperations;\r\n    }\r\n    /**\r\n     * Create the state context\r\n     */\r\n    /**\r\n     * Create the state context\r\n     * @template T\r\n     * @param {?} mappedStore\r\n     * @return {?}\r\n     */\r\n    StateContextFactory.prototype.createStateContext = /**\r\n     * Create the state context\r\n     * @template T\r\n     * @param {?} mappedStore\r\n     * @return {?}\r\n     */\r\n    function (mappedStore) {\r\n        /** @type {?} */\r\n        var root = this._internalStateOperations.getRootStateOperations();\r\n        /**\r\n         * @param {?} currentAppState\r\n         * @return {?}\r\n         */\r\n        function getState(currentAppState) {\r\n            return getValue(currentAppState, mappedStore.path);\r\n        }\r\n        /**\r\n         * @param {?} currentAppState\r\n         * @param {?} newValue\r\n         * @return {?}\r\n         */\r\n        function setStateValue(currentAppState, newValue) {\r\n            /** @type {?} */\r\n            var newAppState = setValue(currentAppState, mappedStore.path, newValue);\r\n            /** @type {?} */\r\n            var instance = mappedStore.instance;\r\n            if (instance.ngxsOnChanges) {\r\n                /** @type {?} */\r\n                var change = getStateDiffChanges(mappedStore, {\r\n                    currentAppState: currentAppState,\r\n                    newAppState: newAppState\r\n                });\r\n                instance.ngxsOnChanges(change);\r\n            }\r\n            root.setState(newAppState);\r\n            return newAppState;\r\n            // In doing this refactoring I noticed that there is a 'bug' where the\r\n            // application state is returned instead of this state slice.\r\n            // This has worked this way since the beginning see:\r\n            // https://github.com/ngxs/store/blame/324c667b4b7debd8eb979006c67ca0ae347d88cd/src/state-factory.ts\r\n            // This needs to be fixed, but is a 'breaking' change.\r\n            // I will do this fix in a subsequent PR and we can decide how to handle it.\r\n        }\r\n        /**\r\n         * @param {?} currentAppState\r\n         * @param {?} stateOperator\r\n         * @return {?}\r\n         */\r\n        function setStateFromOperator(currentAppState, stateOperator) {\r\n            /** @type {?} */\r\n            var local = getState(currentAppState);\r\n            /** @type {?} */\r\n            var newValue = stateOperator(local);\r\n            return setStateValue(currentAppState, newValue);\r\n        }\r\n        /**\r\n         * @param {?} value\r\n         * @return {?}\r\n         */\r\n        function isStateOperator(value) {\r\n            return typeof value === 'function';\r\n        }\r\n        return {\r\n            getState: /**\r\n             * @return {?}\r\n             */\r\n            function () {\r\n                /** @type {?} */\r\n                var currentAppState = root.getState();\r\n                return getState(currentAppState);\r\n            },\r\n            patchState: /**\r\n             * @param {?} val\r\n             * @return {?}\r\n             */\r\n            function (val) {\r\n                /** @type {?} */\r\n                var currentAppState = root.getState();\r\n                /** @type {?} */\r\n                var patchOperator = simplePatch(val);\r\n                return setStateFromOperator(currentAppState, patchOperator);\r\n            },\r\n            setState: /**\r\n             * @param {?} val\r\n             * @return {?}\r\n             */\r\n            function (val) {\r\n                /** @type {?} */\r\n                var currentAppState = root.getState();\r\n                return isStateOperator(val)\r\n                    ? setStateFromOperator(currentAppState, val)\r\n                    : setStateValue(currentAppState, val);\r\n            },\r\n            dispatch: /**\r\n             * @param {?} actions\r\n             * @return {?}\r\n             */\r\n            function (actions) {\r\n                return root.dispatch(actions);\r\n            }\r\n        };\r\n    };\r\n    StateContextFactory.decorators = [\r\n        { type: Injectable }\r\n    ];\r\n    /** @nocollapse */\r\n    StateContextFactory.ctorParameters = function () { return [\r\n        { type: InternalStateOperations }\r\n    ]; };\r\n    return StateContextFactory;\r\n}());\r\nif (false) {\r\n    /**\r\n     * @type {?}\r\n     * @private\r\n     */\r\n    StateContextFactory.prototype._internalStateOperations;\r\n}\n\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\n/**\r\n * @abstract\r\n */\r\nvar StoreValidators = /** @class */ (function () {\r\n    function StoreValidators() {\r\n    }\r\n    /**\r\n     * @param {?} name\r\n     * @return {?}\r\n     */\r\n    StoreValidators.stateNameErrorMessage = /**\r\n     * @param {?} name\r\n     * @return {?}\r\n     */\r\n    function (name) {\r\n        return CONFIG_MESSAGES[VALIDATION_CODE.STATE_NAME](name);\r\n    };\r\n    /**\r\n     * @param {?} name\r\n     * @return {?}\r\n     */\r\n    StoreValidators.checkCorrectStateName = /**\r\n     * @param {?} name\r\n     * @return {?}\r\n     */\r\n    function (name) {\r\n        if (!name) {\r\n            throw new Error(CONFIG_MESSAGES[VALIDATION_CODE.STATE_NAME_PROPERTY]());\r\n        }\r\n        if (!this.stateNameRegex.test(name)) {\r\n            throw new Error(this.stateNameErrorMessage(name));\r\n        }\r\n    };\r\n    /**\r\n     * @param {?} state\r\n     * @param {?} statesByName\r\n     * @return {?}\r\n     */\r\n    StoreValidators.checkStateNameIsUnique = /**\r\n     * @param {?} state\r\n     * @param {?} statesByName\r\n     * @return {?}\r\n     */\r\n    function (state, statesByName) {\r\n        /** @type {?} */\r\n        var meta = this.getValidStateMeta(state);\r\n        /** @type {?} */\r\n        var stateName = (/** @type {?} */ ((/** @type {?} */ (meta)).name));\r\n        /** @type {?} */\r\n        var existingState = statesByName[stateName];\r\n        if (existingState && existingState !== state) {\r\n            throw new Error(CONFIG_MESSAGES[VALIDATION_CODE.STATE_UNIQUE](stateName, state.name, existingState.name));\r\n        }\r\n        return stateName;\r\n    };\r\n    /**\r\n     * @param {?} state\r\n     * @return {?}\r\n     */\r\n    StoreValidators.getValidStateMeta = /**\r\n     * @param {?} state\r\n     * @return {?}\r\n     */\r\n    function (state) {\r\n        /** @type {?} */\r\n        var meta = getStoreMetadata(state);\r\n        if (!meta) {\r\n            throw new Error(CONFIG_MESSAGES[VALIDATION_CODE.STATE_DECORATOR]());\r\n        }\r\n        return meta;\r\n    };\r\n    StoreValidators.stateNameRegex = new RegExp('^[a-zA-Z0-9_]+$');\r\n    return StoreValidators;\r\n}());\r\nif (false) {\r\n    /** @type {?} */\r\n    StoreValidators.stateNameRegex;\r\n}\n\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\n/**\r\n * State factory class\r\n * @ignore\r\n */\r\nvar StateFactory = /** @class */ (function () {\r\n    function StateFactory(_injector, _config, _parentFactory, _actions, _actionResults, _stateContextFactory, _initialState) {\r\n        var _this = this;\r\n        this._injector = _injector;\r\n        this._config = _config;\r\n        this._parentFactory = _parentFactory;\r\n        this._actions = _actions;\r\n        this._actionResults = _actionResults;\r\n        this._stateContextFactory = _stateContextFactory;\r\n        this._initialState = _initialState;\r\n        this._connected = false;\r\n        this._states = [];\r\n        this._statesByName = {};\r\n        this._statePaths = {};\r\n        this.getRuntimeSelectorContext = memoize((/**\r\n         * @return {?}\r\n         */\r\n        function () {\r\n            /** @type {?} */\r\n            var stateFactory = _this;\r\n            /** @type {?} */\r\n            var context = _this._parentFactory\r\n                ? _this._parentFactory.getRuntimeSelectorContext()\r\n                : {\r\n                    getStateGetter: /**\r\n                     * @param {?} key\r\n                     * @return {?}\r\n                     */\r\n                    function (key) {\r\n                        /** @type {?} */\r\n                        var path = stateFactory.statePaths[key];\r\n                        return path ? propGetter(path.split('.'), stateFactory._config) : (/**\r\n                         * @return {?}\r\n                         */\r\n                        function () { return undefined; });\r\n                    },\r\n                    getSelectorOptions: /**\r\n                     * @param {?=} localOptions\r\n                     * @return {?}\r\n                     */\r\n                    function (localOptions) {\r\n                        /** @type {?} */\r\n                        var globalSelectorOptions = stateFactory._config.selectorOptions;\r\n                        return __assign({}, globalSelectorOptions, (localOptions || {}));\r\n                    }\r\n                };\r\n            return context;\r\n        }));\r\n    }\r\n    Object.defineProperty(StateFactory.prototype, \"states\", {\r\n        get: /**\r\n         * @return {?}\r\n         */\r\n        function () {\r\n            return this._parentFactory ? this._parentFactory.states : this._states;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(StateFactory.prototype, \"statesByName\", {\r\n        get: /**\r\n         * @return {?}\r\n         */\r\n        function () {\r\n            return this._parentFactory ? this._parentFactory.statesByName : this._statesByName;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(StateFactory.prototype, \"statePaths\", {\r\n        get: /**\r\n         * @private\r\n         * @return {?}\r\n         */\r\n        function () {\r\n            return this._parentFactory ? this._parentFactory.statePaths : this._statePaths;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * @private\r\n     * @param {?} defaults\r\n     * @return {?}\r\n     */\r\n    StateFactory.cloneDefaults = /**\r\n     * @private\r\n     * @param {?} defaults\r\n     * @return {?}\r\n     */\r\n    function (defaults) {\r\n        /** @type {?} */\r\n        var value = {};\r\n        if (Array.isArray(defaults)) {\r\n            value = defaults.slice();\r\n        }\r\n        else if (isObject(defaults)) {\r\n            value = __assign({}, defaults);\r\n        }\r\n        else if (defaults === undefined) {\r\n            value = {};\r\n        }\r\n        else {\r\n            value = defaults;\r\n        }\r\n        return value;\r\n    };\r\n    /**\r\n     * @private\r\n     * @param {?} stateClasses\r\n     * @return {?}\r\n     */\r\n    StateFactory.checkStatesAreValid = /**\r\n     * @private\r\n     * @param {?} stateClasses\r\n     * @return {?}\r\n     */\r\n    function (stateClasses) {\r\n        stateClasses.forEach(StoreValidators.getValidStateMeta);\r\n    };\r\n    /**\r\n     * Add a new state to the global defs.\r\n     */\r\n    /**\r\n     * Add a new state to the global defs.\r\n     * @param {?} stateClasses\r\n     * @return {?}\r\n     */\r\n    StateFactory.prototype.add = /**\r\n     * Add a new state to the global defs.\r\n     * @param {?} stateClasses\r\n     * @return {?}\r\n     */\r\n    function (stateClasses) {\r\n        var e_1, _a;\r\n        StateFactory.checkStatesAreValid(stateClasses);\r\n        var newStates = this.addToStatesMap(stateClasses).newStates;\r\n        if (!newStates.length)\r\n            return [];\r\n        /** @type {?} */\r\n        var stateGraph = buildGraph(newStates);\r\n        /** @type {?} */\r\n        var sortedStates = topologicalSort(stateGraph);\r\n        /** @type {?} */\r\n        var paths = findFullParentPath(stateGraph);\r\n        /** @type {?} */\r\n        var nameGraph = nameToState(newStates);\r\n        /** @type {?} */\r\n        var bootstrappedStores = [];\r\n        try {\r\n            for (var sortedStates_1 = __values(sortedStates), sortedStates_1_1 = sortedStates_1.next(); !sortedStates_1_1.done; sortedStates_1_1 = sortedStates_1.next()) {\r\n                var name_1 = sortedStates_1_1.value;\r\n                /** @type {?} */\r\n                var stateClass = nameGraph[name_1];\r\n                /** @type {?} */\r\n                var path = paths[name_1];\r\n                /** @type {?} */\r\n                var meta = (/** @type {?} */ (stateClass[META_KEY]));\r\n                this.addRuntimeInfoToMeta(meta, path);\r\n                /** @type {?} */\r\n                var stateMap = {\r\n                    name: name_1,\r\n                    path: path,\r\n                    isInitialised: false,\r\n                    actions: meta.actions,\r\n                    instance: this._injector.get(stateClass),\r\n                    defaults: StateFactory.cloneDefaults(meta.defaults)\r\n                };\r\n                // ensure our store hasn't already been added\r\n                // but don't throw since it could be lazy\r\n                // loaded from different paths\r\n                if (!this.hasBeenMountedAndBootstrapped(name_1, path)) {\r\n                    bootstrappedStores.push(stateMap);\r\n                }\r\n                this.states.push(stateMap);\r\n            }\r\n        }\r\n        catch (e_1_1) { e_1 = { error: e_1_1 }; }\r\n        finally {\r\n            try {\r\n                if (sortedStates_1_1 && !sortedStates_1_1.done && (_a = sortedStates_1.return)) _a.call(sortedStates_1);\r\n            }\r\n            finally { if (e_1) throw e_1.error; }\r\n        }\r\n        return bootstrappedStores;\r\n    };\r\n    /**\r\n     * Add a set of states to the store and return the defaults\r\n     */\r\n    /**\r\n     * Add a set of states to the store and return the defaults\r\n     * @param {?} stateClasses\r\n     * @return {?}\r\n     */\r\n    StateFactory.prototype.addAndReturnDefaults = /**\r\n     * Add a set of states to the store and return the defaults\r\n     * @param {?} stateClasses\r\n     * @return {?}\r\n     */\r\n    function (stateClasses) {\r\n        /** @type {?} */\r\n        var classes = stateClasses || [];\r\n        /** @type {?} */\r\n        var mappedStores = this.add(classes);\r\n        /** @type {?} */\r\n        var defaults = mappedStores.reduce((/**\r\n         * @param {?} result\r\n         * @param {?} mappedStore\r\n         * @return {?}\r\n         */\r\n        function (result, mappedStore) {\r\n            return setValue(result, mappedStore.path, mappedStore.defaults);\r\n        }), {});\r\n        return { defaults: defaults, states: mappedStores };\r\n    };\r\n    /**\r\n     * Bind the actions to the handlers\r\n     */\r\n    /**\r\n     * Bind the actions to the handlers\r\n     * @return {?}\r\n     */\r\n    StateFactory.prototype.connectActionHandlers = /**\r\n     * Bind the actions to the handlers\r\n     * @return {?}\r\n     */\r\n    function () {\r\n        var _this = this;\r\n        if (this._connected)\r\n            return;\r\n        this._actions\r\n            .pipe(filter((/**\r\n         * @param {?} ctx\r\n         * @return {?}\r\n         */\r\n        function (ctx) { return ctx.status === \"DISPATCHED\" /* Dispatched */; })), mergeMap((/**\r\n         * @param {?} __0\r\n         * @return {?}\r\n         */\r\n        function (_a) {\r\n            var action = _a.action;\r\n            return _this.invokeActions(_this._actions, (/** @type {?} */ (action))).pipe(map((/**\r\n             * @return {?}\r\n             */\r\n            function () { return (/** @type {?} */ ({ action: action, status: \"SUCCESSFUL\" /* Successful */ })); })), defaultIfEmpty((/** @type {?} */ ({ action: action, status: \"CANCELED\" /* Canceled */ }))), catchError((/**\r\n             * @param {?} error\r\n             * @return {?}\r\n             */\r\n            function (error) {\r\n                return of((/** @type {?} */ ({ action: action, status: \"ERRORED\" /* Errored */, error: error })));\r\n            })));\r\n        })))\r\n            .subscribe((/**\r\n         * @param {?} ctx\r\n         * @return {?}\r\n         */\r\n        function (ctx) { return _this._actionResults.next(ctx); }));\r\n        this._connected = true;\r\n    };\r\n    /**\r\n     * Invoke actions on the states.\r\n     */\r\n    /**\r\n     * Invoke actions on the states.\r\n     * @param {?} actions$\r\n     * @param {?} action\r\n     * @return {?}\r\n     */\r\n    StateFactory.prototype.invokeActions = /**\r\n     * Invoke actions on the states.\r\n     * @param {?} actions$\r\n     * @param {?} action\r\n     * @return {?}\r\n     */\r\n    function (actions$, action) {\r\n        var e_2, _a, e_3, _b;\r\n        /** @type {?} */\r\n        var results = [];\r\n        try {\r\n            for (var _c = __values(this.states), _d = _c.next(); !_d.done; _d = _c.next()) {\r\n                var metadata = _d.value;\r\n                /** @type {?} */\r\n                var type = (/** @type {?} */ (getActionTypeFromInstance(action)));\r\n                /** @type {?} */\r\n                var actionMetas = metadata.actions[type];\r\n                if (actionMetas) {\r\n                    try {\r\n                        for (var actionMetas_1 = __values(actionMetas), actionMetas_1_1 = actionMetas_1.next(); !actionMetas_1_1.done; actionMetas_1_1 = actionMetas_1.next()) {\r\n                            var actionMeta = actionMetas_1_1.value;\r\n                            /** @type {?} */\r\n                            var stateContext = this._stateContextFactory.createStateContext(metadata);\r\n                            try {\r\n                                /** @type {?} */\r\n                                var result = metadata.instance[actionMeta.fn](stateContext, action);\r\n                                if (result instanceof Promise) {\r\n                                    result = from(result);\r\n                                }\r\n                                if (result instanceof Observable) {\r\n                                    if (actionMeta.options.cancelUncompleted) {\r\n                                        // todo: ofActionDispatched should be used with action class\r\n                                        result = result.pipe(takeUntil(actions$.pipe(ofActionDispatched((/** @type {?} */ (action))))));\r\n                                    }\r\n                                }\r\n                                else {\r\n                                    result = of({}).pipe(shareReplay());\r\n                                }\r\n                                results.push(result);\r\n                            }\r\n                            catch (e) {\r\n                                results.push(throwError(e));\r\n                            }\r\n                        }\r\n                    }\r\n                    catch (e_3_1) { e_3 = { error: e_3_1 }; }\r\n                    finally {\r\n                        try {\r\n                            if (actionMetas_1_1 && !actionMetas_1_1.done && (_b = actionMetas_1.return)) _b.call(actionMetas_1);\r\n                        }\r\n                        finally { if (e_3) throw e_3.error; }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        catch (e_2_1) { e_2 = { error: e_2_1 }; }\r\n        finally {\r\n            try {\r\n                if (_d && !_d.done && (_a = _c.return)) _a.call(_c);\r\n            }\r\n            finally { if (e_2) throw e_2.error; }\r\n        }\r\n        if (!results.length) {\r\n            results.push(of({}));\r\n        }\r\n        return forkJoin(results);\r\n    };\r\n    /**\r\n     * @private\r\n     * @param {?} stateClasses\r\n     * @return {?}\r\n     */\r\n    StateFactory.prototype.addToStatesMap = /**\r\n     * @private\r\n     * @param {?} stateClasses\r\n     * @return {?}\r\n     */\r\n    function (stateClasses) {\r\n        var e_4, _a;\r\n        /** @type {?} */\r\n        var newStates = [];\r\n        /** @type {?} */\r\n        var statesMap = this.statesByName;\r\n        try {\r\n            for (var stateClasses_1 = __values(stateClasses), stateClasses_1_1 = stateClasses_1.next(); !stateClasses_1_1.done; stateClasses_1_1 = stateClasses_1.next()) {\r\n                var stateClass = stateClasses_1_1.value;\r\n                /** @type {?} */\r\n                var stateName = StoreValidators.checkStateNameIsUnique(stateClass, statesMap);\r\n                /** @type {?} */\r\n                var unmountedState = !statesMap[stateName];\r\n                if (unmountedState) {\r\n                    newStates.push(stateClass);\r\n                    statesMap[stateName] = stateClass;\r\n                }\r\n            }\r\n        }\r\n        catch (e_4_1) { e_4 = { error: e_4_1 }; }\r\n        finally {\r\n            try {\r\n                if (stateClasses_1_1 && !stateClasses_1_1.done && (_a = stateClasses_1.return)) _a.call(stateClasses_1);\r\n            }\r\n            finally { if (e_4) throw e_4.error; }\r\n        }\r\n        return { newStates: newStates };\r\n    };\r\n    /**\r\n     * @private\r\n     * @param {?} meta\r\n     * @param {?} path\r\n     * @return {?}\r\n     */\r\n    StateFactory.prototype.addRuntimeInfoToMeta = /**\r\n     * @private\r\n     * @param {?} meta\r\n     * @param {?} path\r\n     * @return {?}\r\n     */\r\n    function (meta, path) {\r\n        this.statePaths[(/** @type {?} */ (meta.name))] = path;\r\n        // TODO: v4 - we plan to get rid of the path property because it is non-deterministic\r\n        // we can do this when we get rid of the incorrectly exposed getStoreMetadata\r\n        // We will need to come up with an alternative in v4 because this is used by many plugins\r\n        meta.path = path;\r\n    };\r\n    /**\r\n     * @description\r\n     * the method checks if the state has already been added to the tree\r\n     * and completed the life cycle\r\n     * @param name\r\n     * @param path\r\n     */\r\n    /**\r\n     * \\@description\r\n     * the method checks if the state has already been added to the tree\r\n     * and completed the life cycle\r\n     * @private\r\n     * @param {?} name\r\n     * @param {?} path\r\n     * @return {?}\r\n     */\r\n    StateFactory.prototype.hasBeenMountedAndBootstrapped = /**\r\n     * \\@description\r\n     * the method checks if the state has already been added to the tree\r\n     * and completed the life cycle\r\n     * @private\r\n     * @param {?} name\r\n     * @param {?} path\r\n     * @return {?}\r\n     */\r\n    function (name, path) {\r\n        /** @type {?} */\r\n        var valueIsBootstrappedInInitialState = getValue(this._initialState, path) !== undefined;\r\n        return this.statesByName[name] && valueIsBootstrappedInInitialState;\r\n    };\r\n    StateFactory.decorators = [\r\n        { type: Injectable }\r\n    ];\r\n    /** @nocollapse */\r\n    StateFactory.ctorParameters = function () { return [\r\n        { type: Injector },\r\n        { type: NgxsConfig },\r\n        { type: StateFactory, decorators: [{ type: Optional }, { type: SkipSelf }] },\r\n        { type: InternalActions },\r\n        { type: InternalDispatchedActionResults },\r\n        { type: StateContextFactory },\r\n        { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [INITIAL_STATE_TOKEN,] }] }\r\n    ]; };\r\n    return StateFactory;\r\n}());\r\nif (false) {\r\n    /**\r\n     * @type {?}\r\n     * @private\r\n     */\r\n    StateFactory.prototype._connected;\r\n    /**\r\n     * @type {?}\r\n     * @private\r\n     */\r\n    StateFactory.prototype._states;\r\n    /**\r\n     * @type {?}\r\n     * @private\r\n     */\r\n    StateFactory.prototype._statesByName;\r\n    /**\r\n     * @type {?}\r\n     * @private\r\n     */\r\n    StateFactory.prototype._statePaths;\r\n    /** @type {?} */\r\n    StateFactory.prototype.getRuntimeSelectorContext;\r\n    /**\r\n     * @type {?}\r\n     * @private\r\n     */\r\n    StateFactory.prototype._injector;\r\n    /**\r\n     * @type {?}\r\n     * @private\r\n     */\r\n    StateFactory.prototype._config;\r\n    /**\r\n     * @type {?}\r\n     * @private\r\n     */\r\n    StateFactory.prototype._parentFactory;\r\n    /**\r\n     * @type {?}\r\n     * @private\r\n     */\r\n    StateFactory.prototype._actions;\r\n    /**\r\n     * @type {?}\r\n     * @private\r\n     */\r\n    StateFactory.prototype._actionResults;\r\n    /**\r\n     * @type {?}\r\n     * @private\r\n     */\r\n    StateFactory.prototype._stateContextFactory;\r\n    /**\r\n     * @type {?}\r\n     * @private\r\n     */\r\n    StateFactory.prototype._initialState;\r\n}\n\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\nvar LifecycleStateManager = /** @class */ (function () {\r\n    function LifecycleStateManager(internalStateOperations, stateContextFactory, bootstrapper) {\r\n        this.internalStateOperations = internalStateOperations;\r\n        this.stateContextFactory = stateContextFactory;\r\n        this.bootstrapper = bootstrapper;\r\n    }\r\n    /**\r\n     * @template T\r\n     * @param {?} action\r\n     * @param {?} results\r\n     * @return {?}\r\n     */\r\n    LifecycleStateManager.prototype.ngxsBootstrap = /**\r\n     * @template T\r\n     * @param {?} action\r\n     * @param {?} results\r\n     * @return {?}\r\n     */\r\n    function (action, results) {\r\n        var _this = this;\r\n        this.internalStateOperations\r\n            .getRootStateOperations()\r\n            .dispatch(action)\r\n            .pipe(filter((/**\r\n         * @return {?}\r\n         */\r\n        function () { return !!results; })), tap((/**\r\n         * @return {?}\r\n         */\r\n        function () { return _this.invokeInit((/** @type {?} */ (results)).states); })), mergeMap((/**\r\n         * @return {?}\r\n         */\r\n        function () { return _this.bootstrapper.appBootstrapped$; })), filter((/**\r\n         * @param {?} appBootstrapped\r\n         * @return {?}\r\n         */\r\n        function (appBootstrapped) { return !!appBootstrapped; })))\r\n            .subscribe((/**\r\n         * @return {?}\r\n         */\r\n        function () { return _this.invokeBootstrap((/** @type {?} */ (results)).states); }));\r\n    };\r\n    /**\r\n     * Invoke the init function on the states.\r\n     */\r\n    /**\r\n     * Invoke the init function on the states.\r\n     * @param {?} mappedStores\r\n     * @return {?}\r\n     */\r\n    LifecycleStateManager.prototype.invokeInit = /**\r\n     * Invoke the init function on the states.\r\n     * @param {?} mappedStores\r\n     * @return {?}\r\n     */\r\n    function (mappedStores) {\r\n        var e_1, _a;\r\n        try {\r\n            for (var mappedStores_1 = __values(mappedStores), mappedStores_1_1 = mappedStores_1.next(); !mappedStores_1_1.done; mappedStores_1_1 = mappedStores_1.next()) {\r\n                var mappedStore = mappedStores_1_1.value;\r\n                /** @type {?} */\r\n                var instance = mappedStore.instance;\r\n                if (instance.ngxsOnChanges) {\r\n                    /** @type {?} */\r\n                    var currentAppState = {};\r\n                    /** @type {?} */\r\n                    var newAppState = this.internalStateOperations\r\n                        .getRootStateOperations()\r\n                        .getState();\r\n                    /** @type {?} */\r\n                    var firstDiffChange = getStateDiffChanges(mappedStore, {\r\n                        currentAppState: currentAppState,\r\n                        newAppState: newAppState\r\n                    });\r\n                    instance.ngxsOnChanges(firstDiffChange);\r\n                }\r\n                if (instance.ngxsOnInit) {\r\n                    instance.ngxsOnInit(this.getStateContext(mappedStore));\r\n                }\r\n                mappedStore.isInitialised = true;\r\n            }\r\n        }\r\n        catch (e_1_1) { e_1 = { error: e_1_1 }; }\r\n        finally {\r\n            try {\r\n                if (mappedStores_1_1 && !mappedStores_1_1.done && (_a = mappedStores_1.return)) _a.call(mappedStores_1);\r\n            }\r\n            finally { if (e_1) throw e_1.error; }\r\n        }\r\n    };\r\n    /**\r\n     * Invoke the bootstrap function on the states.\r\n     */\r\n    /**\r\n     * Invoke the bootstrap function on the states.\r\n     * @param {?} mappedStores\r\n     * @return {?}\r\n     */\r\n    LifecycleStateManager.prototype.invokeBootstrap = /**\r\n     * Invoke the bootstrap function on the states.\r\n     * @param {?} mappedStores\r\n     * @return {?}\r\n     */\r\n    function (mappedStores) {\r\n        var e_2, _a;\r\n        try {\r\n            for (var mappedStores_2 = __values(mappedStores), mappedStores_2_1 = mappedStores_2.next(); !mappedStores_2_1.done; mappedStores_2_1 = mappedStores_2.next()) {\r\n                var mappedStore = mappedStores_2_1.value;\r\n                /** @type {?} */\r\n                var instance = mappedStore.instance;\r\n                if (instance.ngxsAfterBootstrap) {\r\n                    instance.ngxsAfterBootstrap(this.getStateContext(mappedStore));\r\n                }\r\n            }\r\n        }\r\n        catch (e_2_1) { e_2 = { error: e_2_1 }; }\r\n        finally {\r\n            try {\r\n                if (mappedStores_2_1 && !mappedStores_2_1.done && (_a = mappedStores_2.return)) _a.call(mappedStores_2);\r\n            }\r\n            finally { if (e_2) throw e_2.error; }\r\n        }\r\n    };\r\n    /**\r\n     * @private\r\n     * @param {?} mappedStore\r\n     * @return {?}\r\n     */\r\n    LifecycleStateManager.prototype.getStateContext = /**\r\n     * @private\r\n     * @param {?} mappedStore\r\n     * @return {?}\r\n     */\r\n    function (mappedStore) {\r\n        return this.stateContextFactory.createStateContext(mappedStore);\r\n    };\r\n    LifecycleStateManager.decorators = [\r\n        { type: Injectable }\r\n    ];\r\n    /** @nocollapse */\r\n    LifecycleStateManager.ctorParameters = function () { return [\r\n        { type: InternalStateOperations },\r\n        { type: StateContextFactory },\r\n        { type: NgxsBootstrapper }\r\n    ]; };\r\n    return LifecycleStateManager;\r\n}());\r\nif (false) {\r\n    /**\r\n     * @type {?}\r\n     * @private\r\n     */\r\n    LifecycleStateManager.prototype.internalStateOperations;\r\n    /**\r\n     * @type {?}\r\n     * @private\r\n     */\r\n    LifecycleStateManager.prototype.stateContextFactory;\r\n    /**\r\n     * @type {?}\r\n     * @private\r\n     */\r\n    LifecycleStateManager.prototype.bootstrapper;\r\n}\n\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\n/** @type {?} */\r\nvar SELECTOR_OPTIONS_META_KEY = 'NGXS_SELECTOR_OPTIONS_META';\r\n/** @type {?} */\r\nvar selectorOptionsMetaAccessor = {\r\n    getOptions: (/**\r\n     * @param {?} target\r\n     * @return {?}\r\n     */\r\n    function (target) {\r\n        return (target && ((/** @type {?} */ (target)))[SELECTOR_OPTIONS_META_KEY]) || {};\r\n    }),\r\n    defineOptions: (/**\r\n     * @param {?} target\r\n     * @param {?} options\r\n     * @return {?}\r\n     */\r\n    function (target, options) {\r\n        if (!target)\r\n            return;\r\n        ((/** @type {?} */ (target)))[SELECTOR_OPTIONS_META_KEY] = options;\r\n    })\r\n};\r\n/**\r\n * @record\r\n */\r\nfunction CreationMetadata() { }\r\nif (false) {\r\n    /** @type {?} */\r\n    CreationMetadata.prototype.containerClass;\r\n    /** @type {?} */\r\n    CreationMetadata.prototype.selectorName;\r\n    /** @type {?|undefined} */\r\n    CreationMetadata.prototype.getSelectorOptions;\r\n}\r\n/**\r\n * @record\r\n */\r\nfunction RuntimeSelectorInfo() { }\r\nif (false) {\r\n    /** @type {?} */\r\n    RuntimeSelectorInfo.prototype.selectorOptions;\r\n    /** @type {?} */\r\n    RuntimeSelectorInfo.prototype.argumentSelectorFunctions;\r\n}\r\n/**\r\n * Function for creating a selector\r\n * @template T\r\n * @param {?} selectors The selectors to use to create the arguments of this function\r\n * @param {?} originalFn The original function being made into a selector\r\n * @param {?=} creationMetadata\r\n * @return {?}\r\n */\r\nfunction createSelector(selectors, originalFn, creationMetadata) {\r\n    /** @type {?} */\r\n    var containerClass = creationMetadata && creationMetadata.containerClass;\r\n    /** @type {?} */\r\n    var wrappedFn = (/** @type {?} */ ((/**\r\n     * @param {...?} args\r\n     * @return {?}\r\n     */\r\n    function wrappedSelectorFn() {\r\n        var args = [];\r\n        for (var _i = 0; _i < arguments.length; _i++) {\r\n            args[_i] = arguments[_i];\r\n        }\r\n        /** @type {?} */\r\n        var returnValue = originalFn.apply(containerClass, args);\r\n        if (returnValue instanceof Function) {\r\n            /** @type {?} */\r\n            var innerMemoizedFn = memoize.apply(null, [returnValue]);\r\n            return innerMemoizedFn;\r\n        }\r\n        return returnValue;\r\n    })));\r\n    /** @type {?} */\r\n    var memoizedFn = memoize(wrappedFn);\r\n    Object.setPrototypeOf(memoizedFn, originalFn);\r\n    /** @type {?} */\r\n    var selectorMetaData = setupSelectorMetadata(originalFn, creationMetadata);\r\n    /** @type {?} */\r\n    var makeRootSelector = (/**\r\n     * @param {?} context\r\n     * @return {?}\r\n     */\r\n    function (context) {\r\n        var _a = getRuntimeSelectorInfo(context, selectorMetaData, selectors), argumentSelectorFunctions = _a.argumentSelectorFunctions, selectorOptions = _a.selectorOptions;\r\n        return (/**\r\n         * @param {?} rootState\r\n         * @return {?}\r\n         */\r\n        function selectFromRoot(rootState) {\r\n            // Determine arguments from the app state using the selectors\r\n            /** @type {?} */\r\n            var results = argumentSelectorFunctions.map((/**\r\n             * @param {?} argFn\r\n             * @return {?}\r\n             */\r\n            function (argFn) { return argFn(rootState); }));\r\n            // if the lambda tries to access a something on the\r\n            // state that doesn't exist, it will throw a TypeError.\r\n            // since this is quite usual behaviour, we simply return undefined if so.\r\n            try {\r\n                return memoizedFn.apply(void 0, __spread(results));\r\n            }\r\n            catch (ex) {\r\n                if (ex instanceof TypeError && selectorOptions.suppressErrors) {\r\n                    return undefined;\r\n                }\r\n                throw ex;\r\n            }\r\n        });\r\n    });\r\n    selectorMetaData.makeRootSelector = makeRootSelector;\r\n    return memoizedFn;\r\n}\r\n/**\r\n * @template T\r\n * @param {?} originalFn\r\n * @param {?} creationMetadata\r\n * @return {?}\r\n */\r\nfunction setupSelectorMetadata(originalFn, creationMetadata) {\r\n    /** @type {?} */\r\n    var selectorMetaData = ensureSelectorMetadata(originalFn);\r\n    selectorMetaData.originalFn = originalFn;\r\n    /** @type {?} */\r\n    var getExplicitSelectorOptions = (/**\r\n     * @return {?}\r\n     */\r\n    function () { return ({}); });\r\n    if (creationMetadata) {\r\n        selectorMetaData.containerClass = creationMetadata.containerClass;\r\n        selectorMetaData.selectorName = creationMetadata.selectorName;\r\n        getExplicitSelectorOptions =\r\n            creationMetadata.getSelectorOptions || getExplicitSelectorOptions;\r\n    }\r\n    /** @type {?} */\r\n    var selectorMetaDataClone = __assign({}, selectorMetaData);\r\n    selectorMetaData.getSelectorOptions = (/**\r\n     * @return {?}\r\n     */\r\n    function () {\r\n        return getLocalSelectorOptions(selectorMetaDataClone, getExplicitSelectorOptions());\r\n    });\r\n    return selectorMetaData;\r\n}\r\n/**\r\n * @param {?} context\r\n * @param {?} selectorMetaData\r\n * @param {?=} selectors\r\n * @return {?}\r\n */\r\nfunction getRuntimeSelectorInfo(context, selectorMetaData, selectors) {\r\n    if (selectors === void 0) { selectors = []; }\r\n    /** @type {?} */\r\n    var localSelectorOptions = selectorMetaData.getSelectorOptions();\r\n    /** @type {?} */\r\n    var selectorOptions = context.getSelectorOptions(localSelectorOptions);\r\n    /** @type {?} */\r\n    var selectorsToApply = getSelectorsToApply(selectors, selectorOptions, selectorMetaData.containerClass);\r\n    /** @type {?} */\r\n    var argumentSelectorFunctions = selectorsToApply.map((/**\r\n     * @param {?} selector\r\n     * @return {?}\r\n     */\r\n    function (selector) {\r\n        /** @type {?} */\r\n        var factory = getRootSelectorFactory(selector);\r\n        return factory(context);\r\n    }));\r\n    return {\r\n        selectorOptions: selectorOptions,\r\n        argumentSelectorFunctions: argumentSelectorFunctions\r\n    };\r\n}\r\n/**\r\n * @param {?} selectorMetaData\r\n * @param {?} explicitOptions\r\n * @return {?}\r\n */\r\nfunction getLocalSelectorOptions(selectorMetaData, explicitOptions) {\r\n    return __assign({}, (selectorOptionsMetaAccessor.getOptions(selectorMetaData.containerClass) || {}), (selectorOptionsMetaAccessor.getOptions(selectorMetaData.originalFn) || {}), (selectorMetaData.getSelectorOptions() || {}), explicitOptions);\r\n}\r\n/**\r\n * @param {?=} selectors\r\n * @param {?=} selectorOptions\r\n * @param {?=} containerClass\r\n * @return {?}\r\n */\r\nfunction getSelectorsToApply(selectors, selectorOptions, containerClass) {\r\n    if (selectors === void 0) { selectors = []; }\r\n    /** @type {?} */\r\n    var selectorsToApply = [];\r\n    /** @type {?} */\r\n    var canInjectContainerState = selectors.length === 0 || selectorOptions.injectContainerState;\r\n    if (containerClass && canInjectContainerState) {\r\n        // If we are on a state class, add it as the first selector parameter\r\n        /** @type {?} */\r\n        var metadata = getStoreMetadata(containerClass);\r\n        if (metadata) {\r\n            selectorsToApply.push(containerClass);\r\n        }\r\n    }\r\n    if (selectors) {\r\n        selectorsToApply.push.apply(selectorsToApply, __spread(selectors));\r\n    }\r\n    return selectorsToApply;\r\n}\r\n/**\r\n * This function gets the factory function to create the selector to get the selected slice from the app state\r\n * @ignore\r\n * @param {?} selector\r\n * @return {?}\r\n */\r\nfunction getRootSelectorFactory(selector) {\r\n    /** @type {?} */\r\n    var metadata = getSelectorMetadata(selector) || getStoreMetadata(selector);\r\n    return (metadata && metadata.makeRootSelector) || ((/**\r\n     * @return {?}\r\n     */\r\n    function () { return selector; }));\r\n}\n\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\nvar Store = /** @class */ (function () {\r\n    function Store(_stateStream, _internalStateOperations, _config, _internalExecutionStrategy, _stateFactory, initialStateValue) {\r\n        this._stateStream = _stateStream;\r\n        this._internalStateOperations = _internalStateOperations;\r\n        this._config = _config;\r\n        this._internalExecutionStrategy = _internalExecutionStrategy;\r\n        this._stateFactory = _stateFactory;\r\n        this.initStateStream(initialStateValue);\r\n    }\r\n    /**\r\n     * Dispatches event(s).\r\n     */\r\n    /**\r\n     * Dispatches event(s).\r\n     * @param {?} event\r\n     * @return {?}\r\n     */\r\n    Store.prototype.dispatch = /**\r\n     * Dispatches event(s).\r\n     * @param {?} event\r\n     * @return {?}\r\n     */\r\n    function (event) {\r\n        return this._internalStateOperations.getRootStateOperations().dispatch(event);\r\n    };\r\n    /**\r\n     * @param {?} selector\r\n     * @return {?}\r\n     */\r\n    Store.prototype.select = /**\r\n     * @param {?} selector\r\n     * @return {?}\r\n     */\r\n    function (selector) {\r\n        var _this = this;\r\n        /** @type {?} */\r\n        var selectorFn = this.getStoreBoundSelectorFn(selector);\r\n        return this._stateStream.pipe(map(selectorFn), catchError((/**\r\n         * @param {?} err\r\n         * @return {?}\r\n         */\r\n        function (err) {\r\n            // if error is TypeError we swallow it to prevent usual errors with property access\r\n            var suppressErrors = _this._config.selectorOptions.suppressErrors;\r\n            if (err instanceof TypeError && suppressErrors) {\r\n                return of(undefined);\r\n            }\r\n            // rethrow other errors\r\n            return throwError(err);\r\n        })), distinctUntilChanged(), leaveNgxs(this._internalExecutionStrategy));\r\n    };\r\n    /**\r\n     * @param {?} selector\r\n     * @return {?}\r\n     */\r\n    Store.prototype.selectOnce = /**\r\n     * @param {?} selector\r\n     * @return {?}\r\n     */\r\n    function (selector) {\r\n        return this.select(selector).pipe(take(1));\r\n    };\r\n    /**\r\n     * @param {?} selector\r\n     * @return {?}\r\n     */\r\n    Store.prototype.selectSnapshot = /**\r\n     * @param {?} selector\r\n     * @return {?}\r\n     */\r\n    function (selector) {\r\n        /** @type {?} */\r\n        var selectorFn = this.getStoreBoundSelectorFn(selector);\r\n        return selectorFn(this._stateStream.getValue());\r\n    };\r\n    /**\r\n     * Allow the user to subscribe to the root of the state\r\n     */\r\n    /**\r\n     * Allow the user to subscribe to the root of the state\r\n     * @param {?=} fn\r\n     * @return {?}\r\n     */\r\n    Store.prototype.subscribe = /**\r\n     * Allow the user to subscribe to the root of the state\r\n     * @param {?=} fn\r\n     * @return {?}\r\n     */\r\n    function (fn) {\r\n        return this._stateStream.pipe(leaveNgxs(this._internalExecutionStrategy)).subscribe(fn);\r\n    };\r\n    /**\r\n     * Return the raw value of the state.\r\n     */\r\n    /**\r\n     * Return the raw value of the state.\r\n     * @return {?}\r\n     */\r\n    Store.prototype.snapshot = /**\r\n     * Return the raw value of the state.\r\n     * @return {?}\r\n     */\r\n    function () {\r\n        return this._internalStateOperations.getRootStateOperations().getState();\r\n    };\r\n    /**\r\n     * Reset the state to a specific point in time. This method is useful\r\n     * for plugin's who need to modify the state directly or unit testing.\r\n     */\r\n    /**\r\n     * Reset the state to a specific point in time. This method is useful\r\n     * for plugin's who need to modify the state directly or unit testing.\r\n     * @param {?} state\r\n     * @return {?}\r\n     */\r\n    Store.prototype.reset = /**\r\n     * Reset the state to a specific point in time. This method is useful\r\n     * for plugin's who need to modify the state directly or unit testing.\r\n     * @param {?} state\r\n     * @return {?}\r\n     */\r\n    function (state) {\r\n        return this._internalStateOperations.getRootStateOperations().setState(state);\r\n    };\r\n    /**\r\n     * @private\r\n     * @param {?} selector\r\n     * @return {?}\r\n     */\r\n    Store.prototype.getStoreBoundSelectorFn = /**\r\n     * @private\r\n     * @param {?} selector\r\n     * @return {?}\r\n     */\r\n    function (selector) {\r\n        /** @type {?} */\r\n        var makeSelectorFn = getRootSelectorFactory(selector);\r\n        /** @type {?} */\r\n        var runtimeContext = this._stateFactory.getRuntimeSelectorContext();\r\n        return makeSelectorFn(runtimeContext);\r\n    };\r\n    /**\r\n     * @private\r\n     * @param {?} initialStateValue\r\n     * @return {?}\r\n     */\r\n    Store.prototype.initStateStream = /**\r\n     * @private\r\n     * @param {?} initialStateValue\r\n     * @return {?}\r\n     */\r\n    function (initialStateValue) {\r\n        /** @type {?} */\r\n        var value = this._stateStream.value;\r\n        /** @type {?} */\r\n        var storeIsEmpty = !value || Object.keys(value).length === 0;\r\n        if (storeIsEmpty) {\r\n            /** @type {?} */\r\n            var defaultStateNotEmpty = Object.keys(this._config.defaultsState).length > 0;\r\n            /** @type {?} */\r\n            var storeValues = defaultStateNotEmpty\r\n                ? __assign({}, this._config.defaultsState, initialStateValue) : initialStateValue;\r\n            this._stateStream.next(storeValues);\r\n        }\r\n    };\r\n    Store.decorators = [\r\n        { type: Injectable }\r\n    ];\r\n    /** @nocollapse */\r\n    Store.ctorParameters = function () { return [\r\n        { type: StateStream },\r\n        { type: InternalStateOperations },\r\n        { type: NgxsConfig },\r\n        { type: InternalNgxsExecutionStrategy },\r\n        { type: StateFactory },\r\n        { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [INITIAL_STATE_TOKEN,] }] }\r\n    ]; };\r\n    return Store;\r\n}());\r\nif (false) {\r\n    /**\r\n     * @type {?}\r\n     * @private\r\n     */\r\n    Store.prototype._stateStream;\r\n    /**\r\n     * @type {?}\r\n     * @private\r\n     */\r\n    Store.prototype._internalStateOperations;\r\n    /**\r\n     * @type {?}\r\n     * @private\r\n     */\r\n    Store.prototype._config;\r\n    /**\r\n     * @type {?}\r\n     * @private\r\n     */\r\n    Store.prototype._internalExecutionStrategy;\r\n    /**\r\n     * @type {?}\r\n     * @private\r\n     */\r\n    Store.prototype._stateFactory;\r\n}\n\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\n/**\r\n * Allows the select decorator to get access to the DI store.\r\n * \\@internal only use in \\@Select decorator\r\n * @ignore\r\n */\r\nvar SelectFactory = /** @class */ (function () {\r\n    function SelectFactory(store, config) {\r\n        SelectFactory.store = store;\r\n        SelectFactory.config = config;\r\n    }\r\n    SelectFactory.store = null;\r\n    SelectFactory.config = null;\r\n    SelectFactory.decorators = [\r\n        { type: Injectable }\r\n    ];\r\n    /** @nocollapse */\r\n    SelectFactory.ctorParameters = function () { return [\r\n        { type: Store },\r\n        { type: NgxsConfig }\r\n    ]; };\r\n    return SelectFactory;\r\n}());\r\nif (false) {\r\n    /** @type {?} */\r\n    SelectFactory.store;\r\n    /** @type {?} */\r\n    SelectFactory.config;\r\n}\n\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\n/**\r\n * Init action\r\n */\r\nvar  /**\r\n * Init action\r\n */\r\nInitState = /** @class */ (function () {\r\n    function InitState() {\r\n    }\r\n    Object.defineProperty(InitState, \"type\", {\r\n        get: /**\r\n         * @return {?}\r\n         */\r\n        function () {\r\n            // NOTE: Not necessary to declare the type in this way in your code. See https://github.com/ngxs/store/pull/644#issuecomment-436003138\r\n            return '@@INIT';\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    return InitState;\r\n}());\r\n/**\r\n * Update action\r\n */\r\nvar  /**\r\n * Update action\r\n */\r\nUpdateState = /** @class */ (function () {\r\n    function UpdateState(addedStates) {\r\n        this.addedStates = addedStates;\r\n    }\r\n    Object.defineProperty(UpdateState, \"type\", {\r\n        get: /**\r\n         * @return {?}\r\n         */\r\n        function () {\r\n            // NOTE: Not necessary to declare the type in this way in your code. See https://github.com/ngxs/store/pull/644#issuecomment-436003138\r\n            return '@@UPDATE_STATE';\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    return UpdateState;\r\n}());\r\nif (false) {\r\n    /** @type {?} */\r\n    UpdateState.prototype.addedStates;\r\n}\n\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\n/**\r\n * Keep it as a single `const` variable since this `ReplaySubject`\r\n * will be private and accessible only within this file.\r\n * @type {?}\r\n */\r\nvar _ivyEnabledInDevMode$ = new ReplaySubject(1);\r\n/**\r\n * Ivy exposes helper functions to the global `window.ng` object.\r\n * Those functions are `getComponent, getContext,\r\n * getListeners, getViewComponent, getHostElement, getInjector,\r\n * getRootComponents, getDirectives, getDebugNode`\r\n * Previously, old view engine exposed `window.ng.coreTokens` and\r\n * `window.ng.probe` if an application was in development/production.\r\n * Ivy doesn't expose these functions in production. Developers will be able\r\n * to see warnings in both JIT/AOT modes, but only if an application\r\n * is in development.\r\n * @return {?}\r\n */\r\nfunction setIvyEnabledInDevMode() {\r\n    try {\r\n        // `try-catch` will also handle server-side rendering, as\r\n        // `window is not defined` will not be thrown.\r\n        /** @type {?} */\r\n        var ng = ((/** @type {?} */ (window))).ng;\r\n        /** @type {?} */\r\n        var _viewEngineEnabled = !!ng.probe && !!ng.coreTokens;\r\n        /** @type {?} */\r\n        var _ivyEnabledInDevMode = !_viewEngineEnabled && isDevMode();\r\n        _ivyEnabledInDevMode$.next(_ivyEnabledInDevMode);\r\n    }\r\n    catch (_a) {\r\n        _ivyEnabledInDevMode$.next(false);\r\n    }\r\n    finally {\r\n        _ivyEnabledInDevMode$.complete();\r\n    }\r\n}\r\n/**\r\n * @return {?}\r\n */\r\nfunction ivyEnabledInDevMode() {\r\n    return _ivyEnabledInDevMode$.asObservable();\r\n}\n\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\n/**\r\n * Root module\r\n * @ignore\r\n */\r\nvar NgxsRootModule = /** @class */ (function () {\r\n    function NgxsRootModule(factory, internalStateOperations, _store, _select, states, lifecycleStateManager) {\r\n        if (states === void 0) { states = []; }\r\n        // Validate states on having the `@Injectable()` decorator in Ivy\r\n        setIvyEnabledInDevMode();\r\n        // Add stores to the state graph and return their defaults\r\n        /** @type {?} */\r\n        var results = factory.addAndReturnDefaults(states);\r\n        internalStateOperations.setStateToTheCurrentWithNew(results);\r\n        // Connect our actions stream\r\n        factory.connectActionHandlers();\r\n        // Dispatch the init action and invoke init and bootstrap functions after\r\n        lifecycleStateManager.ngxsBootstrap(new InitState(), results);\r\n    }\r\n    NgxsRootModule.decorators = [\r\n        { type: NgModule }\r\n    ];\r\n    /** @nocollapse */\r\n    NgxsRootModule.ctorParameters = function () { return [\r\n        { type: StateFactory },\r\n        { type: InternalStateOperations },\r\n        { type: Store },\r\n        { type: SelectFactory },\r\n        { type: Array, decorators: [{ type: Optional }, { type: Inject, args: [ROOT_STATE_TOKEN,] }] },\r\n        { type: LifecycleStateManager }\r\n    ]; };\r\n    return NgxsRootModule;\r\n}());\n\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\n/**\r\n * Feature module\r\n * @ignore\r\n */\r\nvar NgxsFeatureModule = /** @class */ (function () {\r\n    function NgxsFeatureModule(_store, internalStateOperations, factory, states, lifecycleStateManager) {\r\n        if (states === void 0) { states = []; }\r\n        // Since FEATURE_STATE_TOKEN is a multi token, we need to\r\n        // flatten it [[Feature1State, Feature2State], [Feature3State]]\r\n        /** @type {?} */\r\n        var flattenedStates = NgxsFeatureModule.flattenStates(states);\r\n        // add stores to the state graph and return their defaults\r\n        /** @type {?} */\r\n        var results = factory.addAndReturnDefaults(flattenedStates);\r\n        if (results.states.length) {\r\n            internalStateOperations.setStateToTheCurrentWithNew(results);\r\n            // dispatch the update action and invoke init and bootstrap functions after\r\n            lifecycleStateManager.ngxsBootstrap(new UpdateState(results.defaults), results);\r\n        }\r\n    }\r\n    /**\r\n     * @private\r\n     * @param {?=} states\r\n     * @return {?}\r\n     */\r\n    NgxsFeatureModule.flattenStates = /**\r\n     * @private\r\n     * @param {?=} states\r\n     * @return {?}\r\n     */\r\n    function (states) {\r\n        if (states === void 0) { states = []; }\r\n        return states.reduce((/**\r\n         * @param {?} total\r\n         * @param {?} values\r\n         * @return {?}\r\n         */\r\n        function (total, values) { return total.concat(values); }), []);\r\n    };\r\n    NgxsFeatureModule.decorators = [\r\n        { type: NgModule }\r\n    ];\r\n    /** @nocollapse */\r\n    NgxsFeatureModule.ctorParameters = function () { return [\r\n        { type: Store },\r\n        { type: InternalStateOperations },\r\n        { type: StateFactory },\r\n        { type: Array, decorators: [{ type: Optional }, { type: Inject, args: [FEATURE_STATE_TOKEN,] }] },\r\n        { type: LifecycleStateManager }\r\n    ]; };\r\n    return NgxsFeatureModule;\r\n}());\n\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\n/**\r\n * Ngxs Module\r\n */\r\nvar NgxsModule = /** @class */ (function () {\r\n    function NgxsModule() {\r\n    }\r\n    /**\r\n     * Root module factory\r\n     */\r\n    /**\r\n     * Root module factory\r\n     * @param {?=} states\r\n     * @param {?=} options\r\n     * @return {?}\r\n     */\r\n    NgxsModule.forRoot = /**\r\n     * Root module factory\r\n     * @param {?=} states\r\n     * @param {?=} options\r\n     * @return {?}\r\n     */\r\n    function (states, options) {\r\n        if (states === void 0) { states = []; }\r\n        if (options === void 0) { options = {}; }\r\n        return {\r\n            ngModule: NgxsRootModule,\r\n            providers: __spread([\r\n                StateFactory,\r\n                StateContextFactory,\r\n                Actions,\r\n                InternalActions,\r\n                NgxsBootstrapper,\r\n                ConfigValidator,\r\n                HostEnvironment,\r\n                LifecycleStateManager,\r\n                InternalDispatcher,\r\n                InternalDispatchedActionResults,\r\n                InternalStateOperations,\r\n                InternalNgxsExecutionStrategy,\r\n                Store,\r\n                StateStream,\r\n                SelectFactory,\r\n                PluginManager\r\n            ], states, NgxsModule.ngxsTokenProviders(states, options))\r\n        };\r\n    };\r\n    /**\r\n     * Feature module factory\r\n     */\r\n    /**\r\n     * Feature module factory\r\n     * @param {?=} states\r\n     * @return {?}\r\n     */\r\n    NgxsModule.forFeature = /**\r\n     * Feature module factory\r\n     * @param {?=} states\r\n     * @return {?}\r\n     */\r\n    function (states) {\r\n        if (states === void 0) { states = []; }\r\n        return {\r\n            ngModule: NgxsFeatureModule,\r\n            providers: __spread([\r\n                StateFactory,\r\n                PluginManager\r\n            ], states, [\r\n                {\r\n                    provide: FEATURE_STATE_TOKEN,\r\n                    multi: true,\r\n                    useValue: states\r\n                }\r\n            ])\r\n        };\r\n    };\r\n    /**\r\n     * @private\r\n     * @param {?} states\r\n     * @param {?} options\r\n     * @return {?}\r\n     */\r\n    NgxsModule.ngxsTokenProviders = /**\r\n     * @private\r\n     * @param {?} states\r\n     * @param {?} options\r\n     * @return {?}\r\n     */\r\n    function (states, options) {\r\n        return [\r\n            {\r\n                provide: NG_TEST_MODE,\r\n                useValue: isAngularInTestMode\r\n            },\r\n            {\r\n                provide: NG_DEV_MODE,\r\n                useValue: isDevMode\r\n            },\r\n            {\r\n                provide: NGXS_EXECUTION_STRATEGY,\r\n                useClass: options.executionStrategy || DispatchOutsideZoneNgxsExecutionStrategy\r\n            },\r\n            {\r\n                provide: ROOT_STATE_TOKEN,\r\n                useValue: states\r\n            },\r\n            {\r\n                provide: NgxsModule.ROOT_OPTIONS,\r\n                useValue: options\r\n            },\r\n            {\r\n                provide: NgxsConfig,\r\n                useFactory: NgxsModule.ngxsConfigFactory,\r\n                deps: [NgxsModule.ROOT_OPTIONS]\r\n            },\r\n            {\r\n                provide: APP_BOOTSTRAP_LISTENER,\r\n                useFactory: NgxsModule.appBootstrapListenerFactory,\r\n                multi: true,\r\n                deps: [NgxsBootstrapper]\r\n            },\r\n            {\r\n                provide: INITIAL_STATE_TOKEN,\r\n                useFactory: NgxsModule.getInitialState\r\n            },\r\n            {\r\n                provide: NGXS_STATE_CONTEXT_FACTORY,\r\n                useExisting: StateContextFactory\r\n            },\r\n            {\r\n                provide: NGXS_STATE_FACTORY,\r\n                useExisting: StateFactory\r\n            }\r\n        ];\r\n    };\r\n    /**\r\n     * @private\r\n     * @param {?} options\r\n     * @return {?}\r\n     */\r\n    NgxsModule.ngxsConfigFactory = /**\r\n     * @private\r\n     * @param {?} options\r\n     * @return {?}\r\n     */\r\n    function (options) {\r\n        return Object.assign(new NgxsConfig(), options);\r\n    };\r\n    /**\r\n     * @private\r\n     * @param {?} bootstrapper\r\n     * @return {?}\r\n     */\r\n    NgxsModule.appBootstrapListenerFactory = /**\r\n     * @private\r\n     * @param {?} bootstrapper\r\n     * @return {?}\r\n     */\r\n    function (bootstrapper) {\r\n        return (/**\r\n         * @return {?}\r\n         */\r\n        function () { return bootstrapper.bootstrap(); });\r\n    };\r\n    /**\r\n     * @private\r\n     * @return {?}\r\n     */\r\n    NgxsModule.getInitialState = /**\r\n     * @private\r\n     * @return {?}\r\n     */\r\n    function () {\r\n        return InitialState.pop();\r\n    };\r\n    NgxsModule.ROOT_OPTIONS = new InjectionToken('ROOT_OPTIONS');\r\n    NgxsModule.decorators = [\r\n        { type: NgModule }\r\n    ];\r\n    return NgxsModule;\r\n}());\r\nif (false) {\r\n    /**\r\n     * @type {?}\r\n     * @private\r\n     */\r\n    NgxsModule.ROOT_OPTIONS;\r\n}\n\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\n/**\r\n * Decorates a method with a action information.\r\n * @param {?} actions\r\n * @param {?=} options\r\n * @return {?}\r\n */\r\nfunction Action(actions, options) {\r\n    return (/**\r\n     * @param {?} target\r\n     * @param {?} name\r\n     * @return {?}\r\n     */\r\n    function (target, name) {\r\n        var e_1, _a;\r\n        /** @type {?} */\r\n        var isStaticMethod = target.hasOwnProperty('prototype');\r\n        if (isStaticMethod) {\r\n            throw new Error(CONFIG_MESSAGES[VALIDATION_CODE.ACTION_DECORATOR]());\r\n        }\r\n        /** @type {?} */\r\n        var meta = ensureStoreMetadata(target.constructor);\r\n        if (!Array.isArray(actions)) {\r\n            actions = [actions];\r\n        }\r\n        try {\r\n            for (var actions_1 = __values(actions), actions_1_1 = actions_1.next(); !actions_1_1.done; actions_1_1 = actions_1.next()) {\r\n                var action = actions_1_1.value;\r\n                /** @type {?} */\r\n                var type = action.type;\r\n                if (!meta.actions[type]) {\r\n                    meta.actions[type] = [];\r\n                }\r\n                meta.actions[type].push({\r\n                    fn: name,\r\n                    options: options || {},\r\n                    type: type\r\n                });\r\n            }\r\n        }\r\n        catch (e_1_1) { e_1 = { error: e_1_1 }; }\r\n        finally {\r\n            try {\r\n                if (actions_1_1 && !actions_1_1.done && (_a = actions_1.return)) _a.call(actions_1);\r\n            }\r\n            finally { if (e_1) throw e_1.error; }\r\n        }\r\n    });\r\n}\n\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\n/**\r\n * All provided or injected tokens must have `\\@Injectable` decorator\r\n * (previously, injected tokens without `\\@Injectable` were allowed\r\n * if another decorator was used, e.g. pipes).\r\n * @param {?} target\r\n * @return {?}\r\n */\r\nfunction ensureStateClassIsInjectable(target) {\r\n    // `ɵprov` is a static property added by the NGCC compiler. It always exists in\r\n    // AOT mode because this property is added before runtime. If an application is running in\r\n    // JIT mode then this property can be added by the `@Injectable()` decorator. The `@Injectable()`\r\n    // decorator has to go after the `@State()` decorator, thus we prevent users from unwanted DI errors.\r\n    ivyEnabledInDevMode().subscribe((/**\r\n     * @param {?} _ivyEnabledInDevMode\r\n     * @return {?}\r\n     */\r\n    function (_ivyEnabledInDevMode) {\r\n        if (_ivyEnabledInDevMode) {\r\n            /** @type {?} */\r\n            /** @nocollapse */ var ngInjectableDef = target.ɵprov;\r\n            if (!ngInjectableDef) {\r\n                // Don't warn if Ivy is disabled or `ɵprov` exists on the class\r\n                console.warn(CONFIG_MESSAGES[VALIDATION_CODE.UNDECORATED_STATE_IN_IVY](target.name));\r\n            }\r\n        }\r\n    }));\r\n}\n\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\n/**\r\n * @record\r\n * @template T\r\n */\r\nfunction MutateMetaOptions() { }\r\nif (false) {\r\n    /** @type {?} */\r\n    MutateMetaOptions.prototype.meta;\r\n    /** @type {?} */\r\n    MutateMetaOptions.prototype.inheritedStateClass;\r\n    /** @type {?} */\r\n    MutateMetaOptions.prototype.optionsWithInheritance;\r\n}\r\n/**\r\n * Decorates a class with ngxs state information.\r\n * @template T\r\n * @param {?} options\r\n * @return {?}\r\n */\r\nfunction State(options) {\r\n    /**\r\n     * @param {?} inheritedStateClass\r\n     * @return {?}\r\n     */\r\n    function getStateOptions(inheritedStateClass) {\r\n        /** @type {?} */\r\n        var inheritanceOptions = inheritedStateClass[META_OPTIONS_KEY] || {};\r\n        return (/** @type {?} */ (__assign({}, inheritanceOptions, options)));\r\n    }\r\n    /**\r\n     * @param {?} params\r\n     * @return {?}\r\n     */\r\n    function mutateMetaData(params) {\r\n        var meta = params.meta, inheritedStateClass = params.inheritedStateClass, optionsWithInheritance = params.optionsWithInheritance;\r\n        var children = optionsWithInheritance.children, defaults = optionsWithInheritance.defaults, name = optionsWithInheritance.name;\r\n        /** @type {?} */\r\n        var stateName = typeof name === 'string' ? name : (name && name.getName()) || null;\r\n        StoreValidators.checkCorrectStateName(stateName);\r\n        if (inheritedStateClass.hasOwnProperty(META_KEY)) {\r\n            /** @type {?} */\r\n            var inheritedMeta = inheritedStateClass[META_KEY] || {};\r\n            meta.actions = __assign({}, meta.actions, inheritedMeta.actions);\r\n        }\r\n        meta.children = children;\r\n        meta.defaults = defaults;\r\n        meta.name = stateName;\r\n    }\r\n    return (/**\r\n     * @param {?} target\r\n     * @return {?}\r\n     */\r\n    function (target) {\r\n        ensureStateClassIsInjectable(target);\r\n        /** @type {?} */\r\n        var stateClass = target;\r\n        /** @type {?} */\r\n        var meta = ensureStoreMetadata(stateClass);\r\n        /** @type {?} */\r\n        var inheritedStateClass = Object.getPrototypeOf(stateClass);\r\n        /** @type {?} */\r\n        var optionsWithInheritance = getStateOptions(inheritedStateClass);\r\n        mutateMetaData({ meta: meta, inheritedStateClass: inheritedStateClass, optionsWithInheritance: optionsWithInheritance });\r\n        stateClass[META_OPTIONS_KEY] = optionsWithInheritance;\r\n    });\r\n}\n\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\n/** @type {?} */\r\nvar DOLLAR_CHAR_CODE = 36;\r\n/**\r\n * @template T\r\n * @param {?} selector\r\n * @return {?}\r\n */\r\nfunction createSelectObservable(selector) {\r\n    if (!SelectFactory.store) {\r\n        throw new Error(CONFIG_MESSAGES[VALIDATION_CODE.SELECT_FACTORY_NOT_CONNECTED]());\r\n    }\r\n    return SelectFactory.store.select(selector);\r\n}\r\n/**\r\n * @param {?} name\r\n * @param {?=} rawSelector\r\n * @param {?=} paths\r\n * @return {?}\r\n */\r\nfunction createSelectorFn(name, rawSelector, paths) {\r\n    if (paths === void 0) { paths = []; }\r\n    rawSelector = !rawSelector ? removeDollarAtTheEnd(name) : rawSelector;\r\n    if (typeof rawSelector === 'string') {\r\n        /** @type {?} */\r\n        var propsArray = paths.length\r\n            ? __spread([rawSelector], paths) : rawSelector.split('.');\r\n        return propGetter(propsArray, (/** @type {?} */ (SelectFactory.config)));\r\n    }\r\n    return rawSelector;\r\n}\r\n/**\r\n * \\@example If `foo$` => make it just `foo`\r\n * @param {?} name\r\n * @return {?}\r\n */\r\nfunction removeDollarAtTheEnd(name) {\r\n    /** @type {?} */\r\n    var lastCharIndex = name.length - 1;\r\n    /** @type {?} */\r\n    var dollarAtTheEnd = name.charCodeAt(lastCharIndex) === DOLLAR_CHAR_CODE;\r\n    return dollarAtTheEnd ? name.slice(0, lastCharIndex) : name;\r\n}\n\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\n/**\r\n * Decorator for selecting a slice of state from the store.\r\n * @template T\r\n * @param {?=} rawSelector\r\n * @param {...?} paths\r\n * @return {?}\r\n */\r\nfunction Select(rawSelector) {\r\n    var paths = [];\r\n    for (var _i = 1; _i < arguments.length; _i++) {\r\n        paths[_i - 1] = arguments[_i];\r\n    }\r\n    return (/**\r\n     * @template U, K\r\n     * @param {?} target\r\n     * @param {?} key\r\n     * @return {?}\r\n     */\r\n    function (target, key) {\r\n        var _a;\r\n        /** @type {?} */\r\n        var name = key.toString();\r\n        /** @type {?} */\r\n        var selectorId = \"__\" + name + \"__selector\";\r\n        /** @type {?} */\r\n        var selector = createSelectorFn(name, rawSelector, paths);\r\n        Object.defineProperties(target, (_a = {},\r\n            _a[selectorId] = {\r\n                writable: true,\r\n                enumerable: false,\r\n                configurable: true\r\n            },\r\n            _a[name] = {\r\n                enumerable: true,\r\n                configurable: true,\r\n                get: /**\r\n                 * @return {?}\r\n                 */\r\n                function () {\r\n                    return this[selectorId] || (this[selectorId] = createSelectObservable(selector));\r\n                }\r\n            },\r\n            _a));\r\n    });\r\n}\n\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\n/**\r\n * Decorator for setting selector options at a method or class level.\r\n * @param {?} options\r\n * @return {?}\r\n */\r\nfunction SelectorOptions(options) {\r\n    return (/** @type {?} */ (((/**\r\n     * @template T\r\n     * @param {?} target\r\n     * @param {?} methodName\r\n     * @param {?} descriptor\r\n     * @return {?}\r\n     */\r\n    function decorate(target, methodName, descriptor) {\r\n        if (methodName) {\r\n            // Method Decorator\r\n            /** @type {?} */\r\n            var originalFn = descriptor.value || ((/** @type {?} */ (descriptor))).originalFn;\r\n            if (originalFn) {\r\n                selectorOptionsMetaAccessor.defineOptions(originalFn, options);\r\n            }\r\n        }\r\n        else {\r\n            // Class Decorator\r\n            selectorOptionsMetaAccessor.defineOptions(target, options);\r\n        }\r\n    }))));\r\n}\n\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\n/**\r\n * @record\r\n */\r\nfunction MetaDataModel$1() { }\r\nif (false) {\r\n    /** @type {?} */\r\n    MetaDataModel$1.prototype.name;\r\n    /** @type {?} */\r\n    MetaDataModel$1.prototype.actions;\r\n    /** @type {?} */\r\n    MetaDataModel$1.prototype.defaults;\r\n    /** @type {?} */\r\n    MetaDataModel$1.prototype.path;\r\n    /** @type {?|undefined} */\r\n    MetaDataModel$1.prototype.children;\r\n}\r\n/**\r\n * @record\r\n */\r\nfunction SelectorMetaDataModel$1() { }\r\nif (false) {\r\n    /** @type {?} */\r\n    SelectorMetaDataModel$1.prototype.originalFn;\r\n    /** @type {?} */\r\n    SelectorMetaDataModel$1.prototype.containerClass;\r\n    /** @type {?} */\r\n    SelectorMetaDataModel$1.prototype.selectorName;\r\n    /** @type {?} */\r\n    SelectorMetaDataModel$1.prototype.getSelectorOptions;\r\n}\r\n/**\r\n * @param {?} target\r\n * @return {?}\r\n */\r\nfunction ensureStoreMetadata$1(target) {\r\n    return ensureStoreMetadata(target);\r\n}\r\n/**\r\n * @param {?} target\r\n * @return {?}\r\n */\r\nfunction getStoreMetadata$1(target) {\r\n    return getStoreMetadata(target);\r\n}\r\n/**\r\n * @param {?} target\r\n * @return {?}\r\n */\r\nfunction ensureSelectorMetadata$1(target) {\r\n    return ensureSelectorMetadata(target);\r\n}\r\n/**\r\n * @param {?} target\r\n * @return {?}\r\n */\r\nfunction getSelectorMetadata$1(target) {\r\n    return getSelectorMetadata(target);\r\n}\n\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\n/**\r\n * Decorator for memoizing a state selector.\r\n * @template T\r\n * @param {?=} selectors\r\n * @return {?}\r\n */\r\nfunction Selector(selectors) {\r\n    return (/**\r\n     * @template U\r\n     * @param {?} target\r\n     * @param {?} key\r\n     * @param {?} descriptor\r\n     * @return {?}\r\n     */\r\n    function (target, key, descriptor) {\r\n        /** @type {?} */\r\n        var isNotMethod = !(descriptor && descriptor.value !== null);\r\n        if (isNotMethod) {\r\n            throw new Error(CONFIG_MESSAGES[VALIDATION_CODE.SELECTOR_DECORATOR]());\r\n        }\r\n        /** @type {?} */\r\n        var originalFn = descriptor.value;\r\n        /** @type {?} */\r\n        var memoizedFn = createSelector(selectors, (/** @type {?} */ (originalFn)), {\r\n            containerClass: target,\r\n            selectorName: key.toString(),\r\n            getSelectorOptions: /**\r\n             * @return {?}\r\n             */\r\n            function () {\r\n                return {};\r\n            }\r\n        });\r\n        /** @type {?} */\r\n        var newDescriptor = {\r\n            configurable: true,\r\n            get: /**\r\n             * @return {?}\r\n             */\r\n            function () {\r\n                return memoizedFn;\r\n            }\r\n        };\r\n        // Add hidden property to descriptor\r\n        ((/** @type {?} */ (newDescriptor)))['originalFn'] = originalFn;\r\n        return newDescriptor;\r\n    });\r\n}\n\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\nvar NoopNgxsExecutionStrategy = /** @class */ (function () {\r\n    function NoopNgxsExecutionStrategy() {\r\n    }\r\n    /**\r\n     * @template T\r\n     * @param {?} func\r\n     * @return {?}\r\n     */\r\n    NoopNgxsExecutionStrategy.prototype.enter = /**\r\n     * @template T\r\n     * @param {?} func\r\n     * @return {?}\r\n     */\r\n    function (func) {\r\n        return func();\r\n    };\r\n    /**\r\n     * @template T\r\n     * @param {?} func\r\n     * @return {?}\r\n     */\r\n    NoopNgxsExecutionStrategy.prototype.leave = /**\r\n     * @template T\r\n     * @param {?} func\r\n     * @return {?}\r\n     */\r\n    function (func) {\r\n        return func();\r\n    };\r\n    NoopNgxsExecutionStrategy.decorators = [\r\n        { type: Injectable }\r\n    ];\r\n    return NoopNgxsExecutionStrategy;\r\n}());\n\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\n/**\r\n * @template T\r\n */\r\nvar  /**\r\n * @template T\r\n */\r\nStateToken = /** @class */ (function () {\r\n    function StateToken(name) {\r\n        var _this = this;\r\n        this.name = name;\r\n        /** @type {?} */\r\n        var selectorMetadata = ensureSelectorMetadata((/** @type {?} */ (this)));\r\n        selectorMetadata.makeRootSelector = (/**\r\n         * @param {?} runtimeContext\r\n         * @return {?}\r\n         */\r\n        function (runtimeContext) {\r\n            return runtimeContext.getStateGetter(_this.name);\r\n        });\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    StateToken.prototype.getName = /**\r\n     * @return {?}\r\n     */\r\n    function () {\r\n        return this.name;\r\n    };\r\n    /**\r\n     * @return {?}\r\n     */\r\n    StateToken.prototype.toString = /**\r\n     * @return {?}\r\n     */\r\n    function () {\r\n        return \"StateToken[\" + this.name + \"]\";\r\n    };\r\n    return StateToken;\r\n}());\r\nif (false) {\r\n    /**\r\n     * @type {?}\r\n     * @private\r\n     */\r\n    StateToken.prototype.name;\r\n}\n\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\n\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\n\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\n\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\n\nexport { Action, Actions, InitState, NGXS_PLUGINS, NgxsModule, NgxsSimpleChange, NoopNgxsExecutionStrategy, Select, Selector, SelectorOptions, State, StateStream, StateToken, Store, UpdateState, actionMatcher, createSelector, ensureSelectorMetadata$1 as ensureSelectorMetadata, ensureStoreMetadata$1 as ensureStoreMetadata, getActionTypeFromInstance, getSelectorMetadata$1 as getSelectorMetadata, getStoreMetadata$1 as getStoreMetadata, getValue, ofAction, ofActionCanceled, ofActionCompleted, ofActionDispatched, ofActionErrored, ofActionSuccessful, setValue, OrderedSubject as ɵa, InternalActions as ɵb, LifecycleStateManager as ɵba, NgxsFeatureModule as ɵbb, DispatchOutsideZoneNgxsExecutionStrategy as ɵbc, ROOT_STATE_TOKEN as ɵc, FEATURE_STATE_TOKEN as ɵd, NG_TEST_MODE as ɵe, NG_DEV_MODE as ɵf, SELECTOR_META_KEY as ɵg, NgxsConfig as ɵh, NGXS_EXECUTION_STRATEGY as ɵi, NgxsRootModule as ɵj, StateFactory as ɵk, InternalDispatchedActionResults as ɵl, InternalDispatcher as ɵm, StateContextFactory as ɵn, InternalStateOperations as ɵo, PluginManager as ɵp, InternalNgxsExecutionStrategy as ɵq, ConfigValidator as ɵr, HostEnvironment as ɵs, ensureStoreMetadata as ɵv, getStoreMetadata as ɵw, ensureSelectorMetadata as ɵx, getSelectorMetadata as ɵy, SelectFactory as ɵz };\n"]}