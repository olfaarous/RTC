{"version":3,"sources":["/home/olfa/Desktop/Pixels/RTC/node_modules/@ngxs/hmr-plugin/fesm5/ngxs-hmr-plugin.js"],"names":[],"mappings":"AAAA","file":"ngxs-hmr-plugin.js","sourcesContent":["import { __assign, __awaiter, __generator } from 'tslib';\nimport { ApplicationRef } from '@angular/core';\nimport { NgxsBootstrapper, InitialState } from '@ngxs/store/internals';\nimport { Store } from '@ngxs/store';\nimport { isStateOperator } from '@ngxs/store/operators';\n\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\nvar HmrInitAction = /** @class */ (function () {\r\n    function HmrInitAction(payload) {\r\n        this.payload = payload;\r\n    }\r\n    Object.defineProperty(HmrInitAction, \"type\", {\r\n        get: /**\r\n         * @return {?}\r\n         */\r\n        function () {\r\n            // NOTE: Not necessary to declare the type in this way in your code. See https://github.com/ngxs/store/pull/644#issuecomment-436003138\r\n            return '@@HMR_INIT';\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    return HmrInitAction;\r\n}());\r\nif (false) {\r\n    /** @type {?} */\r\n    HmrInitAction.prototype.payload;\r\n}\n\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\nvar HmrBeforeDestroyAction = /** @class */ (function () {\r\n    function HmrBeforeDestroyAction(payload) {\r\n        this.payload = payload;\r\n    }\r\n    Object.defineProperty(HmrBeforeDestroyAction, \"type\", {\r\n        get: /**\r\n         * @return {?}\r\n         */\r\n        function () {\r\n            // NOTE: Not necessary to declare the type in this way in your code. See https://github.com/ngxs/store/pull/644#issuecomment-436003138\r\n            return '@@HMR_BEFORE_DESTROY';\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    return HmrBeforeDestroyAction;\r\n}());\r\nif (false) {\r\n    /** @type {?} */\r\n    HmrBeforeDestroyAction.prototype.payload;\r\n}\n\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\n/**\r\n * @template T, S\r\n */\r\nvar /**\r\n * @template T, S\r\n */\r\nHmrStateContextFactory = /** @class */ (function () {\r\n    function HmrStateContextFactory(module) {\r\n        /** @type {?} */\r\n        var store = module.injector.get(Store, undefined);\r\n        if (!store) {\r\n            throw new Error('Store not found, maybe you forgot to import the NgxsModule');\r\n        }\r\n        this.store = store;\r\n    }\r\n    /**\r\n     * @description\r\n     * must be taken out into  @ngxs/store/internals\r\n     */\r\n    /**\r\n     * \\@description\r\n     * must be taken out into  \\@ngxs/store/internals\r\n     * @return {?}\r\n     */\r\n    HmrStateContextFactory.prototype.createStateContext = /**\r\n     * \\@description\r\n     * must be taken out into  \\@ngxs/store/internals\r\n     * @return {?}\r\n     */\r\n    function () {\r\n        var _this = this;\r\n        return {\r\n            dispatch: (/**\r\n             * @param {?} actions\r\n             * @return {?}\r\n             */\r\n            function (actions) { return (/** @type {?} */ (_this.store)).dispatch(actions); }),\r\n            getState: (/**\r\n             * @return {?}\r\n             */\r\n            function () { return (/** @type {?} */ ((/** @type {?} */ (_this.store)).snapshot())); }),\r\n            setState: (/**\r\n             * @param {?} val\r\n             * @return {?}\r\n             */\r\n            function (val) {\r\n                if (isStateOperator(val)) {\r\n                    /** @type {?} */\r\n                    var currentState = (/** @type {?} */ (_this.store)).snapshot();\r\n                    val = val(currentState);\r\n                }\r\n                (/** @type {?} */ (_this.store)).reset(val);\r\n                return (/** @type {?} */ (val));\r\n            }),\r\n            patchState: (/**\r\n             * @param {?} val\r\n             * @return {?}\r\n             */\r\n            function (val) {\r\n                /** @type {?} */\r\n                var currentState = (/** @type {?} */ (_this.store)).snapshot();\r\n                /** @type {?} */\r\n                var newState = __assign({}, currentState, ((/** @type {?} */ (val))));\r\n                (/** @type {?} */ (_this.store)).reset(newState);\r\n                return newState;\r\n            })\r\n        };\r\n    };\r\n    return HmrStateContextFactory;\r\n}());\r\nif (false) {\r\n    /** @type {?} */\r\n    HmrStateContextFactory.prototype.store;\r\n}\n\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\nvar HmrOptionBuilder = /** @class */ (function () {\r\n    function HmrOptionBuilder(_a) {\r\n        var deferTime = _a.deferTime, autoClearLogs = _a.autoClearLogs;\r\n        this.deferTime = deferTime || 100;\r\n        this.autoClearLogs = autoClearLogs === undefined ? true : autoClearLogs;\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    HmrOptionBuilder.prototype.clearLogs = /**\r\n     * @return {?}\r\n     */\r\n    function () {\r\n        if (this.autoClearLogs) {\r\n            console.clear();\r\n        }\r\n    };\r\n    return HmrOptionBuilder;\r\n}());\r\nif (false) {\r\n    /** @type {?} */\r\n    HmrOptionBuilder.prototype.deferTime;\r\n    /** @type {?} */\r\n    HmrOptionBuilder.prototype.autoClearLogs;\r\n}\n\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\n/**\r\n * @template T, S\r\n */\r\nvar /**\r\n * @template T, S\r\n */\r\nHmrLifecycle = /** @class */ (function () {\r\n    function HmrLifecycle(ngAppModule, bootstrap, storage, context, options) {\r\n        this.ngAppModule = ngAppModule;\r\n        this.bootstrap = bootstrap;\r\n        this.storage = storage;\r\n        this.context = context;\r\n        this.options = options;\r\n    }\r\n    /**\r\n     * @param {?} hmrAfterOnInit\r\n     * @return {?}\r\n     */\r\n    HmrLifecycle.prototype.hmrNgxsStoreOnInit = /**\r\n     * @param {?} hmrAfterOnInit\r\n     * @return {?}\r\n     */\r\n    function (hmrAfterOnInit) {\r\n        /** @type {?} */\r\n        var moduleHmrInit = this.getModuleHmrInitCallback();\r\n        moduleHmrInit = moduleHmrInit.bind(this.ngAppModule);\r\n        this.stateEventLoop((/**\r\n         * @param {?} ctx\r\n         * @param {?} state\r\n         * @return {?}\r\n         */\r\n        function (ctx, state) {\r\n            moduleHmrInit(ctx, state);\r\n            hmrAfterOnInit(ctx, state);\r\n        }));\r\n    };\r\n    /**\r\n     * @private\r\n     * @return {?}\r\n     */\r\n    HmrLifecycle.prototype.getModuleHmrInitCallback = /**\r\n     * @private\r\n     * @return {?}\r\n     */\r\n    function () {\r\n        if (typeof this.ngAppModule.hmrNgxsStoreOnInit === 'function') {\r\n            return this.ngAppModule.hmrNgxsStoreOnInit;\r\n        }\r\n        return (/**\r\n         * @param {?} ctx\r\n         * @param {?} state\r\n         * @return {?}\r\n         */\r\n        function defaultModuleHmrInit(ctx, state) {\r\n            ctx.patchState(state);\r\n        });\r\n    };\r\n    /**\r\n     * @return {?}\r\n     */\r\n    HmrLifecycle.prototype.hmrNgxsStoreBeforeOnDestroy = /**\r\n     * @return {?}\r\n     */\r\n    function () {\r\n        /** @type {?} */\r\n        var state = {};\r\n        /** @type {?} */\r\n        var ctx = this.context.createStateContext();\r\n        if (typeof this.ngAppModule.hmrNgxsStoreBeforeOnDestroy === 'function') {\r\n            state = this.ngAppModule.hmrNgxsStoreBeforeOnDestroy(ctx);\r\n        }\r\n        else {\r\n            state = ctx.getState();\r\n        }\r\n        ctx.dispatch(new HmrBeforeDestroyAction(state));\r\n        return state;\r\n    };\r\n    /**\r\n     * @private\r\n     * @param {?} callback\r\n     * @return {?}\r\n     */\r\n    HmrLifecycle.prototype.stateEventLoop = /**\r\n     * @private\r\n     * @param {?} callback\r\n     * @return {?}\r\n     */\r\n    function (callback) {\r\n        var _this = this;\r\n        if (!this.storage.hasData())\r\n            return;\r\n        /** @type {?} */\r\n        var appBootstrapped$ = this.bootstrap.appBootstrapped$;\r\n        /** @type {?} */\r\n        var state$ = this.context.store.select((/**\r\n         * @param {?} state\r\n         * @return {?}\r\n         */\r\n        function (state) { return state; }));\r\n        appBootstrapped$.subscribe((/**\r\n         * @return {?}\r\n         */\r\n        function () {\r\n            /** @type {?} */\r\n            var eventId;\r\n            /** @type {?} */\r\n            var storeEventId = state$.subscribe((/**\r\n             * @return {?}\r\n             */\r\n            function () {\r\n                // setTimeout used for zone detection after set hmr state\r\n                clearInterval(eventId);\r\n                eventId = window.setTimeout((/**\r\n                 * @return {?}\r\n                 */\r\n                function () {\r\n                    // close check on the message queue\r\n                    storeEventId.unsubscribe();\r\n                    // if events are no longer running on the call stack,\r\n                    // then we can update the state\r\n                    callback(_this.context.createStateContext(), (/** @type {?} */ (_this.storage.snapshot)));\r\n                }), _this.options.deferTime);\r\n            }));\r\n        }));\r\n    };\r\n    return HmrLifecycle;\r\n}());\r\nif (false) {\r\n    /**\r\n     * @type {?}\r\n     * @private\r\n     */\r\n    HmrLifecycle.prototype.ngAppModule;\r\n    /**\r\n     * @type {?}\r\n     * @private\r\n     */\r\n    HmrLifecycle.prototype.bootstrap;\r\n    /**\r\n     * @type {?}\r\n     * @private\r\n     */\r\n    HmrLifecycle.prototype.storage;\r\n    /**\r\n     * @type {?}\r\n     * @private\r\n     */\r\n    HmrLifecycle.prototype.context;\r\n    /**\r\n     * @type {?}\r\n     * @private\r\n     */\r\n    HmrLifecycle.prototype.options;\r\n}\n\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\n/**\r\n * @template T, S\r\n */\r\nvar /**\r\n * @template T, S\r\n */\r\nHmrManager = /** @class */ (function () {\r\n    function HmrManager(options, storage) {\r\n        this.storage = storage;\r\n        this.optionsBuilder = new HmrOptionBuilder(options);\r\n    }\r\n    Object.defineProperty(HmrManager.prototype, \"applicationRef\", {\r\n        get: /**\r\n         * @private\r\n         * @return {?}\r\n         */\r\n        function () {\r\n            return this.ngModule.injector.get(ApplicationRef);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(HmrManager.prototype, \"bootstrap\", {\r\n        get: /**\r\n         * @private\r\n         * @return {?}\r\n         */\r\n        function () {\r\n            return this.ngModule.injector.get(NgxsBootstrapper);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * @param {?} bootstrapFn\r\n     * @param {?} tick\r\n     * @return {?}\r\n     */\r\n    HmrManager.prototype.hmrModule = /**\r\n     * @param {?} bootstrapFn\r\n     * @param {?} tick\r\n     * @return {?}\r\n     */\r\n    function (bootstrapFn, tick) {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var _a;\r\n            return __generator(this, function (_b) {\r\n                switch (_b.label) {\r\n                    case 0:\r\n                        InitialState.set(this.storage.snapshot);\r\n                        _a = this;\r\n                        return [4 /*yield*/, bootstrapFn()];\r\n                    case 1:\r\n                        _a.ngModule = _b.sent();\r\n                        this.context = new HmrStateContextFactory(this.ngModule);\r\n                        this.lifecycle = this.createLifecycle();\r\n                        tick();\r\n                        InitialState.pop();\r\n                        return [2 /*return*/, this.ngModule];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    /**\r\n     * @return {?}\r\n     */\r\n    HmrManager.prototype.beforeModuleBootstrap = /**\r\n     * @return {?}\r\n     */\r\n    function () {\r\n        this.lifecycle.hmrNgxsStoreOnInit((/**\r\n         * @param {?} ctx\r\n         * @param {?} state\r\n         * @return {?}\r\n         */\r\n        function (ctx, state) {\r\n            ctx.dispatch(new HmrInitAction(state));\r\n        }));\r\n    };\r\n    /**\r\n     * @return {?}\r\n     */\r\n    HmrManager.prototype.beforeModuleOnDestroy = /**\r\n     * @return {?}\r\n     */\r\n    function () {\r\n        this.optionsBuilder.clearLogs();\r\n        return this.lifecycle.hmrNgxsStoreBeforeOnDestroy();\r\n    };\r\n    /**\r\n     * @return {?}\r\n     */\r\n    HmrManager.prototype.createNewModule = /**\r\n     * @return {?}\r\n     */\r\n    function () {\r\n        /** @type {?} */\r\n        var removeOldHosts = this.cloneHostsBeforeDestroy();\r\n        this.removeNgStyles();\r\n        this.ngModule.destroy();\r\n        removeOldHosts();\r\n    };\r\n    /**\r\n     * @private\r\n     * @return {?}\r\n     */\r\n    HmrManager.prototype.createLifecycle = /**\r\n     * @private\r\n     * @return {?}\r\n     */\r\n    function () {\r\n        return new HmrLifecycle(this.ngModule.instance, this.bootstrap, this.storage, this.context, this.optionsBuilder);\r\n    };\r\n    /**\r\n     * @private\r\n     * @return {?}\r\n     */\r\n    HmrManager.prototype.cloneHostsBeforeDestroy = /**\r\n     * @private\r\n     * @return {?}\r\n     */\r\n    function () {\r\n        /** @type {?} */\r\n        var elements = this.applicationRef.components.map((/**\r\n         * @param {?} component\r\n         * @return {?}\r\n         */\r\n        function (component) { return component.location.nativeElement; }));\r\n        /** @type {?} */\r\n        var removableList = elements.map((/**\r\n         * @param {?} componentNode\r\n         * @return {?}\r\n         */\r\n        function (componentNode) {\r\n            /** @type {?} */\r\n            var newNode = document.createElement(componentNode.tagName);\r\n            /** @type {?} */\r\n            var parentNode = (/** @type {?} */ (componentNode.parentNode));\r\n            /** @type {?} */\r\n            var currentDisplay = newNode.style.display;\r\n            newNode.style.display = 'none';\r\n            parentNode.insertBefore(newNode, componentNode);\r\n            return (/**\r\n             * @return {?}\r\n             */\r\n            function () {\r\n                newNode.style.display = currentDisplay;\r\n                try {\r\n                    parentNode.removeChild(componentNode);\r\n                }\r\n                catch (_a) { }\r\n            });\r\n        }));\r\n        return (/**\r\n         * @return {?}\r\n         */\r\n        function removeOldHosts() {\r\n            removableList.forEach((/**\r\n             * @param {?} removeOldHost\r\n             * @return {?}\r\n             */\r\n            function (removeOldHost) { return removeOldHost(); }));\r\n        });\r\n    };\r\n    /**\r\n     * @private\r\n     * @return {?}\r\n     */\r\n    HmrManager.prototype.removeNgStyles = /**\r\n     * @private\r\n     * @return {?}\r\n     */\r\n    function () {\r\n        /** @type {?} */\r\n        var head = (/** @type {?} */ (document.head));\r\n        /** @type {?} */\r\n        var styles = Array.from((/** @type {?} */ (head)).querySelectorAll('style'));\r\n        styles\r\n            .filter((/**\r\n         * @param {?} style\r\n         * @return {?}\r\n         */\r\n        function (style) { return style.innerText.includes('_ng'); }))\r\n            .map((/**\r\n         * @param {?} style\r\n         * @return {?}\r\n         */\r\n        function (style) { return (/** @type {?} */ (head)).removeChild(style); }));\r\n    };\r\n    return HmrManager;\r\n}());\r\nif (false) {\r\n    /** @type {?} */\r\n    HmrManager.prototype.storage;\r\n    /** @type {?} */\r\n    HmrManager.prototype.context;\r\n    /** @type {?} */\r\n    HmrManager.prototype.lifecycle;\r\n    /** @type {?} */\r\n    HmrManager.prototype.optionsBuilder;\r\n    /**\r\n     * @type {?}\r\n     * @private\r\n     */\r\n    HmrManager.prototype.ngModule;\r\n}\n\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\n/**\r\n * @template S\r\n */\r\nvar /**\r\n * @template S\r\n */\r\nHmrStorage = /** @class */ (function () {\r\n    function HmrStorage(_snapshot) {\r\n        if (_snapshot === void 0) { _snapshot = {}; }\r\n        this._snapshot = _snapshot;\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    HmrStorage.prototype.hasData = /**\r\n     * @return {?}\r\n     */\r\n    function () {\r\n        return Object.keys(this._snapshot).length > 0;\r\n    };\r\n    Object.defineProperty(HmrStorage.prototype, \"snapshot\", {\r\n        get: /**\r\n         * @return {?}\r\n         */\r\n        function () {\r\n            return this._snapshot;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    return HmrStorage;\r\n}());\r\nif (false) {\r\n    /**\r\n     * @type {?}\r\n     * @private\r\n     */\r\n    HmrStorage.prototype._snapshot;\r\n}\n\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\n/**\r\n * @param {?} value\r\n * @return {?}\r\n */\r\nfunction setHmrReloadedTo(value) {\r\n    if (window[\"NGXS_HMR_LIFECYCLE_STATUS\" /* Status */]) {\r\n        window[\"NGXS_HMR_LIFECYCLE_STATUS\" /* Status */].hmrReloaded = value;\r\n    }\r\n}\r\n/**\r\n * @return {?}\r\n */\r\nfunction markApplicationAsHmrReloaded() {\r\n    window[\"NGXS_HMR_LIFECYCLE_STATUS\" /* Status */] = window[\"NGXS_HMR_LIFECYCLE_STATUS\" /* Status */] || {\r\n        hmrReloaded: false\r\n    };\r\n}\n\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\n/**\r\n * @template T\r\n * @param {?} webpackModule\r\n * @param {?} bootstrapFn\r\n * @param {?=} options\r\n * @return {?}\r\n */\r\nfunction hmr(webpackModule, bootstrapFn, options) {\r\n    if (options === void 0) { options = {}; }\r\n    return __awaiter(this, void 0, void 0, function () {\r\n        /**\r\n         * @record\r\n         */\r\n        function HmrDataTransfer() { }\r\n        var dataTransfer, storage, manager;\r\n        return __generator(this, function (_a) {\r\n            switch (_a.label) {\r\n                case 0:\r\n                    if (!webpackModule.hot) {\r\n                        console.error('Are you using the --hmr flag for ng serve?');\r\n                        throw new Error('HMR is not enabled for webpack-dev-server!');\r\n                    }\r\n                    markApplicationAsHmrReloaded();\r\n                    webpackModule.hot.accept();\r\n                    if (false) {\r\n                        /** @type {?|undefined} */\r\n                        HmrDataTransfer.prototype.snapshot;\r\n                    }\r\n                    dataTransfer = webpackModule.hot.data || {};\r\n                    storage = new HmrStorage(dataTransfer.snapshot || {});\r\n                    manager = new HmrManager(options, storage);\r\n                    return [4 /*yield*/, manager.hmrModule(bootstrapFn, (/**\r\n                         * @return {?}\r\n                         */\r\n                        function () {\r\n                            manager.beforeModuleBootstrap();\r\n                            (/** @type {?} */ (webpackModule.hot)).dispose((/**\r\n                             * @param {?} data\r\n                             * @return {?}\r\n                             */\r\n                            function (data) {\r\n                                setHmrReloadedTo(true);\r\n                                data.snapshot = manager.beforeModuleOnDestroy();\r\n                                manager.createNewModule();\r\n                            }));\r\n                        }))];\r\n                case 1: return [2 /*return*/, _a.sent()];\r\n            }\r\n        });\r\n    });\r\n}\n\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\n/**\r\n * @return {?}\r\n */\r\nfunction hmrIsReloaded() {\r\n    return !!(window[\"NGXS_HMR_LIFECYCLE_STATUS\" /* Status */] && window[\"NGXS_HMR_LIFECYCLE_STATUS\" /* Status */].hmrReloaded);\r\n}\n\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\n\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\n\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\n\nexport { HmrBeforeDestroyAction, HmrInitAction, hmr, hmrIsReloaded };\n"]}