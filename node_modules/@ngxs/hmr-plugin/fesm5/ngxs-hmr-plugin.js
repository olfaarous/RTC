import { __assign, __awaiter, __generator } from 'tslib';
import { ApplicationRef } from '@angular/core';
import { NgxsBootstrapper, InitialState } from '@ngxs/store/internals';
import { Store } from '@ngxs/store';
import { isStateOperator } from '@ngxs/store/operators';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var HmrInitAction = /** @class */ (function () {
    function HmrInitAction(payload) {
        this.payload = payload;
    }
    Object.defineProperty(HmrInitAction, "type", {
        get: /**
         * @return {?}
         */
        function () {
            // NOTE: Not necessary to declare the type in this way in your code. See https://github.com/ngxs/store/pull/644#issuecomment-436003138
            return '@@HMR_INIT';
        },
        enumerable: true,
        configurable: true
    });
    return HmrInitAction;
}());
if (false) {
    /** @type {?} */
    HmrInitAction.prototype.payload;
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var HmrBeforeDestroyAction = /** @class */ (function () {
    function HmrBeforeDestroyAction(payload) {
        this.payload = payload;
    }
    Object.defineProperty(HmrBeforeDestroyAction, "type", {
        get: /**
         * @return {?}
         */
        function () {
            // NOTE: Not necessary to declare the type in this way in your code. See https://github.com/ngxs/store/pull/644#issuecomment-436003138
            return '@@HMR_BEFORE_DESTROY';
        },
        enumerable: true,
        configurable: true
    });
    return HmrBeforeDestroyAction;
}());
if (false) {
    /** @type {?} */
    HmrBeforeDestroyAction.prototype.payload;
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * @template T, S
 */
var /**
 * @template T, S
 */
HmrStateContextFactory = /** @class */ (function () {
    function HmrStateContextFactory(module) {
        /** @type {?} */
        var store = module.injector.get(Store, undefined);
        if (!store) {
            throw new Error('Store not found, maybe you forgot to import the NgxsModule');
        }
        this.store = store;
    }
    /**
     * @description
     * must be taken out into  @ngxs/store/internals
     */
    /**
     * \@description
     * must be taken out into  \@ngxs/store/internals
     * @return {?}
     */
    HmrStateContextFactory.prototype.createStateContext = /**
     * \@description
     * must be taken out into  \@ngxs/store/internals
     * @return {?}
     */
    function () {
        var _this = this;
        return {
            dispatch: (/**
             * @param {?} actions
             * @return {?}
             */
            function (actions) { return (/** @type {?} */ (_this.store)).dispatch(actions); }),
            getState: (/**
             * @return {?}
             */
            function () { return (/** @type {?} */ ((/** @type {?} */ (_this.store)).snapshot())); }),
            setState: (/**
             * @param {?} val
             * @return {?}
             */
            function (val) {
                if (isStateOperator(val)) {
                    /** @type {?} */
                    var currentState = (/** @type {?} */ (_this.store)).snapshot();
                    val = val(currentState);
                }
                (/** @type {?} */ (_this.store)).reset(val);
                return (/** @type {?} */ (val));
            }),
            patchState: (/**
             * @param {?} val
             * @return {?}
             */
            function (val) {
                /** @type {?} */
                var currentState = (/** @type {?} */ (_this.store)).snapshot();
                /** @type {?} */
                var newState = __assign({}, currentState, ((/** @type {?} */ (val))));
                (/** @type {?} */ (_this.store)).reset(newState);
                return newState;
            })
        };
    };
    return HmrStateContextFactory;
}());
if (false) {
    /** @type {?} */
    HmrStateContextFactory.prototype.store;
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var HmrOptionBuilder = /** @class */ (function () {
    function HmrOptionBuilder(_a) {
        var deferTime = _a.deferTime, autoClearLogs = _a.autoClearLogs;
        this.deferTime = deferTime || 100;
        this.autoClearLogs = autoClearLogs === undefined ? true : autoClearLogs;
    }
    /**
     * @return {?}
     */
    HmrOptionBuilder.prototype.clearLogs = /**
     * @return {?}
     */
    function () {
        if (this.autoClearLogs) {
            console.clear();
        }
    };
    return HmrOptionBuilder;
}());
if (false) {
    /** @type {?} */
    HmrOptionBuilder.prototype.deferTime;
    /** @type {?} */
    HmrOptionBuilder.prototype.autoClearLogs;
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * @template T, S
 */
var /**
 * @template T, S
 */
HmrLifecycle = /** @class */ (function () {
    function HmrLifecycle(ngAppModule, bootstrap, storage, context, options) {
        this.ngAppModule = ngAppModule;
        this.bootstrap = bootstrap;
        this.storage = storage;
        this.context = context;
        this.options = options;
    }
    /**
     * @param {?} hmrAfterOnInit
     * @return {?}
     */
    HmrLifecycle.prototype.hmrNgxsStoreOnInit = /**
     * @param {?} hmrAfterOnInit
     * @return {?}
     */
    function (hmrAfterOnInit) {
        /** @type {?} */
        var moduleHmrInit = this.getModuleHmrInitCallback();
        moduleHmrInit = moduleHmrInit.bind(this.ngAppModule);
        this.stateEventLoop((/**
         * @param {?} ctx
         * @param {?} state
         * @return {?}
         */
        function (ctx, state) {
            moduleHmrInit(ctx, state);
            hmrAfterOnInit(ctx, state);
        }));
    };
    /**
     * @private
     * @return {?}
     */
    HmrLifecycle.prototype.getModuleHmrInitCallback = /**
     * @private
     * @return {?}
     */
    function () {
        if (typeof this.ngAppModule.hmrNgxsStoreOnInit === 'function') {
            return this.ngAppModule.hmrNgxsStoreOnInit;
        }
        return (/**
         * @param {?} ctx
         * @param {?} state
         * @return {?}
         */
        function defaultModuleHmrInit(ctx, state) {
            ctx.patchState(state);
        });
    };
    /**
     * @return {?}
     */
    HmrLifecycle.prototype.hmrNgxsStoreBeforeOnDestroy = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var state = {};
        /** @type {?} */
        var ctx = this.context.createStateContext();
        if (typeof this.ngAppModule.hmrNgxsStoreBeforeOnDestroy === 'function') {
            state = this.ngAppModule.hmrNgxsStoreBeforeOnDestroy(ctx);
        }
        else {
            state = ctx.getState();
        }
        ctx.dispatch(new HmrBeforeDestroyAction(state));
        return state;
    };
    /**
     * @private
     * @param {?} callback
     * @return {?}
     */
    HmrLifecycle.prototype.stateEventLoop = /**
     * @private
     * @param {?} callback
     * @return {?}
     */
    function (callback) {
        var _this = this;
        if (!this.storage.hasData())
            return;
        /** @type {?} */
        var appBootstrapped$ = this.bootstrap.appBootstrapped$;
        /** @type {?} */
        var state$ = this.context.store.select((/**
         * @param {?} state
         * @return {?}
         */
        function (state) { return state; }));
        appBootstrapped$.subscribe((/**
         * @return {?}
         */
        function () {
            /** @type {?} */
            var eventId;
            /** @type {?} */
            var storeEventId = state$.subscribe((/**
             * @return {?}
             */
            function () {
                // setTimeout used for zone detection after set hmr state
                clearInterval(eventId);
                eventId = window.setTimeout((/**
                 * @return {?}
                 */
                function () {
                    // close check on the message queue
                    storeEventId.unsubscribe();
                    // if events are no longer running on the call stack,
                    // then we can update the state
                    callback(_this.context.createStateContext(), (/** @type {?} */ (_this.storage.snapshot)));
                }), _this.options.deferTime);
            }));
        }));
    };
    return HmrLifecycle;
}());
if (false) {
    /**
     * @type {?}
     * @private
     */
    HmrLifecycle.prototype.ngAppModule;
    /**
     * @type {?}
     * @private
     */
    HmrLifecycle.prototype.bootstrap;
    /**
     * @type {?}
     * @private
     */
    HmrLifecycle.prototype.storage;
    /**
     * @type {?}
     * @private
     */
    HmrLifecycle.prototype.context;
    /**
     * @type {?}
     * @private
     */
    HmrLifecycle.prototype.options;
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * @template T, S
 */
var /**
 * @template T, S
 */
HmrManager = /** @class */ (function () {
    function HmrManager(options, storage) {
        this.storage = storage;
        this.optionsBuilder = new HmrOptionBuilder(options);
    }
    Object.defineProperty(HmrManager.prototype, "applicationRef", {
        get: /**
         * @private
         * @return {?}
         */
        function () {
            return this.ngModule.injector.get(ApplicationRef);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(HmrManager.prototype, "bootstrap", {
        get: /**
         * @private
         * @return {?}
         */
        function () {
            return this.ngModule.injector.get(NgxsBootstrapper);
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @param {?} bootstrapFn
     * @param {?} tick
     * @return {?}
     */
    HmrManager.prototype.hmrModule = /**
     * @param {?} bootstrapFn
     * @param {?} tick
     * @return {?}
     */
    function (bootstrapFn, tick) {
        return __awaiter(this, void 0, void 0, function () {
            var _a;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        InitialState.set(this.storage.snapshot);
                        _a = this;
                        return [4 /*yield*/, bootstrapFn()];
                    case 1:
                        _a.ngModule = _b.sent();
                        this.context = new HmrStateContextFactory(this.ngModule);
                        this.lifecycle = this.createLifecycle();
                        tick();
                        InitialState.pop();
                        return [2 /*return*/, this.ngModule];
                }
            });
        });
    };
    /**
     * @return {?}
     */
    HmrManager.prototype.beforeModuleBootstrap = /**
     * @return {?}
     */
    function () {
        this.lifecycle.hmrNgxsStoreOnInit((/**
         * @param {?} ctx
         * @param {?} state
         * @return {?}
         */
        function (ctx, state) {
            ctx.dispatch(new HmrInitAction(state));
        }));
    };
    /**
     * @return {?}
     */
    HmrManager.prototype.beforeModuleOnDestroy = /**
     * @return {?}
     */
    function () {
        this.optionsBuilder.clearLogs();
        return this.lifecycle.hmrNgxsStoreBeforeOnDestroy();
    };
    /**
     * @return {?}
     */
    HmrManager.prototype.createNewModule = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var removeOldHosts = this.cloneHostsBeforeDestroy();
        this.removeNgStyles();
        this.ngModule.destroy();
        removeOldHosts();
    };
    /**
     * @private
     * @return {?}
     */
    HmrManager.prototype.createLifecycle = /**
     * @private
     * @return {?}
     */
    function () {
        return new HmrLifecycle(this.ngModule.instance, this.bootstrap, this.storage, this.context, this.optionsBuilder);
    };
    /**
     * @private
     * @return {?}
     */
    HmrManager.prototype.cloneHostsBeforeDestroy = /**
     * @private
     * @return {?}
     */
    function () {
        /** @type {?} */
        var elements = this.applicationRef.components.map((/**
         * @param {?} component
         * @return {?}
         */
        function (component) { return component.location.nativeElement; }));
        /** @type {?} */
        var removableList = elements.map((/**
         * @param {?} componentNode
         * @return {?}
         */
        function (componentNode) {
            /** @type {?} */
            var newNode = document.createElement(componentNode.tagName);
            /** @type {?} */
            var parentNode = (/** @type {?} */ (componentNode.parentNode));
            /** @type {?} */
            var currentDisplay = newNode.style.display;
            newNode.style.display = 'none';
            parentNode.insertBefore(newNode, componentNode);
            return (/**
             * @return {?}
             */
            function () {
                newNode.style.display = currentDisplay;
                try {
                    parentNode.removeChild(componentNode);
                }
                catch (_a) { }
            });
        }));
        return (/**
         * @return {?}
         */
        function removeOldHosts() {
            removableList.forEach((/**
             * @param {?} removeOldHost
             * @return {?}
             */
            function (removeOldHost) { return removeOldHost(); }));
        });
    };
    /**
     * @private
     * @return {?}
     */
    HmrManager.prototype.removeNgStyles = /**
     * @private
     * @return {?}
     */
    function () {
        /** @type {?} */
        var head = (/** @type {?} */ (document.head));
        /** @type {?} */
        var styles = Array.from((/** @type {?} */ (head)).querySelectorAll('style'));
        styles
            .filter((/**
         * @param {?} style
         * @return {?}
         */
        function (style) { return style.innerText.includes('_ng'); }))
            .map((/**
         * @param {?} style
         * @return {?}
         */
        function (style) { return (/** @type {?} */ (head)).removeChild(style); }));
    };
    return HmrManager;
}());
if (false) {
    /** @type {?} */
    HmrManager.prototype.storage;
    /** @type {?} */
    HmrManager.prototype.context;
    /** @type {?} */
    HmrManager.prototype.lifecycle;
    /** @type {?} */
    HmrManager.prototype.optionsBuilder;
    /**
     * @type {?}
     * @private
     */
    HmrManager.prototype.ngModule;
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * @template S
 */
var /**
 * @template S
 */
HmrStorage = /** @class */ (function () {
    function HmrStorage(_snapshot) {
        if (_snapshot === void 0) { _snapshot = {}; }
        this._snapshot = _snapshot;
    }
    /**
     * @return {?}
     */
    HmrStorage.prototype.hasData = /**
     * @return {?}
     */
    function () {
        return Object.keys(this._snapshot).length > 0;
    };
    Object.defineProperty(HmrStorage.prototype, "snapshot", {
        get: /**
         * @return {?}
         */
        function () {
            return this._snapshot;
        },
        enumerable: true,
        configurable: true
    });
    return HmrStorage;
}());
if (false) {
    /**
     * @type {?}
     * @private
     */
    HmrStorage.prototype._snapshot;
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * @param {?} value
 * @return {?}
 */
function setHmrReloadedTo(value) {
    if (window["NGXS_HMR_LIFECYCLE_STATUS" /* Status */]) {
        window["NGXS_HMR_LIFECYCLE_STATUS" /* Status */].hmrReloaded = value;
    }
}
/**
 * @return {?}
 */
function markApplicationAsHmrReloaded() {
    window["NGXS_HMR_LIFECYCLE_STATUS" /* Status */] = window["NGXS_HMR_LIFECYCLE_STATUS" /* Status */] || {
        hmrReloaded: false
    };
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * @template T
 * @param {?} webpackModule
 * @param {?} bootstrapFn
 * @param {?=} options
 * @return {?}
 */
function hmr(webpackModule, bootstrapFn, options) {
    if (options === void 0) { options = {}; }
    return __awaiter(this, void 0, void 0, function () {
        /**
         * @record
         */
        function HmrDataTransfer() { }
        var dataTransfer, storage, manager;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    if (!webpackModule.hot) {
                        console.error('Are you using the --hmr flag for ng serve?');
                        throw new Error('HMR is not enabled for webpack-dev-server!');
                    }
                    markApplicationAsHmrReloaded();
                    webpackModule.hot.accept();
                    if (false) {
                        /** @type {?|undefined} */
                        HmrDataTransfer.prototype.snapshot;
                    }
                    dataTransfer = webpackModule.hot.data || {};
                    storage = new HmrStorage(dataTransfer.snapshot || {});
                    manager = new HmrManager(options, storage);
                    return [4 /*yield*/, manager.hmrModule(bootstrapFn, (/**
                         * @return {?}
                         */
                        function () {
                            manager.beforeModuleBootstrap();
                            (/** @type {?} */ (webpackModule.hot)).dispose((/**
                             * @param {?} data
                             * @return {?}
                             */
                            function (data) {
                                setHmrReloadedTo(true);
                                data.snapshot = manager.beforeModuleOnDestroy();
                                manager.createNewModule();
                            }));
                        }))];
                case 1: return [2 /*return*/, _a.sent()];
            }
        });
    });
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * @return {?}
 */
function hmrIsReloaded() {
    return !!(window["NGXS_HMR_LIFECYCLE_STATUS" /* Status */] && window["NGXS_HMR_LIFECYCLE_STATUS" /* Status */].hmrReloaded);
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

export { HmrBeforeDestroyAction, HmrInitAction, hmr, hmrIsReloaded };
//# sourceMappingURL=ngxs-hmr-plugin.js.map
