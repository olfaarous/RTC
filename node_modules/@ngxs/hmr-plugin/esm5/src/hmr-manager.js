/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { ApplicationRef } from '@angular/core';
import { InitialState, NgxsBootstrapper } from '@ngxs/store/internals';
import { HmrStateContextFactory } from './internal/hmr-state-context-factory';
import { HmrOptionBuilder } from './internal/hmr-options-builder';
import { HmrInitAction } from './actions/hmr-init.action';
import { HmrLifecycle } from './internal/hmr-lifecycle';
/**
 * @template T, S
 */
var /**
 * @template T, S
 */
HmrManager = /** @class */ (function () {
    function HmrManager(options, storage) {
        this.storage = storage;
        this.optionsBuilder = new HmrOptionBuilder(options);
    }
    Object.defineProperty(HmrManager.prototype, "applicationRef", {
        get: /**
         * @private
         * @return {?}
         */
        function () {
            return this.ngModule.injector.get(ApplicationRef);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(HmrManager.prototype, "bootstrap", {
        get: /**
         * @private
         * @return {?}
         */
        function () {
            return this.ngModule.injector.get(NgxsBootstrapper);
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @param {?} bootstrapFn
     * @param {?} tick
     * @return {?}
     */
    HmrManager.prototype.hmrModule = /**
     * @param {?} bootstrapFn
     * @param {?} tick
     * @return {?}
     */
    function (bootstrapFn, tick) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var _a;
            return tslib_1.__generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        InitialState.set(this.storage.snapshot);
                        _a = this;
                        return [4 /*yield*/, bootstrapFn()];
                    case 1:
                        _a.ngModule = _b.sent();
                        this.context = new HmrStateContextFactory(this.ngModule);
                        this.lifecycle = this.createLifecycle();
                        tick();
                        InitialState.pop();
                        return [2 /*return*/, this.ngModule];
                }
            });
        });
    };
    /**
     * @return {?}
     */
    HmrManager.prototype.beforeModuleBootstrap = /**
     * @return {?}
     */
    function () {
        this.lifecycle.hmrNgxsStoreOnInit((/**
         * @param {?} ctx
         * @param {?} state
         * @return {?}
         */
        function (ctx, state) {
            ctx.dispatch(new HmrInitAction(state));
        }));
    };
    /**
     * @return {?}
     */
    HmrManager.prototype.beforeModuleOnDestroy = /**
     * @return {?}
     */
    function () {
        this.optionsBuilder.clearLogs();
        return this.lifecycle.hmrNgxsStoreBeforeOnDestroy();
    };
    /**
     * @return {?}
     */
    HmrManager.prototype.createNewModule = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var removeOldHosts = this.cloneHostsBeforeDestroy();
        this.removeNgStyles();
        this.ngModule.destroy();
        removeOldHosts();
    };
    /**
     * @private
     * @return {?}
     */
    HmrManager.prototype.createLifecycle = /**
     * @private
     * @return {?}
     */
    function () {
        return new HmrLifecycle(this.ngModule.instance, this.bootstrap, this.storage, this.context, this.optionsBuilder);
    };
    /**
     * @private
     * @return {?}
     */
    HmrManager.prototype.cloneHostsBeforeDestroy = /**
     * @private
     * @return {?}
     */
    function () {
        /** @type {?} */
        var elements = this.applicationRef.components.map((/**
         * @param {?} component
         * @return {?}
         */
        function (component) { return component.location.nativeElement; }));
        /** @type {?} */
        var removableList = elements.map((/**
         * @param {?} componentNode
         * @return {?}
         */
        function (componentNode) {
            /** @type {?} */
            var newNode = document.createElement(componentNode.tagName);
            /** @type {?} */
            var parentNode = (/** @type {?} */ (componentNode.parentNode));
            /** @type {?} */
            var currentDisplay = newNode.style.display;
            newNode.style.display = 'none';
            parentNode.insertBefore(newNode, componentNode);
            return (/**
             * @return {?}
             */
            function () {
                newNode.style.display = currentDisplay;
                try {
                    parentNode.removeChild(componentNode);
                }
                catch (_a) { }
            });
        }));
        return (/**
         * @return {?}
         */
        function removeOldHosts() {
            removableList.forEach((/**
             * @param {?} removeOldHost
             * @return {?}
             */
            function (removeOldHost) { return removeOldHost(); }));
        });
    };
    /**
     * @private
     * @return {?}
     */
    HmrManager.prototype.removeNgStyles = /**
     * @private
     * @return {?}
     */
    function () {
        /** @type {?} */
        var head = (/** @type {?} */ (document.head));
        /** @type {?} */
        var styles = Array.from((/** @type {?} */ (head)).querySelectorAll('style'));
        styles
            .filter((/**
         * @param {?} style
         * @return {?}
         */
        function (style) { return style.innerText.includes('_ng'); }))
            .map((/**
         * @param {?} style
         * @return {?}
         */
        function (style) { return (/** @type {?} */ (head)).removeChild(style); }));
    };
    return HmrManager;
}());
/**
 * @template T, S
 */
export { HmrManager };
if (false) {
    /** @type {?} */
    HmrManager.prototype.storage;
    /** @type {?} */
    HmrManager.prototype.context;
    /** @type {?} */
    HmrManager.prototype.lifecycle;
    /** @type {?} */
    HmrManager.prototype.optionsBuilder;
    /**
     * @type {?}
     * @private
     */
    HmrManager.prototype.ngModule;
}
//# sourceMappingURL=data:application/json;base64,