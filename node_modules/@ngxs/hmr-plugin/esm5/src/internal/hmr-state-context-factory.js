/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Store } from '@ngxs/store';
import { isStateOperator } from '@ngxs/store/operators';
/**
 * @template T, S
 */
var /**
 * @template T, S
 */
HmrStateContextFactory = /** @class */ (function () {
    function HmrStateContextFactory(module) {
        /** @type {?} */
        var store = module.injector.get(Store, undefined);
        if (!store) {
            throw new Error('Store not found, maybe you forgot to import the NgxsModule');
        }
        this.store = store;
    }
    /**
     * @description
     * must be taken out into  @ngxs/store/internals
     */
    /**
     * \@description
     * must be taken out into  \@ngxs/store/internals
     * @return {?}
     */
    HmrStateContextFactory.prototype.createStateContext = /**
     * \@description
     * must be taken out into  \@ngxs/store/internals
     * @return {?}
     */
    function () {
        var _this = this;
        return {
            dispatch: (/**
             * @param {?} actions
             * @return {?}
             */
            function (actions) { return (/** @type {?} */ (_this.store)).dispatch(actions); }),
            getState: (/**
             * @return {?}
             */
            function () { return (/** @type {?} */ ((/** @type {?} */ (_this.store)).snapshot())); }),
            setState: (/**
             * @param {?} val
             * @return {?}
             */
            function (val) {
                if (isStateOperator(val)) {
                    /** @type {?} */
                    var currentState = (/** @type {?} */ (_this.store)).snapshot();
                    val = val(currentState);
                }
                (/** @type {?} */ (_this.store)).reset(val);
                return (/** @type {?} */ (val));
            }),
            patchState: (/**
             * @param {?} val
             * @return {?}
             */
            function (val) {
                /** @type {?} */
                var currentState = (/** @type {?} */ (_this.store)).snapshot();
                /** @type {?} */
                var newState = tslib_1.__assign({}, currentState, ((/** @type {?} */ (val))));
                (/** @type {?} */ (_this.store)).reset(newState);
                return newState;
            })
        };
    };
    return HmrStateContextFactory;
}());
/**
 * @template T, S
 */
export { HmrStateContextFactory };
if (false) {
    /** @type {?} */
    HmrStateContextFactory.prototype.store;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaG1yLXN0YXRlLWNvbnRleHQtZmFjdG9yeS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BuZ3hzL2htci1wbHVnaW4vIiwic291cmNlcyI6WyJzcmMvaW50ZXJuYWwvaG1yLXN0YXRlLWNvbnRleHQtZmFjdG9yeS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUFBLE9BQU8sRUFBZ0IsS0FBSyxFQUFFLE1BQU0sYUFBYSxDQUFDO0FBQ2xELE9BQU8sRUFBRSxlQUFlLEVBQUUsTUFBTSx1QkFBdUIsQ0FBQzs7OztBQUd4RDs7OztJQUdFLGdDQUFZLE1BQXNCOztZQUMxQixLQUFLLEdBQUcsTUFBTSxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQVEsS0FBSyxFQUFFLFNBQVMsQ0FBQztRQUUxRCxJQUFJLENBQUMsS0FBSyxFQUFFO1lBQ1YsTUFBTSxJQUFJLEtBQUssQ0FBQyw0REFBNEQsQ0FBQyxDQUFDO1NBQy9FO1FBRUQsSUFBSSxDQUFDLEtBQUssR0FBRyxLQUFLLENBQUM7SUFDckIsQ0FBQztJQUVEOzs7T0FHRzs7Ozs7O0lBQ0ksbURBQWtCOzs7OztJQUF6QjtRQUFBLGlCQW9CQztRQW5CQyxPQUFPO1lBQ0wsUUFBUTs7OztZQUFFLFVBQUEsT0FBTyxJQUFJLE9BQUEsbUJBQUEsS0FBSSxDQUFDLEtBQUssRUFBQyxDQUFDLFFBQVEsQ0FBQyxPQUFPLENBQUMsRUFBN0IsQ0FBNkIsQ0FBQTtZQUNsRCxRQUFROzs7WUFBRSxxQkFBTSxtQkFBRyxtQkFBQSxLQUFJLENBQUMsS0FBSyxFQUFDLENBQUMsUUFBUSxFQUFFLEVBQUEsR0FBQSxDQUFBO1lBQ3pDLFFBQVE7Ozs7WUFBRSxVQUFBLEdBQUc7Z0JBQ1gsSUFBSSxlQUFlLENBQUMsR0FBRyxDQUFDLEVBQUU7O3dCQUNsQixZQUFZLEdBQUcsbUJBQUEsS0FBSSxDQUFDLEtBQUssRUFBQyxDQUFDLFFBQVEsRUFBRTtvQkFDM0MsR0FBRyxHQUFHLEdBQUcsQ0FBQyxZQUFZLENBQUMsQ0FBQztpQkFDekI7Z0JBRUQsbUJBQUEsS0FBSSxDQUFDLEtBQUssRUFBQyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQztnQkFDdkIsT0FBTyxtQkFBRyxHQUFHLEVBQUEsQ0FBQztZQUNoQixDQUFDLENBQUE7WUFDRCxVQUFVOzs7O1lBQUUsVUFBQSxHQUFHOztvQkFDUCxZQUFZLEdBQUcsbUJBQUEsS0FBSSxDQUFDLEtBQUssRUFBQyxDQUFDLFFBQVEsRUFBRTs7b0JBQ3JDLFFBQVEsd0JBQVEsWUFBWSxFQUFLLENBQUMsbUJBQVEsR0FBRyxFQUFBLENBQUMsQ0FBRTtnQkFDdEQsbUJBQUEsS0FBSSxDQUFDLEtBQUssRUFBQyxDQUFDLEtBQUssQ0FBQyxRQUFRLENBQUMsQ0FBQztnQkFDNUIsT0FBTyxRQUFRLENBQUM7WUFDbEIsQ0FBQyxDQUFBO1NBQ0YsQ0FBQztJQUNKLENBQUM7SUFDSCw2QkFBQztBQUFELENBQUMsQUF0Q0QsSUFzQ0M7Ozs7Ozs7SUFyQ0MsdUNBQW9CIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgU3RhdGVDb250ZXh0LCBTdG9yZSB9IGZyb20gJ0BuZ3hzL3N0b3JlJztcclxuaW1wb3J0IHsgaXNTdGF0ZU9wZXJhdG9yIH0gZnJvbSAnQG5neHMvc3RvcmUvb3BlcmF0b3JzJztcclxuaW1wb3J0IHsgTmdNb2R1bGVSZWYgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuXHJcbmV4cG9ydCBjbGFzcyBIbXJTdGF0ZUNvbnRleHRGYWN0b3J5PFQsIFM+IHtcclxuICBwdWJsaWMgc3RvcmU6IFN0b3JlO1xyXG5cclxuICBjb25zdHJ1Y3Rvcihtb2R1bGU6IE5nTW9kdWxlUmVmPFQ+KSB7XHJcbiAgICBjb25zdCBzdG9yZSA9IG1vZHVsZS5pbmplY3Rvci5nZXQ8U3RvcmU+KFN0b3JlLCB1bmRlZmluZWQpO1xyXG5cclxuICAgIGlmICghc3RvcmUpIHtcclxuICAgICAgdGhyb3cgbmV3IEVycm9yKCdTdG9yZSBub3QgZm91bmQsIG1heWJlIHlvdSBmb3Jnb3QgdG8gaW1wb3J0IHRoZSBOZ3hzTW9kdWxlJyk7XHJcbiAgICB9XHJcblxyXG4gICAgdGhpcy5zdG9yZSA9IHN0b3JlO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogQGRlc2NyaXB0aW9uXHJcbiAgICogbXVzdCBiZSB0YWtlbiBvdXQgaW50byAgQG5neHMvc3RvcmUvaW50ZXJuYWxzXHJcbiAgICovXHJcbiAgcHVibGljIGNyZWF0ZVN0YXRlQ29udGV4dCgpOiBTdGF0ZUNvbnRleHQ8Uz4ge1xyXG4gICAgcmV0dXJuIHtcclxuICAgICAgZGlzcGF0Y2g6IGFjdGlvbnMgPT4gdGhpcy5zdG9yZSEuZGlzcGF0Y2goYWN0aW9ucyksXHJcbiAgICAgIGdldFN0YXRlOiAoKSA9PiA8Uz50aGlzLnN0b3JlIS5zbmFwc2hvdCgpLFxyXG4gICAgICBzZXRTdGF0ZTogdmFsID0+IHtcclxuICAgICAgICBpZiAoaXNTdGF0ZU9wZXJhdG9yKHZhbCkpIHtcclxuICAgICAgICAgIGNvbnN0IGN1cnJlbnRTdGF0ZSA9IHRoaXMuc3RvcmUhLnNuYXBzaG90KCk7XHJcbiAgICAgICAgICB2YWwgPSB2YWwoY3VycmVudFN0YXRlKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHRoaXMuc3RvcmUhLnJlc2V0KHZhbCk7XHJcbiAgICAgICAgcmV0dXJuIDxTPnZhbDtcclxuICAgICAgfSxcclxuICAgICAgcGF0Y2hTdGF0ZTogdmFsID0+IHtcclxuICAgICAgICBjb25zdCBjdXJyZW50U3RhdGUgPSB0aGlzLnN0b3JlIS5zbmFwc2hvdCgpO1xyXG4gICAgICAgIGNvbnN0IG5ld1N0YXRlID0geyAuLi5jdXJyZW50U3RhdGUsIC4uLig8b2JqZWN0PnZhbCkgfTtcclxuICAgICAgICB0aGlzLnN0b3JlIS5yZXNldChuZXdTdGF0ZSk7XHJcbiAgICAgICAgcmV0dXJuIG5ld1N0YXRlO1xyXG4gICAgICB9XHJcbiAgICB9O1xyXG4gIH1cclxufVxyXG4iXX0=