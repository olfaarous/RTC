/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Store } from '@ngxs/store';
import { isStateOperator } from '@ngxs/store/operators';
/**
 * @template T, S
 */
export class HmrStateContextFactory {
    /**
     * @param {?} module
     */
    constructor(module) {
        /** @type {?} */
        const store = module.injector.get(Store, undefined);
        if (!store) {
            throw new Error('Store not found, maybe you forgot to import the NgxsModule');
        }
        this.store = store;
    }
    /**
     * \@description
     * must be taken out into  \@ngxs/store/internals
     * @return {?}
     */
    createStateContext() {
        return {
            dispatch: (/**
             * @param {?} actions
             * @return {?}
             */
            actions => (/** @type {?} */ (this.store)).dispatch(actions)),
            getState: (/**
             * @return {?}
             */
            () => (/** @type {?} */ ((/** @type {?} */ (this.store)).snapshot()))),
            setState: (/**
             * @param {?} val
             * @return {?}
             */
            val => {
                if (isStateOperator(val)) {
                    /** @type {?} */
                    const currentState = (/** @type {?} */ (this.store)).snapshot();
                    val = val(currentState);
                }
                (/** @type {?} */ (this.store)).reset(val);
                return (/** @type {?} */ (val));
            }),
            patchState: (/**
             * @param {?} val
             * @return {?}
             */
            val => {
                /** @type {?} */
                const currentState = (/** @type {?} */ (this.store)).snapshot();
                /** @type {?} */
                const newState = Object.assign({}, currentState, ((/** @type {?} */ (val))));
                (/** @type {?} */ (this.store)).reset(newState);
                return newState;
            })
        };
    }
}
if (false) {
    /** @type {?} */
    HmrStateContextFactory.prototype.store;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaG1yLXN0YXRlLWNvbnRleHQtZmFjdG9yeS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BuZ3hzL2htci1wbHVnaW4vIiwic291cmNlcyI6WyJzcmMvaW50ZXJuYWwvaG1yLXN0YXRlLWNvbnRleHQtZmFjdG9yeS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFnQixLQUFLLEVBQUUsTUFBTSxhQUFhLENBQUM7QUFDbEQsT0FBTyxFQUFFLGVBQWUsRUFBRSxNQUFNLHVCQUF1QixDQUFDOzs7O0FBR3hELE1BQU0sT0FBTyxzQkFBc0I7Ozs7SUFHakMsWUFBWSxNQUFzQjs7Y0FDMUIsS0FBSyxHQUFHLE1BQU0sQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFRLEtBQUssRUFBRSxTQUFTLENBQUM7UUFFMUQsSUFBSSxDQUFDLEtBQUssRUFBRTtZQUNWLE1BQU0sSUFBSSxLQUFLLENBQUMsNERBQTRELENBQUMsQ0FBQztTQUMvRTtRQUVELElBQUksQ0FBQyxLQUFLLEdBQUcsS0FBSyxDQUFDO0lBQ3JCLENBQUM7Ozs7OztJQU1NLGtCQUFrQjtRQUN2QixPQUFPO1lBQ0wsUUFBUTs7OztZQUFFLE9BQU8sQ0FBQyxFQUFFLENBQUMsbUJBQUEsSUFBSSxDQUFDLEtBQUssRUFBQyxDQUFDLFFBQVEsQ0FBQyxPQUFPLENBQUMsQ0FBQTtZQUNsRCxRQUFROzs7WUFBRSxHQUFHLEVBQUUsQ0FBQyxtQkFBRyxtQkFBQSxJQUFJLENBQUMsS0FBSyxFQUFDLENBQUMsUUFBUSxFQUFFLEVBQUEsQ0FBQTtZQUN6QyxRQUFROzs7O1lBQUUsR0FBRyxDQUFDLEVBQUU7Z0JBQ2QsSUFBSSxlQUFlLENBQUMsR0FBRyxDQUFDLEVBQUU7OzBCQUNsQixZQUFZLEdBQUcsbUJBQUEsSUFBSSxDQUFDLEtBQUssRUFBQyxDQUFDLFFBQVEsRUFBRTtvQkFDM0MsR0FBRyxHQUFHLEdBQUcsQ0FBQyxZQUFZLENBQUMsQ0FBQztpQkFDekI7Z0JBRUQsbUJBQUEsSUFBSSxDQUFDLEtBQUssRUFBQyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQztnQkFDdkIsT0FBTyxtQkFBRyxHQUFHLEVBQUEsQ0FBQztZQUNoQixDQUFDLENBQUE7WUFDRCxVQUFVOzs7O1lBQUUsR0FBRyxDQUFDLEVBQUU7O3NCQUNWLFlBQVksR0FBRyxtQkFBQSxJQUFJLENBQUMsS0FBSyxFQUFDLENBQUMsUUFBUSxFQUFFOztzQkFDckMsUUFBUSxxQkFBUSxZQUFZLEVBQUssQ0FBQyxtQkFBUSxHQUFHLEVBQUEsQ0FBQyxDQUFFO2dCQUN0RCxtQkFBQSxJQUFJLENBQUMsS0FBSyxFQUFDLENBQUMsS0FBSyxDQUFDLFFBQVEsQ0FBQyxDQUFDO2dCQUM1QixPQUFPLFFBQVEsQ0FBQztZQUNsQixDQUFDLENBQUE7U0FDRixDQUFDO0lBQ0osQ0FBQztDQUNGOzs7SUFyQ0MsdUNBQW9CIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgU3RhdGVDb250ZXh0LCBTdG9yZSB9IGZyb20gJ0BuZ3hzL3N0b3JlJztcclxuaW1wb3J0IHsgaXNTdGF0ZU9wZXJhdG9yIH0gZnJvbSAnQG5neHMvc3RvcmUvb3BlcmF0b3JzJztcclxuaW1wb3J0IHsgTmdNb2R1bGVSZWYgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuXHJcbmV4cG9ydCBjbGFzcyBIbXJTdGF0ZUNvbnRleHRGYWN0b3J5PFQsIFM+IHtcclxuICBwdWJsaWMgc3RvcmU6IFN0b3JlO1xyXG5cclxuICBjb25zdHJ1Y3Rvcihtb2R1bGU6IE5nTW9kdWxlUmVmPFQ+KSB7XHJcbiAgICBjb25zdCBzdG9yZSA9IG1vZHVsZS5pbmplY3Rvci5nZXQ8U3RvcmU+KFN0b3JlLCB1bmRlZmluZWQpO1xyXG5cclxuICAgIGlmICghc3RvcmUpIHtcclxuICAgICAgdGhyb3cgbmV3IEVycm9yKCdTdG9yZSBub3QgZm91bmQsIG1heWJlIHlvdSBmb3Jnb3QgdG8gaW1wb3J0IHRoZSBOZ3hzTW9kdWxlJyk7XHJcbiAgICB9XHJcblxyXG4gICAgdGhpcy5zdG9yZSA9IHN0b3JlO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogQGRlc2NyaXB0aW9uXHJcbiAgICogbXVzdCBiZSB0YWtlbiBvdXQgaW50byAgQG5neHMvc3RvcmUvaW50ZXJuYWxzXHJcbiAgICovXHJcbiAgcHVibGljIGNyZWF0ZVN0YXRlQ29udGV4dCgpOiBTdGF0ZUNvbnRleHQ8Uz4ge1xyXG4gICAgcmV0dXJuIHtcclxuICAgICAgZGlzcGF0Y2g6IGFjdGlvbnMgPT4gdGhpcy5zdG9yZSEuZGlzcGF0Y2goYWN0aW9ucyksXHJcbiAgICAgIGdldFN0YXRlOiAoKSA9PiA8Uz50aGlzLnN0b3JlIS5zbmFwc2hvdCgpLFxyXG4gICAgICBzZXRTdGF0ZTogdmFsID0+IHtcclxuICAgICAgICBpZiAoaXNTdGF0ZU9wZXJhdG9yKHZhbCkpIHtcclxuICAgICAgICAgIGNvbnN0IGN1cnJlbnRTdGF0ZSA9IHRoaXMuc3RvcmUhLnNuYXBzaG90KCk7XHJcbiAgICAgICAgICB2YWwgPSB2YWwoY3VycmVudFN0YXRlKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHRoaXMuc3RvcmUhLnJlc2V0KHZhbCk7XHJcbiAgICAgICAgcmV0dXJuIDxTPnZhbDtcclxuICAgICAgfSxcclxuICAgICAgcGF0Y2hTdGF0ZTogdmFsID0+IHtcclxuICAgICAgICBjb25zdCBjdXJyZW50U3RhdGUgPSB0aGlzLnN0b3JlIS5zbmFwc2hvdCgpO1xyXG4gICAgICAgIGNvbnN0IG5ld1N0YXRlID0geyAuLi5jdXJyZW50U3RhdGUsIC4uLig8b2JqZWN0PnZhbCkgfTtcclxuICAgICAgICB0aGlzLnN0b3JlIS5yZXNldChuZXdTdGF0ZSk7XHJcbiAgICAgICAgcmV0dXJuIG5ld1N0YXRlO1xyXG4gICAgICB9XHJcbiAgICB9O1xyXG4gIH1cclxufVxyXG4iXX0=