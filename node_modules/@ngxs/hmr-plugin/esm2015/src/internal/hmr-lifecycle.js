/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { HmrBeforeDestroyAction } from '../actions/hmr-before-destroy.action';
/**
 * @template T, S
 */
export class HmrLifecycle {
    /**
     * @param {?} ngAppModule
     * @param {?} bootstrap
     * @param {?} storage
     * @param {?} context
     * @param {?} options
     */
    constructor(ngAppModule, bootstrap, storage, context, options) {
        this.ngAppModule = ngAppModule;
        this.bootstrap = bootstrap;
        this.storage = storage;
        this.context = context;
        this.options = options;
    }
    /**
     * @param {?} hmrAfterOnInit
     * @return {?}
     */
    hmrNgxsStoreOnInit(hmrAfterOnInit) {
        /** @type {?} */
        let moduleHmrInit = this.getModuleHmrInitCallback();
        moduleHmrInit = moduleHmrInit.bind(this.ngAppModule);
        this.stateEventLoop((/**
         * @param {?} ctx
         * @param {?} state
         * @return {?}
         */
        (ctx, state) => {
            moduleHmrInit(ctx, state);
            hmrAfterOnInit(ctx, state);
        }));
    }
    /**
     * @private
     * @return {?}
     */
    getModuleHmrInitCallback() {
        if (typeof this.ngAppModule.hmrNgxsStoreOnInit === 'function') {
            return this.ngAppModule.hmrNgxsStoreOnInit;
        }
        return (/**
         * @param {?} ctx
         * @param {?} state
         * @return {?}
         */
        function defaultModuleHmrInit(ctx, state) {
            ctx.patchState(state);
        });
    }
    /**
     * @return {?}
     */
    hmrNgxsStoreBeforeOnDestroy() {
        /** @type {?} */
        let state = {};
        /** @type {?} */
        const ctx = this.context.createStateContext();
        if (typeof this.ngAppModule.hmrNgxsStoreBeforeOnDestroy === 'function') {
            state = this.ngAppModule.hmrNgxsStoreBeforeOnDestroy(ctx);
        }
        else {
            state = ctx.getState();
        }
        ctx.dispatch(new HmrBeforeDestroyAction(state));
        return state;
    }
    /**
     * @private
     * @param {?} callback
     * @return {?}
     */
    stateEventLoop(callback) {
        if (!this.storage.hasData())
            return;
        /** @type {?} */
        const appBootstrapped$ = this.bootstrap.appBootstrapped$;
        /** @type {?} */
        const state$ = this.context.store.select((/**
         * @param {?} state
         * @return {?}
         */
        state => state));
        appBootstrapped$.subscribe((/**
         * @return {?}
         */
        () => {
            /** @type {?} */
            let eventId;
            /** @type {?} */
            const storeEventId = state$.subscribe((/**
             * @return {?}
             */
            () => {
                // setTimeout used for zone detection after set hmr state
                clearInterval(eventId);
                eventId = window.setTimeout((/**
                 * @return {?}
                 */
                () => {
                    // close check on the message queue
                    storeEventId.unsubscribe();
                    // if events are no longer running on the call stack,
                    // then we can update the state
                    callback(this.context.createStateContext(), (/** @type {?} */ (this.storage.snapshot)));
                }), this.options.deferTime);
            }));
        }));
    }
}
if (false) {
    /**
     * @type {?}
     * @private
     */
    HmrLifecycle.prototype.ngAppModule;
    /**
     * @type {?}
     * @private
     */
    HmrLifecycle.prototype.bootstrap;
    /**
     * @type {?}
     * @private
     */
    HmrLifecycle.prototype.storage;
    /**
     * @type {?}
     * @private
     */
    HmrLifecycle.prototype.context;
    /**
     * @type {?}
     * @private
     */
    HmrLifecycle.prototype.options;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaG1yLWxpZmVjeWNsZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BuZ3hzL2htci1wbHVnaW4vIiwic291cmNlcyI6WyJzcmMvaW50ZXJuYWwvaG1yLWxpZmVjeWNsZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBT0EsT0FBTyxFQUFFLHNCQUFzQixFQUFFLE1BQU0sc0NBQXNDLENBQUM7Ozs7QUFHOUUsTUFBTSxPQUFPLFlBQVk7Ozs7Ozs7O0lBQ3ZCLFlBQ1UsV0FBYyxFQUNkLFNBQTJCLEVBQzNCLE9BQXNCLEVBQ3RCLE9BQXFDLEVBQ3JDLE9BQXlCO1FBSnpCLGdCQUFXLEdBQVgsV0FBVyxDQUFHO1FBQ2QsY0FBUyxHQUFULFNBQVMsQ0FBa0I7UUFDM0IsWUFBTyxHQUFQLE9BQU8sQ0FBZTtRQUN0QixZQUFPLEdBQVAsT0FBTyxDQUE4QjtRQUNyQyxZQUFPLEdBQVAsT0FBTyxDQUFrQjtJQUNoQyxDQUFDOzs7OztJQUVHLGtCQUFrQixDQUFDLGNBQThCOztZQUNsRCxhQUFhLEdBQW1CLElBQUksQ0FBQyx3QkFBd0IsRUFBRTtRQUNuRSxhQUFhLEdBQUcsYUFBYSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLENBQUM7UUFDckQsSUFBSSxDQUFDLGNBQWM7Ozs7O1FBQUMsQ0FBQyxHQUFHLEVBQUUsS0FBSyxFQUFFLEVBQUU7WUFDakMsYUFBYSxDQUFDLEdBQUcsRUFBRSxLQUFLLENBQUMsQ0FBQztZQUMxQixjQUFjLENBQUMsR0FBRyxFQUFFLEtBQUssQ0FBQyxDQUFDO1FBQzdCLENBQUMsRUFBQyxDQUFDO0lBQ0wsQ0FBQzs7Ozs7SUFFTyx3QkFBd0I7UUFDOUIsSUFBSSxPQUFPLElBQUksQ0FBQyxXQUFXLENBQUMsa0JBQWtCLEtBQUssVUFBVSxFQUFFO1lBQzdELE9BQU8sSUFBSSxDQUFDLFdBQVcsQ0FBQyxrQkFBa0IsQ0FBQztTQUM1QztRQUNEOzs7OztRQUFPLFNBQVMsb0JBQW9CLENBQUMsR0FBRyxFQUFFLEtBQUs7WUFDN0MsR0FBRyxDQUFDLFVBQVUsQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUN4QixDQUFDLEVBQUM7SUFDSixDQUFDOzs7O0lBRU0sMkJBQTJCOztZQUM1QixLQUFLLEdBQWUsRUFBRTs7Y0FDcEIsR0FBRyxHQUFvQixJQUFJLENBQUMsT0FBTyxDQUFDLGtCQUFrQixFQUFFO1FBQzlELElBQUksT0FBTyxJQUFJLENBQUMsV0FBVyxDQUFDLDJCQUEyQixLQUFLLFVBQVUsRUFBRTtZQUN0RSxLQUFLLEdBQUcsSUFBSSxDQUFDLFdBQVcsQ0FBQywyQkFBMkIsQ0FBQyxHQUFHLENBQUMsQ0FBQztTQUMzRDthQUFNO1lBQ0wsS0FBSyxHQUFHLEdBQUcsQ0FBQyxRQUFRLEVBQUUsQ0FBQztTQUN4QjtRQUVELEdBQUcsQ0FBQyxRQUFRLENBQUMsSUFBSSxzQkFBc0IsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDO1FBQ2hELE9BQU8sS0FBSyxDQUFDO0lBQ2YsQ0FBQzs7Ozs7O0lBRU8sY0FBYyxDQUFDLFFBQXdCO1FBQzdDLElBQUksQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLE9BQU8sRUFBRTtZQUFFLE9BQU87O2NBRTlCLGdCQUFnQixHQUF3QixJQUFJLENBQUMsU0FBUyxDQUFDLGdCQUFnQjs7Y0FDdkUsTUFBTSxHQUFvQixJQUFJLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxNQUFNOzs7O1FBQUMsS0FBSyxDQUFDLEVBQUUsQ0FBQyxLQUFLLEVBQUM7UUFFekUsZ0JBQWdCLENBQUMsU0FBUzs7O1FBQUMsR0FBRyxFQUFFOztnQkFDMUIsT0FBZTs7a0JBQ2IsWUFBWSxHQUFpQixNQUFNLENBQUMsU0FBUzs7O1lBQUMsR0FBRyxFQUFFO2dCQUN2RCx5REFBeUQ7Z0JBQ3pELGFBQWEsQ0FBQyxPQUFPLENBQUMsQ0FBQztnQkFDdkIsT0FBTyxHQUFHLE1BQU0sQ0FBQyxVQUFVOzs7Z0JBQUMsR0FBRyxFQUFFO29CQUMvQixtQ0FBbUM7b0JBQ25DLFlBQVksQ0FBQyxXQUFXLEVBQUUsQ0FBQztvQkFDM0IscURBQXFEO29CQUNyRCwrQkFBK0I7b0JBQy9CLFFBQVEsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLGtCQUFrQixFQUFFLEVBQUUsbUJBQUEsSUFBSSxDQUFDLE9BQU8sQ0FBQyxRQUFRLEVBQWMsQ0FBQyxDQUFDO2dCQUNuRixDQUFDLEdBQUUsSUFBSSxDQUFDLE9BQU8sQ0FBQyxTQUFTLENBQUMsQ0FBQztZQUM3QixDQUFDLEVBQUM7UUFDSixDQUFDLEVBQUMsQ0FBQztJQUNMLENBQUM7Q0FDRjs7Ozs7O0lBM0RHLG1DQUFzQjs7Ozs7SUFDdEIsaUNBQW1DOzs7OztJQUNuQywrQkFBOEI7Ozs7O0lBQzlCLCtCQUE2Qzs7Ozs7SUFDN0MsK0JBQWlDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTmd4c0Jvb3RzdHJhcHBlciB9IGZyb20gJ0BuZ3hzL3N0b3JlL2ludGVybmFscyc7XHJcbmltcG9ydCB7IE9ic2VydmFibGUsIFN1YnNjcmlwdGlvbiB9IGZyb20gJ3J4anMnO1xyXG5pbXBvcnQgeyBTdGF0ZUNvbnRleHQgfSBmcm9tICdAbmd4cy9zdG9yZSc7XHJcblxyXG5pbXBvcnQgeyBIbXJPcHRpb25CdWlsZGVyIH0gZnJvbSAnLi9obXItb3B0aW9ucy1idWlsZGVyJztcclxuaW1wb3J0IHsgSG1yQ2FsbGJhY2ssIE5neHNIbXJMaWZlQ3ljbGUgfSBmcm9tICcuLi9zeW1ib2xzJztcclxuaW1wb3J0IHsgSG1yU3RhdGVDb250ZXh0RmFjdG9yeSB9IGZyb20gJy4vaG1yLXN0YXRlLWNvbnRleHQtZmFjdG9yeSc7XHJcbmltcG9ydCB7IEhtckJlZm9yZURlc3Ryb3lBY3Rpb24gfSBmcm9tICcuLi9hY3Rpb25zL2htci1iZWZvcmUtZGVzdHJveS5hY3Rpb24nO1xyXG5pbXBvcnQgeyBIbXJTdG9yYWdlIH0gZnJvbSAnLi9obXItc3RvcmFnZSc7XHJcblxyXG5leHBvcnQgY2xhc3MgSG1yTGlmZWN5Y2xlPFQgZXh0ZW5kcyBQYXJ0aWFsPE5neHNIbXJMaWZlQ3ljbGU8Uz4+LCBTPiB7XHJcbiAgY29uc3RydWN0b3IoXHJcbiAgICBwcml2YXRlIG5nQXBwTW9kdWxlOiBULFxyXG4gICAgcHJpdmF0ZSBib290c3RyYXA6IE5neHNCb290c3RyYXBwZXIsXHJcbiAgICBwcml2YXRlIHN0b3JhZ2U6IEhtclN0b3JhZ2U8Uz4sXHJcbiAgICBwcml2YXRlIGNvbnRleHQ6IEhtclN0YXRlQ29udGV4dEZhY3Rvcnk8VCwgUz4sXHJcbiAgICBwcml2YXRlIG9wdGlvbnM6IEhtck9wdGlvbkJ1aWxkZXJcclxuICApIHt9XHJcblxyXG4gIHB1YmxpYyBobXJOZ3hzU3RvcmVPbkluaXQoaG1yQWZ0ZXJPbkluaXQ6IEhtckNhbGxiYWNrPFM+KSB7XHJcbiAgICBsZXQgbW9kdWxlSG1ySW5pdDogSG1yQ2FsbGJhY2s8Uz4gPSB0aGlzLmdldE1vZHVsZUhtckluaXRDYWxsYmFjaygpO1xyXG4gICAgbW9kdWxlSG1ySW5pdCA9IG1vZHVsZUhtckluaXQuYmluZCh0aGlzLm5nQXBwTW9kdWxlKTtcclxuICAgIHRoaXMuc3RhdGVFdmVudExvb3AoKGN0eCwgc3RhdGUpID0+IHtcclxuICAgICAgbW9kdWxlSG1ySW5pdChjdHgsIHN0YXRlKTtcclxuICAgICAgaG1yQWZ0ZXJPbkluaXQoY3R4LCBzdGF0ZSk7XHJcbiAgICB9KTtcclxuICB9XHJcblxyXG4gIHByaXZhdGUgZ2V0TW9kdWxlSG1ySW5pdENhbGxiYWNrKCk6IEhtckNhbGxiYWNrPFM+IHtcclxuICAgIGlmICh0eXBlb2YgdGhpcy5uZ0FwcE1vZHVsZS5obXJOZ3hzU3RvcmVPbkluaXQgPT09ICdmdW5jdGlvbicpIHtcclxuICAgICAgcmV0dXJuIHRoaXMubmdBcHBNb2R1bGUuaG1yTmd4c1N0b3JlT25Jbml0O1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIGZ1bmN0aW9uIGRlZmF1bHRNb2R1bGVIbXJJbml0KGN0eCwgc3RhdGUpIHtcclxuICAgICAgY3R4LnBhdGNoU3RhdGUoc3RhdGUpO1xyXG4gICAgfTtcclxuICB9XHJcblxyXG4gIHB1YmxpYyBobXJOZ3hzU3RvcmVCZWZvcmVPbkRlc3Ryb3koKTogUGFydGlhbDxTPiB7XHJcbiAgICBsZXQgc3RhdGU6IFBhcnRpYWw8Uz4gPSB7fTtcclxuICAgIGNvbnN0IGN0eDogU3RhdGVDb250ZXh0PFM+ID0gdGhpcy5jb250ZXh0LmNyZWF0ZVN0YXRlQ29udGV4dCgpO1xyXG4gICAgaWYgKHR5cGVvZiB0aGlzLm5nQXBwTW9kdWxlLmhtck5neHNTdG9yZUJlZm9yZU9uRGVzdHJveSA9PT0gJ2Z1bmN0aW9uJykge1xyXG4gICAgICBzdGF0ZSA9IHRoaXMubmdBcHBNb2R1bGUuaG1yTmd4c1N0b3JlQmVmb3JlT25EZXN0cm95KGN0eCk7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICBzdGF0ZSA9IGN0eC5nZXRTdGF0ZSgpO1xyXG4gICAgfVxyXG5cclxuICAgIGN0eC5kaXNwYXRjaChuZXcgSG1yQmVmb3JlRGVzdHJveUFjdGlvbihzdGF0ZSkpO1xyXG4gICAgcmV0dXJuIHN0YXRlO1xyXG4gIH1cclxuXHJcbiAgcHJpdmF0ZSBzdGF0ZUV2ZW50TG9vcChjYWxsYmFjazogSG1yQ2FsbGJhY2s8Uz4pOiB2b2lkIHtcclxuICAgIGlmICghdGhpcy5zdG9yYWdlLmhhc0RhdGEoKSkgcmV0dXJuO1xyXG5cclxuICAgIGNvbnN0IGFwcEJvb3RzdHJhcHBlZCQ6IE9ic2VydmFibGU8Ym9vbGVhbj4gPSB0aGlzLmJvb3RzdHJhcC5hcHBCb290c3RyYXBwZWQkO1xyXG4gICAgY29uc3Qgc3RhdGUkOiBPYnNlcnZhYmxlPGFueT4gPSB0aGlzLmNvbnRleHQuc3RvcmUuc2VsZWN0KHN0YXRlID0+IHN0YXRlKTtcclxuXHJcbiAgICBhcHBCb290c3RyYXBwZWQkLnN1YnNjcmliZSgoKSA9PiB7XHJcbiAgICAgIGxldCBldmVudElkOiBudW1iZXI7XHJcbiAgICAgIGNvbnN0IHN0b3JlRXZlbnRJZDogU3Vic2NyaXB0aW9uID0gc3RhdGUkLnN1YnNjcmliZSgoKSA9PiB7XHJcbiAgICAgICAgLy8gc2V0VGltZW91dCB1c2VkIGZvciB6b25lIGRldGVjdGlvbiBhZnRlciBzZXQgaG1yIHN0YXRlXHJcbiAgICAgICAgY2xlYXJJbnRlcnZhbChldmVudElkKTtcclxuICAgICAgICBldmVudElkID0gd2luZG93LnNldFRpbWVvdXQoKCkgPT4ge1xyXG4gICAgICAgICAgLy8gY2xvc2UgY2hlY2sgb24gdGhlIG1lc3NhZ2UgcXVldWVcclxuICAgICAgICAgIHN0b3JlRXZlbnRJZC51bnN1YnNjcmliZSgpO1xyXG4gICAgICAgICAgLy8gaWYgZXZlbnRzIGFyZSBubyBsb25nZXIgcnVubmluZyBvbiB0aGUgY2FsbCBzdGFjayxcclxuICAgICAgICAgIC8vIHRoZW4gd2UgY2FuIHVwZGF0ZSB0aGUgc3RhdGVcclxuICAgICAgICAgIGNhbGxiYWNrKHRoaXMuY29udGV4dC5jcmVhdGVTdGF0ZUNvbnRleHQoKSwgdGhpcy5zdG9yYWdlLnNuYXBzaG90IGFzIFBhcnRpYWw8Uz4pO1xyXG4gICAgICAgIH0sIHRoaXMub3B0aW9ucy5kZWZlclRpbWUpO1xyXG4gICAgICB9KTtcclxuICAgIH0pO1xyXG4gIH1cclxufVxyXG4iXX0=