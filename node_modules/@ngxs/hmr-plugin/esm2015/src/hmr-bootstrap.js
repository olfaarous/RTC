/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { HmrManager } from './hmr-manager';
import { HmrStorage } from './internal/hmr-storage';
import { markApplicationAsHmrReloaded, setHmrReloadedTo } from './utils/internals';
/**
 * @template T
 * @param {?} webpackModule
 * @param {?} bootstrapFn
 * @param {?=} options
 * @return {?}
 */
export function hmr(webpackModule, bootstrapFn, options = {}) {
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
        if (!webpackModule.hot) {
            console.error('Are you using the --hmr flag for ng serve?');
            throw new Error('HMR is not enabled for webpack-dev-server!');
        }
        markApplicationAsHmrReloaded();
        webpackModule.hot.accept();
        /**
         * @record
         */
        function HmrDataTransfer() { }
        if (false) {
            /** @type {?|undefined} */
            HmrDataTransfer.prototype.snapshot;
        }
        /** @type {?} */
        const dataTransfer = webpackModule.hot.data || {};
        /** @type {?} */
        const storage = new HmrStorage(dataTransfer.snapshot || {});
        /** @type {?} */
        const manager = new HmrManager(options, storage);
        return yield manager.hmrModule(bootstrapFn, (/**
         * @return {?}
         */
        () => {
            manager.beforeModuleBootstrap();
            (/** @type {?} */ (webpackModule.hot)).dispose((/**
             * @param {?} data
             * @return {?}
             */
            (data) => {
                setHmrReloadedTo(true);
                data.snapshot = manager.beforeModuleOnDestroy();
                manager.createNewModule();
            }));
        }));
    });
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaG1yLWJvb3RzdHJhcC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BuZ3hzL2htci1wbHVnaW4vIiwic291cmNlcyI6WyJzcmMvaG1yLWJvb3RzdHJhcC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUNBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFFM0MsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLHdCQUF3QixDQUFDO0FBQ3BELE9BQU8sRUFBRSw0QkFBNEIsRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLG1CQUFtQixDQUFDOzs7Ozs7OztBQUVuRixNQUFNLFVBQWdCLEdBQUcsQ0FDdkIsYUFBNEIsRUFDNUIsV0FBaUMsRUFDakMsVUFBMEIsRUFBRTs7UUFFNUIsSUFBSSxDQUFDLGFBQWEsQ0FBQyxHQUFHLEVBQUU7WUFDdEIsT0FBTyxDQUFDLEtBQUssQ0FBQyw0Q0FBNEMsQ0FBQyxDQUFDO1lBQzVELE1BQU0sSUFBSSxLQUFLLENBQUMsNENBQTRDLENBQUMsQ0FBQztTQUMvRDtRQUVELDRCQUE0QixFQUFFLENBQUM7UUFFL0IsYUFBYSxDQUFDLEdBQUcsQ0FBQyxNQUFNLEVBQUUsQ0FBQzs7OztRQUUzQiw4QkFFQzs7O1lBREMsbUNBQWU7OztjQUVYLFlBQVksR0FBb0IsYUFBYSxDQUFDLEdBQUcsQ0FBQyxJQUFJLElBQUksRUFBRTs7Y0FFNUQsT0FBTyxHQUFHLElBQUksVUFBVSxDQUFNLFlBQVksQ0FBQyxRQUFRLElBQUksRUFBRSxDQUFDOztjQUMxRCxPQUFPLEdBQUcsSUFBSSxVQUFVLENBQUksT0FBTyxFQUFFLE9BQU8sQ0FBQztRQUVuRCxPQUFPLE1BQU0sT0FBTyxDQUFDLFNBQVMsQ0FBQyxXQUFXOzs7UUFBRSxHQUFHLEVBQUU7WUFDL0MsT0FBTyxDQUFDLHFCQUFxQixFQUFFLENBQUM7WUFFaEMsbUJBQUEsYUFBYSxDQUFDLEdBQUcsRUFBQyxDQUFDLE9BQU87Ozs7WUFBQyxDQUFDLElBQXFCLEVBQUUsRUFBRTtnQkFDbkQsZ0JBQWdCLENBQUMsSUFBSSxDQUFDLENBQUM7Z0JBQ3ZCLElBQUksQ0FBQyxRQUFRLEdBQUcsT0FBTyxDQUFDLHFCQUFxQixFQUFFLENBQUM7Z0JBQ2hELE9BQU8sQ0FBQyxlQUFlLEVBQUUsQ0FBQztZQUM1QixDQUFDLEVBQUMsQ0FBQztRQUNMLENBQUMsRUFBQyxDQUFDO0lBQ0wsQ0FBQztDQUFBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTmdNb2R1bGVSZWYgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgSG1yTWFuYWdlciB9IGZyb20gJy4vaG1yLW1hbmFnZXInO1xyXG5pbXBvcnQgeyBCb290c3RyYXBNb2R1bGVGbiwgTmd4c0htck9wdGlvbnMsIFdlYnBhY2tNb2R1bGUgfSBmcm9tICcuL3N5bWJvbHMnO1xyXG5pbXBvcnQgeyBIbXJTdG9yYWdlIH0gZnJvbSAnLi9pbnRlcm5hbC9obXItc3RvcmFnZSc7XHJcbmltcG9ydCB7IG1hcmtBcHBsaWNhdGlvbkFzSG1yUmVsb2FkZWQsIHNldEhtclJlbG9hZGVkVG8gfSBmcm9tICcuL3V0aWxzL2ludGVybmFscyc7XHJcblxyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gaG1yPFQ+KFxyXG4gIHdlYnBhY2tNb2R1bGU6IFdlYnBhY2tNb2R1bGUsXHJcbiAgYm9vdHN0cmFwRm46IEJvb3RzdHJhcE1vZHVsZUZuPFQ+LFxyXG4gIG9wdGlvbnM6IE5neHNIbXJPcHRpb25zID0ge31cclxuKTogUHJvbWlzZTxOZ01vZHVsZVJlZjxUPj4ge1xyXG4gIGlmICghd2VicGFja01vZHVsZS5ob3QpIHtcclxuICAgIGNvbnNvbGUuZXJyb3IoJ0FyZSB5b3UgdXNpbmcgdGhlIC0taG1yIGZsYWcgZm9yIG5nIHNlcnZlPycpO1xyXG4gICAgdGhyb3cgbmV3IEVycm9yKCdITVIgaXMgbm90IGVuYWJsZWQgZm9yIHdlYnBhY2stZGV2LXNlcnZlciEnKTtcclxuICB9XHJcblxyXG4gIG1hcmtBcHBsaWNhdGlvbkFzSG1yUmVsb2FkZWQoKTtcclxuXHJcbiAgd2VicGFja01vZHVsZS5ob3QuYWNjZXB0KCk7XHJcblxyXG4gIGludGVyZmFjZSBIbXJEYXRhVHJhbnNmZXIge1xyXG4gICAgc25hcHNob3Q/OiBhbnk7XHJcbiAgfVxyXG4gIGNvbnN0IGRhdGFUcmFuc2ZlcjogSG1yRGF0YVRyYW5zZmVyID0gd2VicGFja01vZHVsZS5ob3QuZGF0YSB8fCB7fTtcclxuXHJcbiAgY29uc3Qgc3RvcmFnZSA9IG5ldyBIbXJTdG9yYWdlPGFueT4oZGF0YVRyYW5zZmVyLnNuYXBzaG90IHx8IHt9KTtcclxuICBjb25zdCBtYW5hZ2VyID0gbmV3IEhtck1hbmFnZXI8VD4ob3B0aW9ucywgc3RvcmFnZSk7XHJcblxyXG4gIHJldHVybiBhd2FpdCBtYW5hZ2VyLmhtck1vZHVsZShib290c3RyYXBGbiwgKCkgPT4ge1xyXG4gICAgbWFuYWdlci5iZWZvcmVNb2R1bGVCb290c3RyYXAoKTtcclxuXHJcbiAgICB3ZWJwYWNrTW9kdWxlLmhvdCEuZGlzcG9zZSgoZGF0YTogSG1yRGF0YVRyYW5zZmVyKSA9PiB7XHJcbiAgICAgIHNldEhtclJlbG9hZGVkVG8odHJ1ZSk7XHJcbiAgICAgIGRhdGEuc25hcHNob3QgPSBtYW5hZ2VyLmJlZm9yZU1vZHVsZU9uRGVzdHJveSgpO1xyXG4gICAgICBtYW5hZ2VyLmNyZWF0ZU5ld01vZHVsZSgpO1xyXG4gICAgfSk7XHJcbiAgfSk7XHJcbn1cclxuIl19