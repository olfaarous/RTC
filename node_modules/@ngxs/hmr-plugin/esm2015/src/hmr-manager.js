/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { ApplicationRef } from '@angular/core';
import { InitialState, NgxsBootstrapper } from '@ngxs/store/internals';
import { HmrStateContextFactory } from './internal/hmr-state-context-factory';
import { HmrOptionBuilder } from './internal/hmr-options-builder';
import { HmrInitAction } from './actions/hmr-init.action';
import { HmrLifecycle } from './internal/hmr-lifecycle';
/**
 * @template T, S
 */
export class HmrManager {
    /**
     * @param {?} options
     * @param {?} storage
     */
    constructor(options, storage) {
        this.storage = storage;
        this.optionsBuilder = new HmrOptionBuilder(options);
    }
    /**
     * @private
     * @return {?}
     */
    get applicationRef() {
        return this.ngModule.injector.get(ApplicationRef);
    }
    /**
     * @private
     * @return {?}
     */
    get bootstrap() {
        return this.ngModule.injector.get(NgxsBootstrapper);
    }
    /**
     * @param {?} bootstrapFn
     * @param {?} tick
     * @return {?}
     */
    hmrModule(bootstrapFn, tick) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            InitialState.set(this.storage.snapshot);
            this.ngModule = yield bootstrapFn();
            this.context = new HmrStateContextFactory(this.ngModule);
            this.lifecycle = this.createLifecycle();
            tick();
            InitialState.pop();
            return this.ngModule;
        });
    }
    /**
     * @return {?}
     */
    beforeModuleBootstrap() {
        this.lifecycle.hmrNgxsStoreOnInit((/**
         * @param {?} ctx
         * @param {?} state
         * @return {?}
         */
        (ctx, state) => {
            ctx.dispatch(new HmrInitAction(state));
        }));
    }
    /**
     * @return {?}
     */
    beforeModuleOnDestroy() {
        this.optionsBuilder.clearLogs();
        return this.lifecycle.hmrNgxsStoreBeforeOnDestroy();
    }
    /**
     * @return {?}
     */
    createNewModule() {
        /** @type {?} */
        const removeOldHosts = this.cloneHostsBeforeDestroy();
        this.removeNgStyles();
        this.ngModule.destroy();
        removeOldHosts();
    }
    /**
     * @private
     * @return {?}
     */
    createLifecycle() {
        return new HmrLifecycle(this.ngModule.instance, this.bootstrap, this.storage, this.context, this.optionsBuilder);
    }
    /**
     * @private
     * @return {?}
     */
    cloneHostsBeforeDestroy() {
        /** @type {?} */
        const elements = this.applicationRef.components.map((/**
         * @param {?} component
         * @return {?}
         */
        (component) => component.location.nativeElement));
        /** @type {?} */
        const removableList = elements.map((/**
         * @param {?} componentNode
         * @return {?}
         */
        (componentNode) => {
            /** @type {?} */
            const newNode = document.createElement(componentNode.tagName);
            /** @type {?} */
            const parentNode = (/** @type {?} */ (componentNode.parentNode));
            /** @type {?} */
            const currentDisplay = newNode.style.display;
            newNode.style.display = 'none';
            parentNode.insertBefore(newNode, componentNode);
            return (/**
             * @return {?}
             */
            () => {
                newNode.style.display = currentDisplay;
                try {
                    parentNode.removeChild(componentNode);
                }
                catch (_a) { }
            });
        }));
        return (/**
         * @return {?}
         */
        function removeOldHosts() {
            removableList.forEach((/**
             * @param {?} removeOldHost
             * @return {?}
             */
            (removeOldHost) => removeOldHost()));
        });
    }
    /**
     * @private
     * @return {?}
     */
    removeNgStyles() {
        /** @type {?} */
        const head = (/** @type {?} */ (document.head));
        /** @type {?} */
        const styles = Array.from((/** @type {?} */ (head)).querySelectorAll('style'));
        styles
            .filter((/**
         * @param {?} style
         * @return {?}
         */
        (style) => style.innerText.includes('_ng')))
            .map((/**
         * @param {?} style
         * @return {?}
         */
        (style) => (/** @type {?} */ (head)).removeChild(style)));
    }
}
if (false) {
    /** @type {?} */
    HmrManager.prototype.storage;
    /** @type {?} */
    HmrManager.prototype.context;
    /** @type {?} */
    HmrManager.prototype.lifecycle;
    /** @type {?} */
    HmrManager.prototype.optionsBuilder;
    /**
     * @type {?}
     * @private
     */
    HmrManager.prototype.ngModule;
}
//# sourceMappingURL=data:application/json;base64,