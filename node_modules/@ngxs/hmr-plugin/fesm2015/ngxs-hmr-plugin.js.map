{"version":3,"file":"ngxs-hmr-plugin.js","sources":["ng://@ngxs/hmr-plugin/src/actions/hmr-init.action.ts","ng://@ngxs/hmr-plugin/src/actions/hmr-before-destroy.action.ts","ng://@ngxs/hmr-plugin/src/internal/hmr-state-context-factory.ts","ng://@ngxs/hmr-plugin/src/internal/hmr-options-builder.ts","ng://@ngxs/hmr-plugin/src/internal/hmr-lifecycle.ts","ng://@ngxs/hmr-plugin/src/hmr-manager.ts","ng://@ngxs/hmr-plugin/src/internal/hmr-storage.ts","ng://@ngxs/hmr-plugin/src/utils/internals.ts","ng://@ngxs/hmr-plugin/src/hmr-bootstrap.ts","ng://@ngxs/hmr-plugin/src/utils/externals.ts"],"sourcesContent":["import { NgxsHmrSnapshot } from '../symbols';\r\n\r\nexport class HmrInitAction {\r\n  static get type() {\r\n    // NOTE: Not necessary to declare the type in this way in your code. See https://github.com/ngxs/store/pull/644#issuecomment-436003138\r\n    return '@@HMR_INIT';\r\n  }\r\n\r\n  constructor(public payload: Partial<NgxsHmrSnapshot>) {}\r\n}\r\n","import { NgxsHmrSnapshot } from '../symbols';\r\n\r\nexport class HmrBeforeDestroyAction {\r\n  static get type() {\r\n    // NOTE: Not necessary to declare the type in this way in your code. See https://github.com/ngxs/store/pull/644#issuecomment-436003138\r\n    return '@@HMR_BEFORE_DESTROY';\r\n  }\r\n\r\n  constructor(public payload: Partial<NgxsHmrSnapshot>) {}\r\n}\r\n","import { StateContext, Store } from '@ngxs/store';\r\nimport { isStateOperator } from '@ngxs/store/operators';\r\nimport { NgModuleRef } from '@angular/core';\r\n\r\nexport class HmrStateContextFactory<T, S> {\r\n  public store: Store;\r\n\r\n  constructor(module: NgModuleRef<T>) {\r\n    const store = module.injector.get<Store>(Store, undefined);\r\n\r\n    if (!store) {\r\n      throw new Error('Store not found, maybe you forgot to import the NgxsModule');\r\n    }\r\n\r\n    this.store = store;\r\n  }\r\n\r\n  /**\r\n   * @description\r\n   * must be taken out into  @ngxs/store/internals\r\n   */\r\n  public createStateContext(): StateContext<S> {\r\n    return {\r\n      dispatch: actions => this.store!.dispatch(actions),\r\n      getState: () => <S>this.store!.snapshot(),\r\n      setState: val => {\r\n        if (isStateOperator(val)) {\r\n          const currentState = this.store!.snapshot();\r\n          val = val(currentState);\r\n        }\r\n\r\n        this.store!.reset(val);\r\n        return <S>val;\r\n      },\r\n      patchState: val => {\r\n        const currentState = this.store!.snapshot();\r\n        const newState = { ...currentState, ...(<object>val) };\r\n        this.store!.reset(newState);\r\n        return newState;\r\n      }\r\n    };\r\n  }\r\n}\r\n","import { NgxsHmrOptions } from '../symbols';\r\n\r\nexport class HmrOptionBuilder {\r\n  public readonly deferTime: number;\r\n  public readonly autoClearLogs: boolean;\r\n\r\n  constructor({ deferTime, autoClearLogs }: NgxsHmrOptions) {\r\n    this.deferTime = deferTime || 100;\r\n    this.autoClearLogs = autoClearLogs === undefined ? true : autoClearLogs;\r\n  }\r\n\r\n  public clearLogs(): void {\r\n    if (this.autoClearLogs) {\r\n      console.clear();\r\n    }\r\n  }\r\n}\r\n","import { NgxsBootstrapper } from '@ngxs/store/internals';\r\nimport { Observable, Subscription } from 'rxjs';\r\nimport { StateContext } from '@ngxs/store';\r\n\r\nimport { HmrOptionBuilder } from './hmr-options-builder';\r\nimport { HmrCallback, NgxsHmrLifeCycle } from '../symbols';\r\nimport { HmrStateContextFactory } from './hmr-state-context-factory';\r\nimport { HmrBeforeDestroyAction } from '../actions/hmr-before-destroy.action';\r\nimport { HmrStorage } from './hmr-storage';\r\n\r\nexport class HmrLifecycle<T extends Partial<NgxsHmrLifeCycle<S>>, S> {\r\n  constructor(\r\n    private ngAppModule: T,\r\n    private bootstrap: NgxsBootstrapper,\r\n    private storage: HmrStorage<S>,\r\n    private context: HmrStateContextFactory<T, S>,\r\n    private options: HmrOptionBuilder\r\n  ) {}\r\n\r\n  public hmrNgxsStoreOnInit(hmrAfterOnInit: HmrCallback<S>) {\r\n    let moduleHmrInit: HmrCallback<S> = this.getModuleHmrInitCallback();\r\n    moduleHmrInit = moduleHmrInit.bind(this.ngAppModule);\r\n    this.stateEventLoop((ctx, state) => {\r\n      moduleHmrInit(ctx, state);\r\n      hmrAfterOnInit(ctx, state);\r\n    });\r\n  }\r\n\r\n  private getModuleHmrInitCallback(): HmrCallback<S> {\r\n    if (typeof this.ngAppModule.hmrNgxsStoreOnInit === 'function') {\r\n      return this.ngAppModule.hmrNgxsStoreOnInit;\r\n    }\r\n    return function defaultModuleHmrInit(ctx, state) {\r\n      ctx.patchState(state);\r\n    };\r\n  }\r\n\r\n  public hmrNgxsStoreBeforeOnDestroy(): Partial<S> {\r\n    let state: Partial<S> = {};\r\n    const ctx: StateContext<S> = this.context.createStateContext();\r\n    if (typeof this.ngAppModule.hmrNgxsStoreBeforeOnDestroy === 'function') {\r\n      state = this.ngAppModule.hmrNgxsStoreBeforeOnDestroy(ctx);\r\n    } else {\r\n      state = ctx.getState();\r\n    }\r\n\r\n    ctx.dispatch(new HmrBeforeDestroyAction(state));\r\n    return state;\r\n  }\r\n\r\n  private stateEventLoop(callback: HmrCallback<S>): void {\r\n    if (!this.storage.hasData()) return;\r\n\r\n    const appBootstrapped$: Observable<boolean> = this.bootstrap.appBootstrapped$;\r\n    const state$: Observable<any> = this.context.store.select(state => state);\r\n\r\n    appBootstrapped$.subscribe(() => {\r\n      let eventId: number;\r\n      const storeEventId: Subscription = state$.subscribe(() => {\r\n        // setTimeout used for zone detection after set hmr state\r\n        clearInterval(eventId);\r\n        eventId = window.setTimeout(() => {\r\n          // close check on the message queue\r\n          storeEventId.unsubscribe();\r\n          // if events are no longer running on the call stack,\r\n          // then we can update the state\r\n          callback(this.context.createStateContext(), this.storage.snapshot as Partial<S>);\r\n        }, this.options.deferTime);\r\n      });\r\n    });\r\n  }\r\n}\r\n","import { ApplicationRef, ComponentRef, NgModuleRef } from '@angular/core';\r\nimport { InitialState, NgxsBootstrapper } from '@ngxs/store/internals';\r\n\r\nimport { HmrStorage } from './internal/hmr-storage';\r\nimport {\r\n  BootstrapModuleFn,\r\n  NgxsHmrLifeCycle,\r\n  NgxsHmrOptions,\r\n  NgxsHmrSnapshot\r\n} from './symbols';\r\nimport { HmrStateContextFactory } from './internal/hmr-state-context-factory';\r\nimport { HmrOptionBuilder } from './internal/hmr-options-builder';\r\nimport { HmrInitAction } from './actions/hmr-init.action';\r\nimport { HmrLifecycle } from './internal/hmr-lifecycle';\r\n\r\ntype OldHostRemoverFn = () => void;\r\n\r\nexport class HmrManager<T extends Partial<NgxsHmrLifeCycle<S>>, S = NgxsHmrSnapshot> {\r\n  public storage: HmrStorage<S>;\r\n  public context: HmrStateContextFactory<T, S>;\r\n  public lifecycle: HmrLifecycle<T, S>;\r\n  public optionsBuilder: HmrOptionBuilder;\r\n  private ngModule: NgModuleRef<T>;\r\n\r\n  constructor(options: NgxsHmrOptions, storage: HmrStorage<S>) {\r\n    this.storage = storage;\r\n    this.optionsBuilder = new HmrOptionBuilder(options);\r\n  }\r\n\r\n  private get applicationRef(): ApplicationRef {\r\n    return this.ngModule.injector.get(ApplicationRef);\r\n  }\r\n\r\n  private get bootstrap(): NgxsBootstrapper {\r\n    return this.ngModule.injector.get(NgxsBootstrapper);\r\n  }\r\n\r\n  public async hmrModule(\r\n    bootstrapFn: BootstrapModuleFn<T>,\r\n    tick: () => void\r\n  ): Promise<NgModuleRef<T>> {\r\n    InitialState.set(this.storage.snapshot);\r\n    this.ngModule = await bootstrapFn();\r\n    this.context = new HmrStateContextFactory(this.ngModule);\r\n    this.lifecycle = this.createLifecycle();\r\n\r\n    tick();\r\n\r\n    InitialState.pop();\r\n    return this.ngModule;\r\n  }\r\n\r\n  public beforeModuleBootstrap(): void {\r\n    this.lifecycle.hmrNgxsStoreOnInit((ctx, state) => {\r\n      ctx.dispatch(new HmrInitAction(state));\r\n    });\r\n  }\r\n\r\n  public beforeModuleOnDestroy(): Partial<S> {\r\n    this.optionsBuilder.clearLogs();\r\n    return this.lifecycle.hmrNgxsStoreBeforeOnDestroy();\r\n  }\r\n\r\n  public createNewModule(): void {\r\n    const removeOldHosts: () => void = this.cloneHostsBeforeDestroy();\r\n    this.removeNgStyles();\r\n    this.ngModule.destroy();\r\n    removeOldHosts();\r\n  }\r\n\r\n  private createLifecycle(): HmrLifecycle<T, S> {\r\n    return new HmrLifecycle(\r\n      this.ngModule.instance,\r\n      this.bootstrap,\r\n      this.storage,\r\n      this.context,\r\n      this.optionsBuilder\r\n    );\r\n  }\r\n\r\n  private cloneHostsBeforeDestroy(): () => void {\r\n    const elements: Element[] = this.applicationRef.components.map(\r\n      (component: ComponentRef<Element>) => component.location.nativeElement\r\n    );\r\n\r\n    const removableList: OldHostRemoverFn[] = elements.map((componentNode: Element) => {\r\n      const newNode = document.createElement(componentNode.tagName);\r\n      const parentNode: Node = componentNode.parentNode as Node;\r\n      const currentDisplay: string | null = newNode.style.display;\r\n\r\n      newNode.style.display = 'none';\r\n      parentNode.insertBefore(newNode, componentNode);\r\n\r\n      return (): void => {\r\n        newNode.style.display = currentDisplay;\r\n        try {\r\n          parentNode.removeChild(componentNode);\r\n        } catch {}\r\n      };\r\n    });\r\n\r\n    return function removeOldHosts(): void {\r\n      removableList.forEach((removeOldHost: OldHostRemoverFn) => removeOldHost());\r\n    };\r\n  }\r\n\r\n  private removeNgStyles(): void {\r\n    const head: HTMLHeadElement = document.head!;\r\n    const styles: HTMLStyleElement[] = Array.from(head!.querySelectorAll('style'));\r\n\r\n    styles\r\n      .filter((style: HTMLStyleElement) => style.innerText.includes('_ng'))\r\n      .map((style: HTMLStyleElement) => head!.removeChild(style));\r\n  }\r\n}\r\n","export class HmrStorage<S> {\r\n  constructor(private _snapshot: Partial<S> = {}) {}\r\n\r\n  public hasData(): boolean {\r\n    return Object.keys(this._snapshot).length > 0;\r\n  }\r\n\r\n  public get snapshot(): Partial<S> {\r\n    return this._snapshot;\r\n  }\r\n}\r\n","import { HmrRuntime } from '../symbols';\r\n\r\ndeclare const window: any;\r\n\r\nexport function setHmrReloadedTo(value: boolean): void {\r\n  if (window[HmrRuntime.Status]) {\r\n    window[HmrRuntime.Status].hmrReloaded = value;\r\n  }\r\n}\r\n\r\nexport function markApplicationAsHmrReloaded(): void {\r\n  window[HmrRuntime.Status] = window[HmrRuntime.Status] || {\r\n    hmrReloaded: false\r\n  };\r\n}\r\n","import { NgModuleRef } from '@angular/core';\r\nimport { HmrManager } from './hmr-manager';\r\nimport { BootstrapModuleFn, NgxsHmrOptions, WebpackModule } from './symbols';\r\nimport { HmrStorage } from './internal/hmr-storage';\r\nimport { markApplicationAsHmrReloaded, setHmrReloadedTo } from './utils/internals';\r\n\r\nexport async function hmr<T>(\r\n  webpackModule: WebpackModule,\r\n  bootstrapFn: BootstrapModuleFn<T>,\r\n  options: NgxsHmrOptions = {}\r\n): Promise<NgModuleRef<T>> {\r\n  if (!webpackModule.hot) {\r\n    console.error('Are you using the --hmr flag for ng serve?');\r\n    throw new Error('HMR is not enabled for webpack-dev-server!');\r\n  }\r\n\r\n  markApplicationAsHmrReloaded();\r\n\r\n  webpackModule.hot.accept();\r\n\r\n  interface HmrDataTransfer {\r\n    snapshot?: any;\r\n  }\r\n  const dataTransfer: HmrDataTransfer = webpackModule.hot.data || {};\r\n\r\n  const storage = new HmrStorage<any>(dataTransfer.snapshot || {});\r\n  const manager = new HmrManager<T>(options, storage);\r\n\r\n  return await manager.hmrModule(bootstrapFn, () => {\r\n    manager.beforeModuleBootstrap();\r\n\r\n    webpackModule.hot!.dispose((data: HmrDataTransfer) => {\r\n      setHmrReloadedTo(true);\r\n      data.snapshot = manager.beforeModuleOnDestroy();\r\n      manager.createNewModule();\r\n    });\r\n  });\r\n}\r\n","import { HmrRuntime } from '../symbols';\r\n\r\ndeclare const window: any;\r\n\r\nexport function hmrIsReloaded(): boolean {\r\n  return !!(window[HmrRuntime.Status] && window[HmrRuntime.Status].hmrReloaded);\r\n}\r\n"],"names":[],"mappings":";;;;;;;;;;AAEA,MAAa,aAAa;;;;IAMxB,YAAmB,OAAiC;QAAjC,YAAO,GAAP,OAAO,CAA0B;KAAI;;;;IALxD,WAAW,IAAI;;QAEb,OAAO,YAAY,CAAC;KACrB;CAGF;;;IADa,gCAAwC;;;;;;;ACNtD,MAAa,sBAAsB;;;;IAMjC,YAAmB,OAAiC;QAAjC,YAAO,GAAP,OAAO,CAA0B;KAAI;;;;IALxD,WAAW,IAAI;;QAEb,OAAO,sBAAsB,CAAC;KAC/B;CAGF;;;IADa,yCAAwC;;;;;;;ACRtD;;;AAIA,MAAa,sBAAsB;;;;IAGjC,YAAY,MAAsB;;cAC1B,KAAK,GAAG,MAAM,CAAC,QAAQ,CAAC,GAAG,CAAQ,KAAK,EAAE,SAAS,CAAC;QAE1D,IAAI,CAAC,KAAK,EAAE;YACV,MAAM,IAAI,KAAK,CAAC,4DAA4D,CAAC,CAAC;SAC/E;QAED,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;KACpB;;;;;;IAMM,kBAAkB;QACvB,OAAO;YACL,QAAQ;;;;YAAE,OAAO,IAAI,mBAAA,IAAI,CAAC,KAAK,GAAE,QAAQ,CAAC,OAAO,CAAC,CAAA;YAClD,QAAQ;;;YAAE,yBAAS,mBAAA,IAAI,CAAC,KAAK,GAAE,QAAQ,EAAE,EAAA,CAAA;YACzC,QAAQ;;;;YAAE,GAAG;gBACX,IAAI,eAAe,CAAC,GAAG,CAAC,EAAE;;0BAClB,YAAY,GAAG,mBAAA,IAAI,CAAC,KAAK,GAAE,QAAQ,EAAE;oBAC3C,GAAG,GAAG,GAAG,CAAC,YAAY,CAAC,CAAC;iBACzB;gBAED,mBAAA,IAAI,CAAC,KAAK,GAAE,KAAK,CAAC,GAAG,CAAC,CAAC;gBACvB,0BAAU,GAAG,GAAC;aACf,CAAA;YACD,UAAU;;;;YAAE,GAAG;;sBACP,YAAY,GAAG,mBAAA,IAAI,CAAC,KAAK,GAAE,QAAQ,EAAE;;sBACrC,QAAQ,qBAAQ,YAAY,sBAAc,GAAG,IAAG;gBACtD,mBAAA,IAAI,CAAC,KAAK,GAAE,KAAK,CAAC,QAAQ,CAAC,CAAC;gBAC5B,OAAO,QAAQ,CAAC;aACjB,CAAA;SACF,CAAC;KACH;CACF;;;IArCC,uCAAoB;;;;;;;ACHtB,MAAa,gBAAgB;;;;IAI3B,YAAY,EAAE,SAAS,EAAE,aAAa,EAAkB;QACtD,IAAI,CAAC,SAAS,GAAG,SAAS,IAAI,GAAG,CAAC;QAClC,IAAI,CAAC,aAAa,GAAG,aAAa,KAAK,SAAS,GAAG,IAAI,GAAG,aAAa,CAAC;KACzE;;;;IAEM,SAAS;QACd,IAAI,IAAI,CAAC,aAAa,EAAE;YACtB,OAAO,CAAC,KAAK,EAAE,CAAC;SACjB;KACF;CACF;;;IAbC,qCAAkC;;IAClC,yCAAuC;;;;;;;ACGzC;;;AAGA,MAAa,YAAY;;;;;;;;IACvB,YACU,WAAc,EACd,SAA2B,EAC3B,OAAsB,EACtB,OAAqC,EACrC,OAAyB;QAJzB,gBAAW,GAAX,WAAW,CAAG;QACd,cAAS,GAAT,SAAS,CAAkB;QAC3B,YAAO,GAAP,OAAO,CAAe;QACtB,YAAO,GAAP,OAAO,CAA8B;QACrC,YAAO,GAAP,OAAO,CAAkB;KAC/B;;;;;IAEG,kBAAkB,CAAC,cAA8B;;YAClD,aAAa,GAAmB,IAAI,CAAC,wBAAwB,EAAE;QACnE,aAAa,GAAG,aAAa,CAAC,IAAI,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;QACrD,IAAI,CAAC,cAAc;;;;;QAAC,CAAC,GAAG,EAAE,KAAK;YAC7B,aAAa,CAAC,GAAG,EAAE,KAAK,CAAC,CAAC;YAC1B,cAAc,CAAC,GAAG,EAAE,KAAK,CAAC,CAAC;SAC5B,EAAC,CAAC;KACJ;;;;;IAEO,wBAAwB;QAC9B,IAAI,OAAO,IAAI,CAAC,WAAW,CAAC,kBAAkB,KAAK,UAAU,EAAE;YAC7D,OAAO,IAAI,CAAC,WAAW,CAAC,kBAAkB,CAAC;SAC5C;QACD;;;;;QAAO,SAAS,oBAAoB,CAAC,GAAG,EAAE,KAAK;YAC7C,GAAG,CAAC,UAAU,CAAC,KAAK,CAAC,CAAC;SACvB,EAAC;KACH;;;;IAEM,2BAA2B;;YAC5B,KAAK,GAAe,EAAE;;cACpB,GAAG,GAAoB,IAAI,CAAC,OAAO,CAAC,kBAAkB,EAAE;QAC9D,IAAI,OAAO,IAAI,CAAC,WAAW,CAAC,2BAA2B,KAAK,UAAU,EAAE;YACtE,KAAK,GAAG,IAAI,CAAC,WAAW,CAAC,2BAA2B,CAAC,GAAG,CAAC,CAAC;SAC3D;aAAM;YACL,KAAK,GAAG,GAAG,CAAC,QAAQ,EAAE,CAAC;SACxB;QAED,GAAG,CAAC,QAAQ,CAAC,IAAI,sBAAsB,CAAC,KAAK,CAAC,CAAC,CAAC;QAChD,OAAO,KAAK,CAAC;KACd;;;;;;IAEO,cAAc,CAAC,QAAwB;QAC7C,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,OAAO,EAAE;YAAE,OAAO;;cAE9B,gBAAgB,GAAwB,IAAI,CAAC,SAAS,CAAC,gBAAgB;;cACvE,MAAM,GAAoB,IAAI,CAAC,OAAO,CAAC,KAAK,CAAC,MAAM;;;;QAAC,KAAK,IAAI,KAAK,EAAC;QAEzE,gBAAgB,CAAC,SAAS;;;QAAC;;gBACrB,OAAe;;kBACb,YAAY,GAAiB,MAAM,CAAC,SAAS;;;YAAC;;gBAElD,aAAa,CAAC,OAAO,CAAC,CAAC;gBACvB,OAAO,GAAG,MAAM,CAAC,UAAU;;;gBAAC;;oBAE1B,YAAY,CAAC,WAAW,EAAE,CAAC;;;oBAG3B,QAAQ,CAAC,IAAI,CAAC,OAAO,CAAC,kBAAkB,EAAE,qBAAE,IAAI,CAAC,OAAO,CAAC,QAAQ,GAAe,CAAC;iBAClF,GAAE,IAAI,CAAC,OAAO,CAAC,SAAS,CAAC,CAAC;aAC5B,EAAC;SACH,EAAC,CAAC;KACJ;CACF;;;;;;IA3DG,mCAAsB;;;;;IACtB,iCAAmC;;;;;IACnC,+BAA8B;;;;;IAC9B,+BAA6C;;;;;IAC7C,+BAAiC;;;;;;;;;;ACCrC,MAAa,UAAU;;;;;IAOrB,YAAY,OAAuB,EAAE,OAAsB;QACzD,IAAI,CAAC,OAAO,GAAG,OAAO,CAAC;QACvB,IAAI,CAAC,cAAc,GAAG,IAAI,gBAAgB,CAAC,OAAO,CAAC,CAAC;KACrD;;;;;IAED,IAAY,cAAc;QACxB,OAAO,IAAI,CAAC,QAAQ,CAAC,QAAQ,CAAC,GAAG,CAAC,cAAc,CAAC,CAAC;KACnD;;;;;IAED,IAAY,SAAS;QACnB,OAAO,IAAI,CAAC,QAAQ,CAAC,QAAQ,CAAC,GAAG,CAAC,gBAAgB,CAAC,CAAC;KACrD;;;;;;IAEY,SAAS,CACpB,WAAiC,EACjC,IAAgB;;YAEhB,YAAY,CAAC,GAAG,CAAC,IAAI,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC;YACxC,IAAI,CAAC,QAAQ,GAAG,MAAM,WAAW,EAAE,CAAC;YACpC,IAAI,CAAC,OAAO,GAAG,IAAI,sBAAsB,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;YACzD,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC,eAAe,EAAE,CAAC;YAExC,IAAI,EAAE,CAAC;YAEP,YAAY,CAAC,GAAG,EAAE,CAAC;YACnB,OAAO,IAAI,CAAC,QAAQ,CAAC;SACtB;KAAA;;;;IAEM,qBAAqB;QAC1B,IAAI,CAAC,SAAS,CAAC,kBAAkB;;;;;QAAC,CAAC,GAAG,EAAE,KAAK;YAC3C,GAAG,CAAC,QAAQ,CAAC,IAAI,aAAa,CAAC,KAAK,CAAC,CAAC,CAAC;SACxC,EAAC,CAAC;KACJ;;;;IAEM,qBAAqB;QAC1B,IAAI,CAAC,cAAc,CAAC,SAAS,EAAE,CAAC;QAChC,OAAO,IAAI,CAAC,SAAS,CAAC,2BAA2B,EAAE,CAAC;KACrD;;;;IAEM,eAAe;;cACd,cAAc,GAAe,IAAI,CAAC,uBAAuB,EAAE;QACjE,IAAI,CAAC,cAAc,EAAE,CAAC;QACtB,IAAI,CAAC,QAAQ,CAAC,OAAO,EAAE,CAAC;QACxB,cAAc,EAAE,CAAC;KAClB;;;;;IAEO,eAAe;QACrB,OAAO,IAAI,YAAY,CACrB,IAAI,CAAC,QAAQ,CAAC,QAAQ,EACtB,IAAI,CAAC,SAAS,EACd,IAAI,CAAC,OAAO,EACZ,IAAI,CAAC,OAAO,EACZ,IAAI,CAAC,cAAc,CACpB,CAAC;KACH;;;;;IAEO,uBAAuB;;cACvB,QAAQ,GAAc,IAAI,CAAC,cAAc,CAAC,UAAU,CAAC,GAAG;;;;QAC5D,CAAC,SAAgC,KAAK,SAAS,CAAC,QAAQ,CAAC,aAAa,EACvE;;cAEK,aAAa,GAAuB,QAAQ,CAAC,GAAG;;;;QAAC,CAAC,aAAsB;;kBACtE,OAAO,GAAG,QAAQ,CAAC,aAAa,CAAC,aAAa,CAAC,OAAO,CAAC;;kBACvD,UAAU,sBAAS,aAAa,CAAC,UAAU,EAAQ;;kBACnD,cAAc,GAAkB,OAAO,CAAC,KAAK,CAAC,OAAO;YAE3D,OAAO,CAAC,KAAK,CAAC,OAAO,GAAG,MAAM,CAAC;YAC/B,UAAU,CAAC,YAAY,CAAC,OAAO,EAAE,aAAa,CAAC,CAAC;YAEhD;;;YAAO;gBACL,OAAO,CAAC,KAAK,CAAC,OAAO,GAAG,cAAc,CAAC;gBACvC,IAAI;oBACF,UAAU,CAAC,WAAW,CAAC,aAAa,CAAC,CAAC;iBACvC;gBAAC,WAAM,GAAE;aACX,EAAC;SACH,EAAC;QAEF;;;QAAO,SAAS,cAAc;YAC5B,aAAa,CAAC,OAAO;;;;YAAC,CAAC,aAA+B,KAAK,aAAa,EAAE,EAAC,CAAC;SAC7E,EAAC;KACH;;;;;IAEO,cAAc;;cACd,IAAI,sBAAoB,QAAQ,CAAC,IAAI,EAAC;;cACtC,MAAM,GAAuB,KAAK,CAAC,IAAI,CAAC,mBAAA,IAAI,GAAE,gBAAgB,CAAC,OAAO,CAAC,CAAC;QAE9E,MAAM;aACH,MAAM;;;;QAAC,CAAC,KAAuB,KAAK,KAAK,CAAC,SAAS,CAAC,QAAQ,CAAC,KAAK,CAAC,EAAC;aACpE,GAAG;;;;QAAC,CAAC,KAAuB,KAAK,mBAAA,IAAI,GAAE,WAAW,CAAC,KAAK,CAAC,EAAC,CAAC;KAC/D;CACF;;;IAhGC,6BAA8B;;IAC9B,6BAA6C;;IAC7C,+BAAqC;;IACrC,oCAAwC;;;;;IACxC,8BAAiC;;;;;;;;;;ACtBnC,MAAa,UAAU;;;;IACrB,YAAoB,YAAwB,EAAE;QAA1B,cAAS,GAAT,SAAS,CAAiB;KAAI;;;;IAE3C,OAAO;QACZ,OAAO,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC,MAAM,GAAG,CAAC,CAAC;KAC/C;;;;IAED,IAAW,QAAQ;QACjB,OAAO,IAAI,CAAC,SAAS,CAAC;KACvB;CACF;;;;;;IATa,+BAAkC;;;;;;;;;;;ACGhD,SAAgB,gBAAgB,CAAC,KAAc;IAC7C,IAAI,MAAM,0CAAmB,EAAE;QAC7B,MAAM,0CAAmB,CAAC,WAAW,GAAG,KAAK,CAAC;KAC/C;CACF;;;;AAED,SAAgB,4BAA4B;IAC1C,MAAM,0CAAmB,GAAG,MAAM,0CAAmB,IAAI;QACvD,WAAW,EAAE,KAAK;KACnB,CAAC;CACH;;;;;;;;;;;;;ACRD,SAAsB,GAAG,CACvB,aAA4B,EAC5B,WAAiC,EACjC,UAA0B,EAAE;;QAE5B,IAAI,CAAC,aAAa,CAAC,GAAG,EAAE;YACtB,OAAO,CAAC,KAAK,CAAC,4CAA4C,CAAC,CAAC;YAC5D,MAAM,IAAI,KAAK,CAAC,4CAA4C,CAAC,CAAC;SAC/D;QAED,4BAA4B,EAAE,CAAC;QAE/B,aAAa,CAAC,GAAG,CAAC,MAAM,EAAE,CAAC;;;;QAE3B,8BAEC;;;YADC,mCAAe;;;cAEX,YAAY,GAAoB,aAAa,CAAC,GAAG,CAAC,IAAI,IAAI,EAAE;;cAE5D,OAAO,GAAG,IAAI,UAAU,CAAM,YAAY,CAAC,QAAQ,IAAI,EAAE,CAAC;;cAC1D,OAAO,GAAG,IAAI,UAAU,CAAI,OAAO,EAAE,OAAO,CAAC;QAEnD,OAAO,MAAM,OAAO,CAAC,SAAS,CAAC,WAAW;;;QAAE;YAC1C,OAAO,CAAC,qBAAqB,EAAE,CAAC;YAEhC,mBAAA,aAAa,CAAC,GAAG,GAAE,OAAO;;;;YAAC,CAAC,IAAqB;gBAC/C,gBAAgB,CAAC,IAAI,CAAC,CAAC;gBACvB,IAAI,CAAC,QAAQ,GAAG,OAAO,CAAC,qBAAqB,EAAE,CAAC;gBAChD,OAAO,CAAC,eAAe,EAAE,CAAC;aAC3B,EAAC,CAAC;SACJ,EAAC,CAAC;KACJ;CAAA;;;;;;;;;ACjCD,SAAgB,aAAa;IAC3B,OAAO,CAAC,EAAE,MAAM,0CAAmB,IAAI,MAAM,0CAAmB,CAAC,WAAW,CAAC,CAAC;CAC/E;;;;;;;;;;;;;;;;;;;"}