/**
 * @fileoverview added by tsickle
 * Generated from: lib/data-sync.service.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
import * as go from 'gojs';
import * as i0 from "@angular/core";
var DataSyncService = /** @class */ (function () {
    function DataSyncService() {
    }
    /**
     * Sync a node data array with a set of changes
     * @param changes The set of changes to the GoJS model
     * @param nodeData The node data array to merge these changes with
     * @returns A node data array, merged with the changes
     */
    /**
     * Sync a node data array with a set of changes
     * @param {?} changes The set of changes to the GoJS model
     * @param {?} nodeData The node data array to merge these changes with
     * @return {?} A node data array, merged with the changes
     */
    DataSyncService.syncNodeData = /**
     * Sync a node data array with a set of changes
     * @param {?} changes The set of changes to the GoJS model
     * @param {?} nodeData The node data array to merge these changes with
     * @return {?} A node data array, merged with the changes
     */
    function (changes, nodeData) {
        if (!changes)
            return nodeData;
        if (!changes.modifiedNodeData && !changes.insertedNodeKeys && !changes.removedNodeKeys)
            return nodeData;
        // maintain a map of modified nodes for fast lookup during insertion
        /** @type {?} */
        var modifiedNodesMap = new go.Map();
        // account for modified node data
        if (changes.modifiedNodeData) {
            changes.modifiedNodeData.forEach((/**
             * @param {?} nd
             * @return {?}
             */
            function (nd) {
                modifiedNodesMap.set(nd.key, nd);
                /** @type {?} */
                var key = nd.key;
                for (var i = 0; i < nodeData.length; i++) {
                    /** @type {?} */
                    var ndEntry = nodeData[i];
                    if (ndEntry.key === key) {
                        nodeData[i] = nd;
                    }
                }
            }));
        }
        // account for inserted node data
        if (changes.insertedNodeKeys) {
            changes.insertedNodeKeys.forEach((/**
             * @param {?} key
             * @return {?}
             */
            function (key) {
                /** @type {?} */
                var nd = modifiedNodesMap.get(key);
                if (nd) {
                    nodeData.push(nd);
                }
            }));
        }
        // account for removed node data
        if (changes.removedNodeKeys) {
            nodeData = nodeData.filter((/**
             * @param {?} nd
             * @return {?}
             */
            function (nd) {
                if (changes.removedNodeKeys.includes(nd.key)) {
                    return false;
                }
                return true;
            }));
        }
        return nodeData;
    };
    /**
     * Sync a link data array with a set of changes
     * @param changes The set of changes to the GoJS model
     * @param linkData The link data array to merge these changes with
     * @returns A link data array, merged with the changes
     */
    /**
     * Sync a link data array with a set of changes
     * @param {?} changes The set of changes to the GoJS model
     * @param {?} linkData The link data array to merge these changes with
     * @return {?} A link data array, merged with the changes
     */
    DataSyncService.syncLinkData = /**
     * Sync a link data array with a set of changes
     * @param {?} changes The set of changes to the GoJS model
     * @param {?} linkData The link data array to merge these changes with
     * @return {?} A link data array, merged with the changes
     */
    function (changes, linkData) {
        if (!changes)
            return linkData;
        if (!changes.modifiedLinkData && !changes.insertedLinkKeys && !changes.removedLinkKeys)
            return linkData;
        // maintain a map of modified nodes for fast lookup during insertion
        /** @type {?} */
        var modifiedLinksMap = new go.Map();
        // account for modified link data
        if (changes.modifiedLinkData) {
            changes.modifiedLinkData.forEach((/**
             * @param {?} ld
             * @return {?}
             */
            function (ld) {
                modifiedLinksMap.set(ld.key, ld);
                /** @type {?} */
                var key = ld.key;
                for (var i = 0; i < linkData.length; i++) {
                    /** @type {?} */
                    var ldEntry = linkData[i];
                    if (ldEntry.key === key) {
                        linkData[i] = ld;
                    }
                }
            }));
        }
        // account for inserted link data
        if (changes.insertedLinkKeys) {
            changes.insertedLinkKeys.forEach((/**
             * @param {?} key
             * @return {?}
             */
            function (key) {
                /** @type {?} */
                var nd = modifiedLinksMap.get(key);
                if (nd) {
                    linkData.push(nd);
                }
            }));
        }
        // account for removed link data
        if (changes.removedLinkKeys) {
            linkData = linkData.filter((/**
             * @param {?} ld
             * @return {?}
             */
            function (ld) {
                if (changes.removedLinkKeys.includes(ld.key)) {
                    return false;
                }
                return true;
            }));
        }
        return linkData;
    };
    /**
     * Sync modelData with a set of changes
     * @param changes The set of changes to the GoJS model
     * @param modelData The modelData to merge these changes with
     * @returns A modelData object, merged with the changes
     */
    /**
     * Sync modelData with a set of changes
     * @param {?} changes The set of changes to the GoJS model
     * @param {?} modelData The modelData to merge these changes with
     * @return {?} A modelData object, merged with the changes
     */
    DataSyncService.syncModelData = /**
     * Sync modelData with a set of changes
     * @param {?} changes The set of changes to the GoJS model
     * @param {?} modelData The modelData to merge these changes with
     * @return {?} A modelData object, merged with the changes
     */
    function (changes, modelData) {
        if (!changes)
            return modelData;
        if (!changes.modelData)
            return modelData;
        if (changes.modelData) {
            return changes.modelData;
        }
    };
    DataSyncService.decorators = [
        { type: Injectable, args: [{
                    providedIn: 'root'
                },] }
    ];
    /** @nocollapse */
    DataSyncService.ctorParameters = function () { return []; };
    /** @nocollapse */ DataSyncService.ɵprov = i0.ɵɵdefineInjectable({ factory: function DataSyncService_Factory() { return new DataSyncService(); }, token: DataSyncService, providedIn: "root" });
    return DataSyncService;
}());
export { DataSyncService };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGF0YS1zeW5jLnNlcnZpY2UuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9nb2pzLWFuZ3VsYXIvIiwic291cmNlcyI6WyJsaWIvZGF0YS1zeW5jLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzNDLE9BQU8sS0FBSyxFQUFFLE1BQU0sTUFBTSxDQUFDOztBQUUzQjtJQUtFO0lBQWdCLENBQUM7SUFFakI7Ozs7O09BS0c7Ozs7Ozs7SUFDVyw0QkFBWTs7Ozs7O0lBQTFCLFVBQTJCLE9BQTJCLEVBQUUsUUFBOEI7UUFDcEYsSUFBSSxDQUFDLE9BQU87WUFBRSxPQUFPLFFBQVEsQ0FBQztRQUM5QixJQUFJLENBQUMsT0FBTyxDQUFDLGdCQUFnQixJQUFJLENBQUMsT0FBTyxDQUFDLGdCQUFnQixJQUFJLENBQUMsT0FBTyxDQUFDLGVBQWU7WUFBRSxPQUFPLFFBQVEsQ0FBQzs7O1lBR2xHLGdCQUFnQixHQUFHLElBQUksRUFBRSxDQUFDLEdBQUcsRUFBeUI7UUFFNUQsaUNBQWlDO1FBQ2pDLElBQUksT0FBTyxDQUFDLGdCQUFnQixFQUFFO1lBQzVCLE9BQU8sQ0FBQyxnQkFBZ0IsQ0FBQyxPQUFPOzs7O1lBQUMsVUFBQyxFQUFpQjtnQkFDakQsZ0JBQWdCLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLEVBQUUsRUFBRSxDQUFDLENBQUM7O29CQUMzQixHQUFHLEdBQUcsRUFBRSxDQUFDLEdBQUc7Z0JBQ2xCLEtBQUssSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxRQUFRLENBQUMsTUFBTSxFQUFFLENBQUMsRUFBRSxFQUFFOzt3QkFDbEMsT0FBTyxHQUFHLFFBQVEsQ0FBQyxDQUFDLENBQUM7b0JBQzNCLElBQUksT0FBTyxDQUFDLEdBQUcsS0FBSyxHQUFHLEVBQUU7d0JBQ3ZCLFFBQVEsQ0FBQyxDQUFDLENBQUMsR0FBRyxFQUFFLENBQUM7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RUFBRSxTQUF3QjtRQUMvRSxJQUFJLENBQUMsT0FBTztZQUFFLE9BQU8sU0FBUyxDQUFDO1FBQy9CLElBQUksQ0FBQyxPQUFPLENBQUMsU0FBUztZQUFFLE9BQU8sU0FBUyxDQUFDO1FBQ3pDLElBQUksT0FBTyxDQUFDLFNBQVMsRUFBRTtZQUNyQixPQUFPLE9BQU8sQ0FBQyxTQUFTLENBQUM7U0FDMUI7SUFDSCxDQUFDOztnQkFySEYsVUFBVSxTQUFDO29CQUNWLFVBQVUsRUFBRSxNQUFNO2lCQUNuQjs7Ozs7MEJBTEQ7Q0EySEMsQUF4SEQsSUF3SEM7U0FySFksZUFBZSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0ICogYXMgZ28gZnJvbSAnZ29qcyc7XHJcblxyXG5ASW5qZWN0YWJsZSh7XHJcbiAgcHJvdmlkZWRJbjogJ3Jvb3QnXHJcbn0pXHJcbmV4cG9ydCBjbGFzcyBEYXRhU3luY1NlcnZpY2Uge1xyXG5cclxuICBjb25zdHJ1Y3RvcigpIHsgfVxyXG5cclxuICAvKipcclxuICAgKiBTeW5jIGEgbm9kZSBkYXRhIGFycmF5IHdpdGggYSBzZXQgb2YgY2hhbmdlc1xyXG4gICAqIEBwYXJhbSBjaGFuZ2VzIFRoZSBzZXQgb2YgY2hhbmdlcyB0byB0aGUgR29KUyBtb2RlbFxyXG4gICAqIEBwYXJhbSBub2RlRGF0YSBUaGUgbm9kZSBkYXRhIGFycmF5IHRvIG1lcmdlIHRoZXNlIGNoYW5nZXMgd2l0aFxyXG4gICAqIEByZXR1cm5zIEEgbm9kZSBkYXRhIGFycmF5LCBtZXJnZWQgd2l0aCB0aGUgY2hhbmdlc1xyXG4gICAqL1xyXG4gIHB1YmxpYyBzdGF0aWMgc3luY05vZGVEYXRhKGNoYW5nZXM6IGdvLkluY3JlbWVudGFsRGF0YSwgbm9kZURhdGE6IEFycmF5PGdvLk9iamVjdERhdGE+KSB7XHJcbiAgICBpZiAoIWNoYW5nZXMpIHJldHVybiBub2RlRGF0YTtcclxuICAgIGlmICghY2hhbmdlcy5tb2RpZmllZE5vZGVEYXRhICYmICFjaGFuZ2VzLmluc2VydGVkTm9kZUtleXMgJiYgIWNoYW5nZXMucmVtb3ZlZE5vZGVLZXlzKSByZXR1cm4gbm9kZURhdGE7XHJcblxyXG4gICAgLy8gbWFpbnRhaW4gYSBtYXAgb2YgbW9kaWZpZWQgbm9kZXMgZm9yIGZhc3QgbG9va3VwIGR1cmluZyBpbnNlcnRpb25cclxuICAgIGNvbnN0IG1vZGlmaWVkTm9kZXNNYXAgPSBuZXcgZ28uTWFwPGdvLktleSwgZ28uT2JqZWN0RGF0YT4oKTtcclxuXHJcbiAgICAvLyBhY2NvdW50IGZvciBtb2RpZmllZCBub2RlIGRhdGFcclxuICAgIGlmIChjaGFuZ2VzLm1vZGlmaWVkTm9kZURhdGEpIHtcclxuICAgICAgY2hhbmdlcy5tb2RpZmllZE5vZGVEYXRhLmZvckVhY2goKG5kOiBnby5PYmplY3REYXRhKSA9PiB7XHJcbiAgICAgICAgbW9kaWZpZWROb2Rlc01hcC5zZXQobmQua2V5LCBuZCk7XHJcbiAgICAgICAgY29uc3Qga2V5ID0gbmQua2V5O1xyXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbm9kZURhdGEubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgIGNvbnN0IG5kRW50cnkgPSBub2RlRGF0YVtpXTtcclxuICAgICAgICAgIGlmIChuZEVudHJ5LmtleSA9PT0ga2V5KSB7XHJcbiAgICAgICAgICAgIG5vZGVEYXRhW2ldID0gbmQ7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICB9KTtcclxuICAgIH1cclxuXHJcbiAgICAvLyBhY2NvdW50IGZvciBpbnNlcnRlZCBub2RlIGRhdGFcclxuICAgIGlmIChjaGFuZ2VzLmluc2VydGVkTm9kZUtleXMpIHtcclxuICAgICAgY2hhbmdlcy5pbnNlcnRlZE5vZGVLZXlzLmZvckVhY2goKGtleTogZ28uS2V5KSA9PiB7XHJcbiAgICAgICAgY29uc3QgbmQgPSBtb2RpZmllZE5vZGVzTWFwLmdldChrZXkpO1xyXG4gICAgICAgIGlmIChuZCkge1xyXG4gICAgICAgICAgbm9kZURhdGEucHVzaChuZCk7XHJcbiAgICAgICAgfVxyXG4gICAgICB9KTtcclxuICAgIH1cclxuXHJcbiAgICAvLyBhY2NvdW50IGZvciByZW1vdmVkIG5vZGUgZGF0YVxyXG4gICAgaWYgKGNoYW5nZXMucmVtb3ZlZE5vZGVLZXlzKSB7XHJcbiAgICAgIG5vZGVEYXRhID0gbm9kZURhdGEuZmlsdGVyKChuZDogZ28uT2JqZWN0RGF0YSkgPT4ge1xyXG4gICAgICAgIGlmIChjaGFuZ2VzLnJlbW92ZWROb2RlS2V5cy5pbmNsdWRlcyhuZC5rZXkpKSB7XHJcbiAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgfSByZXR1cm4gdHJ1ZTtcclxuICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIG5vZGVEYXRhO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogU3luYyBhIGxpbmsgZGF0YSBhcnJheSB3aXRoIGEgc2V0IG9mIGNoYW5nZXNcclxuICAgKiBAcGFyYW0gY2hhbmdlcyBUaGUgc2V0IG9mIGNoYW5nZXMgdG8gdGhlIEdvSlMgbW9kZWxcclxuICAgKiBAcGFyYW0gbGlua0RhdGEgVGhlIGxpbmsgZGF0YSBhcnJheSB0byBtZXJnZSB0aGVzZSBjaGFuZ2VzIHdpdGhcclxuICAgKiBAcmV0dXJucyBBIGxpbmsgZGF0YSBhcnJheSwgbWVyZ2VkIHdpdGggdGhlIGNoYW5nZXNcclxuICAgKi9cclxuICBwdWJsaWMgc3RhdGljIHN5bmNMaW5rRGF0YShjaGFuZ2VzOiBnby5JbmNyZW1lbnRhbERhdGEsIGxpbmtEYXRhOiBBcnJheTxnby5PYmplY3REYXRhPikge1xyXG4gICAgaWYgKCFjaGFuZ2VzKSByZXR1cm4gbGlua0RhdGE7XHJcbiAgICBpZiAoIWNoYW5nZXMubW9kaWZpZWRMaW5rRGF0YSAmJiAhY2hhbmdlcy5pbnNlcnRlZExpbmtLZXlzICYmICFjaGFuZ2VzLnJlbW92ZWRMaW5rS2V5cykgcmV0dXJuIGxpbmtEYXRhO1xyXG5cclxuICAgIC8vIG1haW50YWluIGEgbWFwIG9mIG1vZGlmaWVkIG5vZGVzIGZvciBmYXN0IGxvb2t1cCBkdXJpbmcgaW5zZXJ0aW9uXHJcbiAgICBjb25zdCBtb2RpZmllZExpbmtzTWFwID0gbmV3IGdvLk1hcDxnby5LZXksIGdvLk9iamVjdERhdGE+KCk7XHJcblxyXG4gICAgLy8gYWNjb3VudCBmb3IgbW9kaWZpZWQgbGluayBkYXRhXHJcbiAgICBpZiAoY2hhbmdlcy5tb2RpZmllZExpbmtEYXRhKSB7XHJcbiAgICAgIGNoYW5nZXMubW9kaWZpZWRMaW5rRGF0YS5mb3JFYWNoKChsZDogZ28uT2JqZWN0RGF0YSkgPT4ge1xyXG4gICAgICAgIG1vZGlmaWVkTGlua3NNYXAuc2V0KGxkLmtleSwgbGQpO1xyXG4gICAgICAgIGNvbnN0IGtleSA9IGxkLmtleTtcclxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGxpbmtEYXRhLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICBjb25zdCBsZEVudHJ5ID0gbGlua0RhdGFbaV07XHJcbiAgICAgICAgICBpZiAobGRFbnRyeS5rZXkgPT09IGtleSkge1xyXG4gICAgICAgICAgICBsaW5rRGF0YVtpXSA9IGxkO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgLy8gYWNjb3VudCBmb3IgaW5zZXJ0ZWQgbGluayBkYXRhXHJcbiAgICBpZiAoY2hhbmdlcy5pbnNlcnRlZExpbmtLZXlzKSB7XHJcbiAgICAgIGNoYW5nZXMuaW5zZXJ0ZWRMaW5rS2V5cy5mb3JFYWNoKChrZXk6IGdvLktleSkgPT4ge1xyXG4gICAgICAgIGNvbnN0IG5kID0gbW9kaWZpZWRMaW5rc01hcC5nZXQoa2V5KTtcclxuICAgICAgICBpZiAobmQpIHtcclxuICAgICAgICAgIGxpbmtEYXRhLnB1c2gobmQpO1xyXG4gICAgICAgIH1cclxuICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgLy8gYWNjb3VudCBmb3IgcmVtb3ZlZCBsaW5rIGRhdGFcclxuICAgIGlmIChjaGFuZ2VzLnJlbW92ZWRMaW5rS2V5cykge1xyXG4gICAgICBsaW5rRGF0YSA9IGxpbmtEYXRhLmZpbHRlcigobGQ6IGdvLk9iamVjdERhdGEpID0+IHtcclxuICAgICAgICBpZiAoY2hhbmdlcy5yZW1vdmVkTGlua0tleXMuaW5jbHVkZXMobGQua2V5KSkge1xyXG4gICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgIH0gcmV0dXJuIHRydWU7XHJcbiAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiBsaW5rRGF0YTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIFN5bmMgbW9kZWxEYXRhIHdpdGggYSBzZXQgb2YgY2hhbmdlc1xyXG4gICAqIEBwYXJhbSBjaGFuZ2VzIFRoZSBzZXQgb2YgY2hhbmdlcyB0byB0aGUgR29KUyBtb2RlbFxyXG4gICAqIEBwYXJhbSBtb2RlbERhdGEgVGhlIG1vZGVsRGF0YSB0byBtZXJnZSB0aGVzZSBjaGFuZ2VzIHdpdGhcclxuICAgKiBAcmV0dXJucyBBIG1vZGVsRGF0YSBvYmplY3QsIG1lcmdlZCB3aXRoIHRoZSBjaGFuZ2VzXHJcbiAgICovXHJcbiAgcHVibGljIHN0YXRpYyBzeW5jTW9kZWxEYXRhKGNoYW5nZXM6IGdvLkluY3JlbWVudGFsRGF0YSwgbW9kZWxEYXRhOiBnby5PYmplY3REYXRhKSB7XHJcbiAgICBpZiAoIWNoYW5nZXMpIHJldHVybiBtb2RlbERhdGE7XHJcbiAgICBpZiAoIWNoYW5nZXMubW9kZWxEYXRhKSByZXR1cm4gbW9kZWxEYXRhO1xyXG4gICAgaWYgKGNoYW5nZXMubW9kZWxEYXRhKSB7XHJcbiAgICAgIHJldHVybiBjaGFuZ2VzLm1vZGVsRGF0YTtcclxuICAgIH1cclxuICB9XHJcblxyXG5cclxufVxyXG4iXX0=