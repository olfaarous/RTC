/**
 * @fileoverview added by tsickle
 * Generated from: lib/diagram.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, ElementRef, EventEmitter, Input, IterableDiffers, KeyValueDiffers, NgZone, Output, ViewChild } from '@angular/core';
import * as go from 'gojs';
var DiagramComponent = /** @class */ (function () {
    function DiagramComponent(_differs, _kvdiffers, zone) {
        this._differs = _differs;
        this._kvdiffers = _kvdiffers;
        this.zone = zone;
        // Link data for diagram
        this.linkDataArray = null; // optional
        // optional
        // Model data for diagram
        this.modelData = null; // optional
        // model changed listener function for diagram
        this.modelChangedListener = null;
        // event emitter -- fires when diagram model changes. Capture this emitted event in parent component
        this.modelChange = new EventEmitter();
        this.diagram = null;
        // differs used to check if there have been changed to the array @Inputs
        // without them, changes to the input arrays won't register in ngOnChanges,
        // since the array reference itself may be the same
        this._ndaDiffer = this._differs.find([]).create(null);
        this._ldaDiffer = this._differs.find([]).create(null);
        // also watch if model data changes; this differ must be initialized in ngOnInit
    }
    /**
     * @return {?}
     */
    DiagramComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        // initialize the differ that listens for changes to modelData object
        if (this.modelData) {
            this._mdDiffer = this._kvdiffers.find(this.modelData).create();
        }
    }; // end ngOnInit
    /**
     * Initializes diagram / model after view init
     */
    // end ngOnInit
    /**
     * Initializes diagram / model after view init
     * @return {?}
     */
    DiagramComponent.prototype.ngAfterViewInit = 
    // end ngOnInit
    /**
     * Initializes diagram / model after view init
     * @return {?}
     */
    function () {
        var _this = this;
        this.diagram = this.initDiagram();
        // This bit of code makes sure the mousemove event listeners on the canvas are run outside NgZone
        // This makes it so change detection isn't triggered every time the mouse is moved inside the canvas, greatly improving performance
        // If some state-altering behavior must happen on a mousemove event inside the diagram,
        // you will have to using zone.run() to make sure that event triggers angular change detection
        this.diagram.addEventListener = (/**
         * @param {?} DOMElement
         * @param {?} name
         * @param {?} listener
         * @param {?} capture
         * @return {?}
         */
        function (DOMElement, name, listener, capture) {
            /** @type {?} */
            var superAddEventListener = go.Diagram.prototype.addEventListener;
            if (name === 'mousemove') {
                _this.zone.runOutsideAngular((/**
                 * @return {?}
                 */
                function () { return superAddEventListener.call(_this, DOMElement, name, listener, capture); }));
            }
            else {
                _this.zone.run((/**
                 * @return {?}
                 */
                function () {
                    superAddEventListener.call(_this, DOMElement, name, listener, capture);
                }));
            }
        });
        // assign the Diagram's div, which (among many other things) will attach a bunch of listeners to the canvas,
        // using the overridden addEventListener function above
        /** @type {?} */
        var divRef = this.diagramDiv.nativeElement;
        if (divRef === null)
            return;
        this.diagram.div = divRef;
        // initialize the Diagram's model
        this.diagram.delayInitialization((/**
         * @return {?}
         */
        function () {
            /** @type {?} */
            var model = _this.diagram.model;
            model.commit((/**
             * @param {?} m
             * @return {?}
             */
            function (m) {
                m.mergeNodeDataArray(m.cloneDeep(_this.nodeDataArray));
                if (_this.linkDataArray && m instanceof go.GraphLinksModel) {
                    m.mergeLinkDataArray(m.cloneDeep(_this.linkDataArray));
                }
                if (_this.modelData) {
                    m.assignAllDataProperties(m.modelData, _this.modelData);
                }
            }), null);
        }));
        // initializer listener
        this.modelChangedListener = (/**
         * @param {?} e
         * @return {?}
         */
        function (e) {
            if (e.isTransactionFinished) {
                // this must be done within a NgZone.run block, so changes are detected in the parent component
                _this.zone.run((/**
                 * @return {?}
                 */
                function () {
                    /** @type {?} */
                    var dataChanges = (/** @type {?} */ (e.model)).toIncrementalData(e);
                    _this.modelChange.emit(dataChanges);
                }));
            }
        });
        this.diagram.addModelChangedListener(this.modelChangedListener);
    }; // end ngAfterViewInit
    /**
     * Always be checking if array Input data has changed (node and link data arrays)
     */
    // end ngAfterViewInit
    /**
     * Always be checking if array Input data has changed (node and link data arrays)
     * @return {?}
     */
    DiagramComponent.prototype.ngDoCheck = 
    // end ngAfterViewInit
    /**
     * Always be checking if array Input data has changed (node and link data arrays)
     * @return {?}
     */
    function () {
        /** @type {?} */
        var nodeDataArrayChanges = this._ndaDiffer.diff(this.nodeDataArray);
        /** @type {?} */
        var linkDataArrayChanges = this._ldaDiffer.diff(this.linkDataArray);
        /** @type {?} */
        var modelDataChanges = null;
        if (this._mdDiffer) {
            modelDataChanges = this._mdDiffer.diff(this.modelData);
        }
        if (nodeDataArrayChanges || linkDataArrayChanges || modelDataChanges) {
            this.updateFromAppData();
        }
    }; // end ngDoCheck
    /**
     * Some input property has changed (or its contents changed) in parent component.
     * Update diagram data accordingly
     */
    // end ngDoCheck
    /**
     * Some input property has changed (or its contents changed) in parent component.
     * Update diagram data accordingly
     * @return {?}
     */
    DiagramComponent.prototype.updateFromAppData = 
    // end ngDoCheck
    /**
     * Some input property has changed (or its contents changed) in parent component.
     * Update diagram data accordingly
     * @return {?}
     */
    function () {
        if (!this.diagram)
            return;
        /** @type {?} */
        var model = this.diagram.model;
        // don't need model change listener while performing known data updates
        if (this.modelChangedListener !== null)
            model.removeChangedListener(this.modelChangedListener);
        model.startTransaction('update data');
        model.mergeNodeDataArray(model.cloneDeep(this.nodeDataArray));
        if (this.linkDataArray && model instanceof go.GraphLinksModel) {
            model.mergeLinkDataArray(model.cloneDeep(this.linkDataArray));
        }
        if (this.modelData) {
            model.assignAllDataProperties(model.modelData, this.modelData);
        }
        model.commitTransaction('update data');
        // reset the model change listener
        if (this.modelChangedListener !== null)
            model.addChangedListener(this.modelChangedListener);
    };
    DiagramComponent.decorators = [
        { type: Component, args: [{
                    selector: 'gojs-diagram',
                    template: '<div #ngDiagram [className]=divClassName></div>'
                }] }
    ];
    /** @nocollapse */
    DiagramComponent.ctorParameters = function () { return [
        { type: IterableDiffers },
        { type: KeyValueDiffers },
        { type: NgZone }
    ]; };
    DiagramComponent.propDecorators = {
        initDiagram: [{ type: Input }],
        nodeDataArray: [{ type: Input }],
        linkDataArray: [{ type: Input }],
        modelData: [{ type: Input }],
        divClassName: [{ type: Input }],
        modelChangedListener: [{ type: Input }],
        modelChange: [{ type: Output }],
        diagramDiv: [{ type: ViewChild, args: ['ngDiagram', { static: true },] }]
    };
    return DiagramComponent;
}());
export { DiagramComponent };
if (false) {
    /**
     * Diagram initialization function. Returns a go.Diagram.
     * Do not initialize model data in this function.
     * @type {?}
     */
    DiagramComponent.prototype.initDiagram;
    /** @type {?} */
    DiagramComponent.prototype.nodeDataArray;
    /** @type {?} */
    DiagramComponent.prototype.linkDataArray;
    /** @type {?} */
    DiagramComponent.prototype.modelData;
    /** @type {?} */
    DiagramComponent.prototype.divClassName;
    /** @type {?} */
    DiagramComponent.prototype.modelChangedListener;
    /** @type {?} */
    DiagramComponent.prototype.modelChange;
    /** @type {?} */
    DiagramComponent.prototype.diagramDiv;
    /** @type {?} */
    DiagramComponent.prototype.diagram;
    /**
     * @type {?}
     * @private
     */
    DiagramComponent.prototype._ndaDiffer;
    /**
     * @type {?}
     * @private
     */
    DiagramComponent.prototype._ldaDiffer;
    /**
     * @type {?}
     * @private
     */
    DiagramComponent.prototype._mdDiffer;
    /**
     * @type {?}
     * @private
     */
    DiagramComponent.prototype._differs;
    /**
     * @type {?}
     * @private
     */
    DiagramComponent.prototype._kvdiffers;
    /** @type {?} */
    DiagramComponent.prototype.zone;
}
//# sourceMappingURL=data:application/json;base64,