/**
 * @fileoverview added by tsickle
 * Generated from: lib/palette.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, ElementRef, EventEmitter, Input, IterableDiffers, KeyValueDiffers, NgZone, Output, ViewChild } from '@angular/core';
import * as go from 'gojs';
export class PaletteComponent {
    /**
     * @param {?} _differs
     * @param {?} _kvdiffers
     * @param {?} zone
     */
    constructor(_differs, _kvdiffers, zone) {
        this._differs = _differs;
        this._kvdiffers = _kvdiffers;
        this.zone = zone;
        // Link data for palette. Optional
        this.linkDataArray = null;
        // Model data for palette. Optional
        this.modelData = null;
        // model changed listener function for palette
        this.modelChangedListener = null;
        // event emitter -- fires when palette model changes. Capture this emitted event in parent component
        this.modelChange = new EventEmitter();
        // The Palette itself
        this.palette = null;
        // differs used to check if there have been changed to the array @Inputs
        // without them, changes to the input arrays won't register in ngOnChanges,
        // since the array reference itself may be the same
        this._ndaDiffer = this._differs.find([]).create(null);
        this._ldaDiffer = this._differs.find([]).create(null);
        // also watch if model data changes; this differ must be initialized in ngOnInit
    } // end constructor
    // end constructor
    /**
     * @return {?}
     */
    ngOnInit() {
        // initialize the differ that listens for changes to modelData object
        if (this.modelData) {
            this._mdDiffer = this._kvdiffers.find(this.modelData).create();
        }
    } // end ngOnInit
    // end ngOnInit
    /**
     * Initialize Palette after view init
     * @return {?}
     */
    ngAfterViewInit() {
        if (!this.paletteDiv)
            return;
        this.palette = this.initPalette();
        // This bit of code makes sure the mousemove event listeners on the canvas are run outside NgZone
        // This makes it so change detection isn't triggered every time the mouse is moved inside the canvas, greatly improving performance
        // If some state-altering behavior must happen on a mousemove event inside the palette,
        // you will have to using zone.run() to make sure that event triggers angular change detection
        this.palette.addEventListener = (/**
         * @param {?} DOMElement
         * @param {?} name
         * @param {?} listener
         * @param {?} capture
         * @return {?}
         */
        (DOMElement, name, listener, capture) => {
            /** @type {?} */
            const superAddEventListener = go.Diagram.prototype.addEventListener;
            if (name === 'mousemove') {
                this.zone.runOutsideAngular((/**
                 * @return {?}
                 */
                () => superAddEventListener.call(this, DOMElement, name, listener, capture)));
            }
            else {
                this.zone.run((/**
                 * @return {?}
                 */
                () => {
                    superAddEventListener.call(this, DOMElement, name, listener, capture);
                }));
            }
        });
        // assign the Palette's div, which (among many other things) will attach a bunch of listeners to the canvas,
        // using the overridden addEventListener function above
        /** @type {?} */
        const divRef = this.paletteDiv.nativeElement;
        this.palette.div = divRef;
        // initialize palette model
        this.palette.delayInitialization((/**
         * @return {?}
         */
        () => {
            /** @type {?} */
            const model = this.palette.model;
            model.commit((/**
             * @param {?} m
             * @return {?}
             */
            (m) => {
                m.mergeNodeDataArray(m.cloneDeep(this.nodeDataArray));
                if (this.linkDataArray && m instanceof go.GraphLinksModel) {
                    m.mergeLinkDataArray(m.cloneDeep(this.linkDataArray));
                }
                if (this.modelData) {
                    m.assignAllDataProperties(m.modelData, this.modelData);
                }
            }), null);
        }));
        // initializer listener
        this.modelChangedListener = (/**
         * @param {?} e
         * @return {?}
         */
        (e) => {
            if (e.isTransactionFinished) {
                // this must be done within a NgZone.run block, so changes are detected in the parent component
                this.zone.run((/**
                 * @return {?}
                 */
                () => {
                    /** @type {?} */
                    const dataChanges = (/** @type {?} */ (e.model)).toIncrementalData(e);
                    this.modelChange.emit(dataChanges);
                }));
            }
        });
        this.palette.addModelChangedListener(this.modelChangedListener);
    } // end ngAfterViewInit
    // end ngAfterViewInit
    /**
     * Always be checking if array Input data has changed (node and link data arrays)
     * @return {?}
     */
    ngDoCheck() {
        /** @type {?} */
        const nodeDataArrayChanges = this._ndaDiffer.diff(this.nodeDataArray);
        /** @type {?} */
        const linkDataArrayChanges = this._ldaDiffer.diff(this.linkDataArray);
        /** @type {?} */
        let modelDataChanges = null;
        if (this._mdDiffer) {
            modelDataChanges = this._mdDiffer.diff(this.modelData);
        }
        if (nodeDataArrayChanges || linkDataArrayChanges || modelDataChanges) {
            this.updateFromAppData();
        }
    } // end ngDoCheck
    // end ngDoCheck
    /**
     * Some input property has changed (or its contents changed) in parent component.
     * Update palette data accordingly
     * @return {?}
     */
    updateFromAppData() {
        if (!this.palette)
            return;
        /** @type {?} */
        const model = this.palette.model;
        model.startTransaction('update data');
        model.mergeNodeDataArray(model.cloneDeep(this.nodeDataArray));
        if (this.linkDataArray && model instanceof go.GraphLinksModel) {
            model.mergeLinkDataArray(model.cloneDeep(this.linkDataArray));
        }
        if (this.modelData) {
            model.assignAllDataProperties(model.modelData, this.modelData);
        }
        model.commitTransaction('update data');
    }
}
PaletteComponent.decorators = [
    { type: Component, args: [{
                selector: 'gojs-palette',
                template: '<div #ngPalette [className]=divClassName></div>'
            }] }
];
/** @nocollapse */
PaletteComponent.ctorParameters = () => [
    { type: IterableDiffers },
    { type: KeyValueDiffers },
    { type: NgZone }
];
PaletteComponent.propDecorators = {
    initPalette: [{ type: Input }],
    nodeDataArray: [{ type: Input }],
    linkDataArray: [{ type: Input }],
    modelData: [{ type: Input }],
    divClassName: [{ type: Input }],
    modelChangedListener: [{ type: Input }],
    modelChange: [{ type: Output }],
    paletteDiv: [{ type: ViewChild, args: ['ngPalette', { static: true },] }]
};
if (false) {
    /**
     * Palette initialization function. Returns a go.Palette.
     * Do not initialize model data in this function.
     * @type {?}
     */
    PaletteComponent.prototype.initPalette;
    /** @type {?} */
    PaletteComponent.prototype.nodeDataArray;
    /** @type {?} */
    PaletteComponent.prototype.linkDataArray;
    /** @type {?} */
    PaletteComponent.prototype.modelData;
    /** @type {?} */
    PaletteComponent.prototype.divClassName;
    /** @type {?} */
    PaletteComponent.prototype.modelChangedListener;
    /** @type {?} */
    PaletteComponent.prototype.modelChange;
    /** @type {?} */
    PaletteComponent.prototype.paletteDiv;
    /** @type {?} */
    PaletteComponent.prototype.palette;
    /** @type {?} */
    PaletteComponent.prototype._ndaDiffer;
    /** @type {?} */
    PaletteComponent.prototype._ldaDiffer;
    /**
     * @type {?}
     * @private
     */
    PaletteComponent.prototype._mdDiffer;
    /**
     * @type {?}
     * @private
     */
    PaletteComponent.prototype._differs;
    /**
     * @type {?}
     * @private
     */
    PaletteComponent.prototype._kvdiffers;
    /** @type {?} */
    PaletteComponent.prototype.zone;
}
//# sourceMappingURL=data:application/json;base64,