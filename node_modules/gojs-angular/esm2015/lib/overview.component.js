/**
 * @fileoverview added by tsickle
 * Generated from: lib/overview.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, ElementRef, Input, NgZone, ViewChild } from '@angular/core';
import * as go from 'gojs';
export class OverviewComponent {
    /**
     * @param {?} zone
     */
    constructor(zone) {
        this.zone = zone;
        // The Diagram to observe with the Overview
        this.observedDiagram = null;
        // The Overview itself
        this.overview = null;
    }
    /**
     * Initialize the overview
     * @return {?}
     */
    ngAfterViewInit() {
        if (!this.overviewDiv)
            return;
        if (this.initOverview) {
            this.overview = this.initOverview();
        }
        else {
            this.overview = new go.Overview();
            this.overview.contentAlignment = go.Spot.Center;
        }
        // This bit of code makes sure the mousemove event listeners on the canvas are run outside NgZone
        // This makes it so change detection isn't triggered every time the mouse is moved inside the canvas, greatly improving performance
        // If some state-altering behavior must happen on a mousemove event inside the overview,
        // you will have to using zone.run() to make sure that event triggers angular change detection
        this.overview.addEventListener = (/**
         * @param {?} DOMElement
         * @param {?} name
         * @param {?} listener
         * @param {?} capture
         * @return {?}
         */
        (DOMElement, name, listener, capture) => {
            /** @type {?} */
            const superAddEventListener = go.Diagram.prototype.addEventListener;
            if (name === 'mousemove') {
                this.zone.runOutsideAngular((/**
                 * @return {?}
                 */
                () => superAddEventListener.call(this, DOMElement, name, listener, capture)));
            }
            else {
                this.zone.run((/**
                 * @return {?}
                 */
                () => {
                    superAddEventListener.call(this, DOMElement, name, listener, capture);
                }));
            }
        });
        this.overview.div = this.overviewDiv.nativeElement;
    }
    /**
     * Only update when the observed diagram changes
     * @param {?} changes
     * @return {?}
     */
    ngOnChanges(changes) {
        if (!this.overview)
            return;
        if (changes && changes.observedDiagram && changes.observedDiagram.currentValue !== changes.observedDiagram.previousValue) {
            this.overview.observed = changes.observedDiagram.currentValue;
        }
    }
}
OverviewComponent.decorators = [
    { type: Component, args: [{
                selector: 'gojs-overview',
                template: '<div #ngOverview [className]=divClassName></div>'
            }] }
];
/** @nocollapse */
OverviewComponent.ctorParameters = () => [
    { type: NgZone }
];
OverviewComponent.propDecorators = {
    initOverview: [{ type: Input }],
    divClassName: [{ type: Input }],
    observedDiagram: [{ type: Input }],
    overviewDiv: [{ type: ViewChild, args: ['ngOverview', { static: true },] }]
};
if (false) {
    /** @type {?} */
    OverviewComponent.prototype.initOverview;
    /** @type {?} */
    OverviewComponent.prototype.divClassName;
    /** @type {?} */
    OverviewComponent.prototype.observedDiagram;
    /** @type {?} */
    OverviewComponent.prototype.overviewDiv;
    /** @type {?} */
    OverviewComponent.prototype.overview;
    /** @type {?} */
    OverviewComponent.prototype.zone;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoib3ZlcnZpZXcuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6Im5nOi8vZ29qcy1hbmd1bGFyLyIsInNvdXJjZXMiOlsibGliL292ZXJ2aWV3LmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQUUsVUFBVSxFQUFFLEtBQUssRUFBRSxNQUFNLEVBQWlCLFNBQVMsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUMvRixPQUFPLEtBQUssRUFBRSxNQUFNLE1BQU0sQ0FBQztBQU0zQixNQUFNLE9BQU8saUJBQWlCOzs7O0lBZ0I1QixZQUFtQixJQUFZO1FBQVosU0FBSSxHQUFKLElBQUksQ0FBUTs7UUFQZixvQkFBZSxHQUFlLElBQUksQ0FBQzs7UUFLNUMsYUFBUSxHQUF1QixJQUFJLENBQUM7SUFFUixDQUFDOzs7OztJQUs3QixlQUFlO1FBQ3BCLElBQUksQ0FBQyxJQUFJLENBQUMsV0FBVztZQUFFLE9BQU87UUFDOUIsSUFBSSxJQUFJLENBQUMsWUFBWSxFQUFFO1lBQ3JCLElBQUksQ0FBQyxRQUFRLEdBQUcsSUFBSSxDQUFDLFlBQVksRUFBRSxDQUFDO1NBQ3JDO2FBQU07WUFDTCxJQUFJLENBQUMsUUFBUSxHQUFHLElBQUksRUFBRSxDQUFDLFFBQVEsRUFBRSxDQUFDO1lBQ2xDLElBQUksQ0FBQyxRQUFRLENBQUMsZ0JBQWdCLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUM7U0FDakQ7UUFFRCxpR0FBaUc7UUFDakcsbUlBQW1JO1FBQ25JLHdGQUF3RjtRQUN4Riw4RkFBOEY7UUFDOUYsSUFBSSxDQUFDLFFBQVEsQ0FBQyxnQkFBZ0I7Ozs7Ozs7UUFBRyxDQUFDLFVBQXVDLEVBQUUsSUFBWSxFQUFFLFFBQWEsRUFBRSxPQUFnQixFQUFFLEVBQUU7O2tCQUNwSCxxQkFBcUIsR0FBRyxFQUFFLENBQUMsT0FBTyxDQUFDLFNBQVMsQ0FBQyxnQkFBZ0I7WUFDbkUsSUFBSSxJQUFJLEtBQUssV0FBVyxFQUFFO2dCQUN4QixJQUFJLENBQUMsSUFBSSxDQUFDLGlCQUFpQjs7O2dCQUFDLEdBQUcsRUFBRSxDQUFDLHFCQUFxQixDQUFDLElBQUksQ0FBQyxJQUFJLEVBQUUsVUFBVSxFQUFFLElBQUksRUFBRSxRQUFRLEVBQUUsT0FBTyxDQUFDLEVBQUMsQ0FBQzthQUMxRztpQkFBTTtnQkFDTCxJQUFJLENBQUMsSUFBSSxDQUFDLEdBQUc7OztnQkFBQyxHQUFHLEVBQUU7b0JBQ2pCLHFCQUFxQixDQUFDLElBQUksQ0FBQyxJQUFJLEVBQUUsVUFBVSxFQUFFLElBQUksRUFBRSxRQUFRLEVBQUUsT0FBTyxDQUFDLENBQUM7Z0JBQ3hFLENBQUMsRUFBQyxDQUFDO2FBQ0o7UUFDSCxDQUFDLENBQUEsQ0FBQztRQUVGLElBQUksQ0FBQyxRQUFRLENBQUMsR0FBRyxHQUFHLElBQUksQ0FBQyxXQUFXLENBQUMsYUFBYSxDQUFDO0lBQ3JELENBQUM7Ozs7OztJQU1NLFdBQVcsQ0FBQyxPQUFzQjtRQUN2QyxJQUFJLENBQUMsSUFBSSxDQUFDLFFBQVE7WUFBRSxPQUFPO1FBQzNCLElBQUksT0FBTyxJQUFJLE9BQU8sQ0FBQyxlQUFlLElBQUksT0FBTyxDQUFDLGVBQWUsQ0FBQyxZQUFZLEtBQUssT0FBTyxDQUFDLGVBQWUsQ0FBQyxhQUFhLEVBQUU7WUFDeEgsSUFBSSxDQUFDLFFBQVEsQ0FBQyxRQUFRLEdBQUcsT0FBTyxDQUFDLGVBQWUsQ0FBQyxZQUFZLENBQUM7U0FDL0Q7SUFDSCxDQUFDOzs7WUE3REYsU0FBUyxTQUFDO2dCQUNULFFBQVEsRUFBRSxlQUFlO2dCQUN6QixRQUFRLEVBQUUsa0RBQWtEO2FBQzdEOzs7O1lBTnNDLE1BQU07OzsyQkFVMUMsS0FBSzsyQkFHTCxLQUFLOzhCQUdMLEtBQUs7MEJBRUwsU0FBUyxTQUFDLFlBQVksRUFBRSxFQUFFLE1BQU0sRUFBRSxJQUFJLEVBQUU7Ozs7SUFSekMseUNBQWdEOztJQUdoRCx5Q0FBcUM7O0lBR3JDLDRDQUFtRDs7SUFFbkQsd0NBQTBFOztJQUcxRSxxQ0FBMkM7O0lBRS9CLGlDQUFtQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbXBvbmVudCwgRWxlbWVudFJlZiwgSW5wdXQsIE5nWm9uZSwgU2ltcGxlQ2hhbmdlcywgVmlld0NoaWxkIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCAqIGFzIGdvIGZyb20gJ2dvanMnO1xyXG5cclxuQENvbXBvbmVudCh7XHJcbiAgc2VsZWN0b3I6ICdnb2pzLW92ZXJ2aWV3JyxcclxuICB0ZW1wbGF0ZTogJzxkaXYgI25nT3ZlcnZpZXcgW2NsYXNzTmFtZV09ZGl2Q2xhc3NOYW1lPjwvZGl2PidcclxufSlcclxuZXhwb3J0IGNsYXNzIE92ZXJ2aWV3Q29tcG9uZW50IHtcclxuXHJcbiAgLy8gVGhlIGZ1bmN0aW9uIHVzZWQgdG8gaW5pdGlhbGl6ZSB0aGUgT3ZlcnZpZXdcclxuICBASW5wdXQoKSBwdWJsaWMgaW5pdE92ZXJ2aWV3OiAoKSA9PiBnby5PdmVydmlldztcclxuXHJcbiAgLy8gT3ZlcnZpZXcgZGl2IGNsYXNzIG5hbWUuIFVzZSB0aGlzIG5hbWUgdG8gc3R5bGUgeW91ciBPdmVydmlldyBpbiBDU1NcclxuICBASW5wdXQoKSBwdWJsaWMgZGl2Q2xhc3NOYW1lOiBzdHJpbmc7XHJcblxyXG4gIC8vIFRoZSBEaWFncmFtIHRvIG9ic2VydmUgd2l0aCB0aGUgT3ZlcnZpZXdcclxuICBASW5wdXQoKSBwdWJsaWMgb2JzZXJ2ZWREaWFncmFtOiBnby5EaWFncmFtID0gbnVsbDtcclxuXHJcbiAgQFZpZXdDaGlsZCgnbmdPdmVydmlldycsIHsgc3RhdGljOiB0cnVlIH0pIHB1YmxpYyBvdmVydmlld0RpdjogRWxlbWVudFJlZjtcclxuXHJcbiAgLy8gVGhlIE92ZXJ2aWV3IGl0c2VsZlxyXG4gIHB1YmxpYyBvdmVydmlldzogZ28uT3ZlcnZpZXcgfCBudWxsID0gbnVsbDtcclxuXHJcbiAgY29uc3RydWN0b3IocHVibGljIHpvbmU6IE5nWm9uZSkgeyB9XHJcblxyXG4gIC8qKlxyXG4gICAqIEluaXRpYWxpemUgdGhlIG92ZXJ2aWV3XHJcbiAgICovXHJcbiAgcHVibGljIG5nQWZ0ZXJWaWV3SW5pdCgpIHtcclxuICAgIGlmICghdGhpcy5vdmVydmlld0RpdikgcmV0dXJuO1xyXG4gICAgaWYgKHRoaXMuaW5pdE92ZXJ2aWV3KSB7XHJcbiAgICAgIHRoaXMub3ZlcnZpZXcgPSB0aGlzLmluaXRPdmVydmlldygpO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgdGhpcy5vdmVydmlldyA9IG5ldyBnby5PdmVydmlldygpO1xyXG4gICAgICB0aGlzLm92ZXJ2aWV3LmNvbnRlbnRBbGlnbm1lbnQgPSBnby5TcG90LkNlbnRlcjtcclxuICAgIH1cclxuXHJcbiAgICAvLyBUaGlzIGJpdCBvZiBjb2RlIG1ha2VzIHN1cmUgdGhlIG1vdXNlbW92ZSBldmVudCBsaXN0ZW5lcnMgb24gdGhlIGNhbnZhcyBhcmUgcnVuIG91dHNpZGUgTmdab25lXHJcbiAgICAvLyBUaGlzIG1ha2VzIGl0IHNvIGNoYW5nZSBkZXRlY3Rpb24gaXNuJ3QgdHJpZ2dlcmVkIGV2ZXJ5IHRpbWUgdGhlIG1vdXNlIGlzIG1vdmVkIGluc2lkZSB0aGUgY2FudmFzLCBncmVhdGx5IGltcHJvdmluZyBwZXJmb3JtYW5jZVxyXG4gICAgLy8gSWYgc29tZSBzdGF0ZS1hbHRlcmluZyBiZWhhdmlvciBtdXN0IGhhcHBlbiBvbiBhIG1vdXNlbW92ZSBldmVudCBpbnNpZGUgdGhlIG92ZXJ2aWV3LFxyXG4gICAgLy8geW91IHdpbGwgaGF2ZSB0byB1c2luZyB6b25lLnJ1bigpIHRvIG1ha2Ugc3VyZSB0aGF0IGV2ZW50IHRyaWdnZXJzIGFuZ3VsYXIgY2hhbmdlIGRldGVjdGlvblxyXG4gICAgdGhpcy5vdmVydmlldy5hZGRFdmVudExpc3RlbmVyID0gKERPTUVsZW1lbnQ6IEVsZW1lbnQgfCBXaW5kb3cgfCBEb2N1bWVudCwgbmFtZTogc3RyaW5nLCBsaXN0ZW5lcjogYW55LCBjYXB0dXJlOiBib29sZWFuKSA9PiB7XHJcbiAgICAgIGNvbnN0IHN1cGVyQWRkRXZlbnRMaXN0ZW5lciA9IGdvLkRpYWdyYW0ucHJvdG90eXBlLmFkZEV2ZW50TGlzdGVuZXI7XHJcbiAgICAgIGlmIChuYW1lID09PSAnbW91c2Vtb3ZlJykge1xyXG4gICAgICAgIHRoaXMuem9uZS5ydW5PdXRzaWRlQW5ndWxhcigoKSA9PiBzdXBlckFkZEV2ZW50TGlzdGVuZXIuY2FsbCh0aGlzLCBET01FbGVtZW50LCBuYW1lLCBsaXN0ZW5lciwgY2FwdHVyZSkpO1xyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIHRoaXMuem9uZS5ydW4oKCkgPT4ge1xyXG4gICAgICAgICAgc3VwZXJBZGRFdmVudExpc3RlbmVyLmNhbGwodGhpcywgRE9NRWxlbWVudCwgbmFtZSwgbGlzdGVuZXIsIGNhcHR1cmUpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICB9XHJcbiAgICB9O1xyXG5cclxuICAgIHRoaXMub3ZlcnZpZXcuZGl2ID0gdGhpcy5vdmVydmlld0Rpdi5uYXRpdmVFbGVtZW50O1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogT25seSB1cGRhdGUgd2hlbiB0aGUgb2JzZXJ2ZWQgZGlhZ3JhbSBjaGFuZ2VzXHJcbiAgICogQHBhcmFtIGNoYW5nZXNcclxuICAgKi9cclxuICBwdWJsaWMgbmdPbkNoYW5nZXMoY2hhbmdlczogU2ltcGxlQ2hhbmdlcykge1xyXG4gICAgaWYgKCF0aGlzLm92ZXJ2aWV3KSByZXR1cm47XHJcbiAgICBpZiAoY2hhbmdlcyAmJiBjaGFuZ2VzLm9ic2VydmVkRGlhZ3JhbSAmJiBjaGFuZ2VzLm9ic2VydmVkRGlhZ3JhbS5jdXJyZW50VmFsdWUgIT09IGNoYW5nZXMub2JzZXJ2ZWREaWFncmFtLnByZXZpb3VzVmFsdWUpIHtcclxuICAgICAgdGhpcy5vdmVydmlldy5vYnNlcnZlZCA9IGNoYW5nZXMub2JzZXJ2ZWREaWFncmFtLmN1cnJlbnRWYWx1ZTtcclxuICAgIH1cclxuICB9XHJcblxyXG59XHJcbiJdfQ==