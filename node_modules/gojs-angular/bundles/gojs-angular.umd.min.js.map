{"version":3,"sources":["ng://gojs-angular/lib/diagram.component.ts","ng://gojs-angular/lib/palette.component.ts","ng://gojs-angular/lib/overview.component.ts","ng://gojs-angular/lib/gojs-angular.module.ts","ng://gojs-angular/lib/data-sync.service.ts"],"names":["DiagramComponent","_differs","_kvdiffers","zone","this","linkDataArray","modelData","modelChangedListener","modelChange","EventEmitter","diagram","_ndaDiffer","find","create","_ldaDiffer","prototype","ngOnInit","_mdDiffer","ngAfterViewInit","_this","initDiagram","addEventListener","DOMElement","name","listener","capture","superAddEventListener","go.Diagram","runOutsideAngular","call","run","divRef","diagramDiv","nativeElement","div","delayInitialization","model","commit","m","mergeNodeDataArray","cloneDeep","nodeDataArray","go.GraphLinksModel","mergeLinkDataArray","assignAllDataProperties","e","isTransactionFinished","dataChanges","toIncrementalData","emit","addModelChangedListener","ngDoCheck","nodeDataArrayChanges","diff","linkDataArrayChanges","modelDataChanges","updateFromAppData","removeChangedListener","startTransaction","commitTransaction","addChangedListener","Component","args","selector","template","IterableDiffers","KeyValueDiffers","NgZone","Input","Output","ViewChild","static","PaletteComponent","palette","paletteDiv","initPalette","OverviewComponent","observedDiagram","overview","overviewDiv","initOverview","go.Overview","contentAlignment","go.Spot","Center","ngOnChanges","changes","currentValue","previousValue","observed","GojsAngularModule","NgModule","declarations","imports","exports","DataSyncService","syncNodeData","nodeData","modifiedNodeData","insertedNodeKeys","removedNodeKeys","modifiedNodesMap","go.Map","forEach","nd","set","key","i","length","get","push","filter","includes","syncLinkData","linkData","modifiedLinkData","insertedLinkKeys","removedLinkKeys","modifiedLinksMap","ld","syncModelData","Injectable","providedIn"],"mappings":"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","sourcesContent":["import { Component, ElementRef, EventEmitter, Input, IterableDiffers, KeyValueDiffer, KeyValueDiffers, NgZone, Output, ViewChild } from '@angular/core';\r\nimport * as go from 'gojs';\r\n\r\n@Component({\r\n  selector: 'gojs-diagram',\r\n  template: '<div #ngDiagram [className]=divClassName></div>'\r\n})\r\nexport class DiagramComponent {\r\n\r\n  /**\r\n   * Diagram initialization function. Returns a go.Diagram.\r\n   * Do not initialize model data in this function.\r\n   */\r\n  @Input() public initDiagram: () => go.Diagram;\r\n\r\n  // Node data for diagram\r\n  @Input() public nodeDataArray: Array<go.ObjectData>;\r\n\r\n  // Link data for diagram\r\n  @Input() public linkDataArray: Array<go.ObjectData> = null; // optional\r\n\r\n  // Model data for diagram\r\n  @Input() public modelData: go.ObjectData = null; // optional\r\n\r\n  // Diagram div class name. Use this name to style your diagram in CSS\r\n  @Input() public divClassName: string;\r\n\r\n  // model changed listener function for diagram\r\n  @Input() public modelChangedListener: (e: go.ChangedEvent) => void | null = null;\r\n\r\n  // event emitter -- fires when diagram model changes. Capture this emitted event in parent component\r\n  @Output() public modelChange: EventEmitter<go.IncrementalData> = new EventEmitter<go.IncrementalData>();\r\n\r\n  @ViewChild('ngDiagram', { static: true }) public diagramDiv: ElementRef;\r\n  public diagram: go.Diagram = null;\r\n\r\n  // differs for array inputs (node / link data arrays)\r\n  private _ndaDiffer: any;\r\n  private _ldaDiffer: any;\r\n  // differ for modelData object\r\n  private _mdDiffer: KeyValueDiffer<string, any>;\r\n\r\n\r\n  constructor(private _differs: IterableDiffers, private _kvdiffers: KeyValueDiffers, public zone: NgZone) {\r\n    // differs used to check if there have been changed to the array @Inputs\r\n    // without them, changes to the input arrays won't register in ngOnChanges,\r\n    // since the array reference itself may be the same\r\n    this._ndaDiffer = this._differs.find([]).create(null);\r\n    this._ldaDiffer = this._differs.find([]).create(null);\r\n\r\n    // also watch if model data changes; this differ must be initialized in ngOnInit\r\n  }\r\n\r\n  public ngOnInit() {\r\n    // initialize the differ that listens for changes to modelData object\r\n    if (this.modelData) {\r\n      this._mdDiffer = this._kvdiffers.find(this.modelData).create();\r\n    }\r\n  } // end ngOnInit\r\n\r\n  /**\r\n   * Initializes diagram / model after view init\r\n   */\r\n  public ngAfterViewInit() {\r\n    this.diagram = this.initDiagram();\r\n\r\n    // This bit of code makes sure the mousemove event listeners on the canvas are run outside NgZone\r\n    // This makes it so change detection isn't triggered every time the mouse is moved inside the canvas, greatly improving performance\r\n    // If some state-altering behavior must happen on a mousemove event inside the diagram,\r\n    // you will have to using zone.run() to make sure that event triggers angular change detection\r\n    this.diagram.addEventListener = (DOMElement: Element | Window | Document, name: string, listener: any, capture: boolean) => {\r\n      const superAddEventListener = go.Diagram.prototype.addEventListener;\r\n      if (name === 'mousemove') {\r\n        this.zone.runOutsideAngular(() => superAddEventListener.call(this, DOMElement, name, listener, capture));\r\n      } else {\r\n        this.zone.run(() => {\r\n          superAddEventListener.call(this, DOMElement, name, listener, capture);\r\n        });\r\n      }\r\n    };\r\n\r\n    // assign the Diagram's div, which (among many other things) will attach a bunch of listeners to the canvas,\r\n    // using the overridden addEventListener function above\r\n    const divRef = this.diagramDiv.nativeElement;\r\n    if (divRef === null) return;\r\n    this.diagram.div = divRef;\r\n\r\n    // initialize the Diagram's model\r\n    this.diagram.delayInitialization(() => {\r\n      const model = this.diagram.model;\r\n      model.commit((m: go.Model) => {\r\n        m.mergeNodeDataArray(m.cloneDeep(this.nodeDataArray));\r\n        if (this.linkDataArray && m instanceof go.GraphLinksModel) {\r\n          m.mergeLinkDataArray(m.cloneDeep(this.linkDataArray));\r\n        }\r\n        if (this.modelData) {\r\n          m.assignAllDataProperties(m.modelData, this.modelData);\r\n        }\r\n      }, null);\r\n    });\r\n\r\n    // initializer listener\r\n    this.modelChangedListener = (e: go.ChangedEvent) => {\r\n      if (e.isTransactionFinished) {\r\n        // this must be done within a NgZone.run block, so changes are detected in the parent component\r\n        this.zone.run(() => {\r\n          const dataChanges = e.model!.toIncrementalData(e);\r\n          this.modelChange.emit(dataChanges);\r\n        });\r\n      }\r\n    };\r\n    this.diagram.addModelChangedListener(this.modelChangedListener);\r\n\r\n  } // end ngAfterViewInit\r\n\r\n  /**\r\n   * Always be checking if array Input data has changed (node and link data arrays)\r\n   */\r\n  public ngDoCheck() {\r\n    const nodeDataArrayChanges = this._ndaDiffer.diff(this.nodeDataArray);\r\n    const linkDataArrayChanges = this._ldaDiffer.diff(this.linkDataArray);\r\n    let modelDataChanges = null;\r\n    if (this._mdDiffer) {\r\n      modelDataChanges = this._mdDiffer.diff(this.modelData);\r\n    }\r\n    if (nodeDataArrayChanges || linkDataArrayChanges || modelDataChanges) {\r\n      this.updateFromAppData();\r\n    }\r\n  } // end ngDoCheck\r\n\r\n  /**\r\n   * Some input property has changed (or its contents changed) in parent component.\r\n   * Update diagram data accordingly\r\n   */\r\n  public updateFromAppData() {\r\n    if (!this.diagram) return;\r\n    const model = this.diagram.model;\r\n    // don't need model change listener while performing known data updates\r\n    if (this.modelChangedListener !== null) model.removeChangedListener(this.modelChangedListener);\r\n\r\n    model.startTransaction('update data');\r\n    model.mergeNodeDataArray(model.cloneDeep(this.nodeDataArray));\r\n    if (this.linkDataArray && model instanceof go.GraphLinksModel) {\r\n      model.mergeLinkDataArray(model.cloneDeep(this.linkDataArray));\r\n    }\r\n    if (this.modelData) {\r\n      model.assignAllDataProperties(model.modelData, this.modelData);\r\n    }\r\n    model.commitTransaction('update data');\r\n\r\n    // reset the model change listener\r\n    if (this.modelChangedListener !== null) model.addChangedListener(this.modelChangedListener);\r\n  }\r\n\r\n}\r\n","import { Component, ElementRef, EventEmitter, Input, IterableDiffers, KeyValueDiffer, KeyValueDiffers, NgZone, Output, ViewChild } from '@angular/core';\r\nimport * as go from 'gojs';\r\n@Component({\r\n  selector: 'gojs-palette',\r\n  template: '<div #ngPalette [className]=divClassName></div>'\r\n})\r\nexport class PaletteComponent {\r\n\r\n  /**\r\n   * Palette initialization function. Returns a go.Palette.\r\n   * Do not initialize model data in this function.\r\n   */\r\n  @Input() public initPalette: () => go.Palette;\r\n\r\n  // Node data for palette\r\n  @Input() public nodeDataArray: Array<go.ObjectData>;\r\n\r\n  // Link data for palette. Optional\r\n  @Input() public linkDataArray: Array<go.ObjectData> = null;\r\n\r\n  // Model data for palette. Optional\r\n  @Input() public modelData: go.ObjectData = null;\r\n\r\n  // Palette div class name. Use this name to style your palette in CSS\r\n  @Input() public divClassName: string;\r\n\r\n  // model changed listener function for palette\r\n  @Input() public modelChangedListener: (e: go.ChangedEvent) => void | null = null;\r\n\r\n  // event emitter -- fires when palette model changes. Capture this emitted event in parent component\r\n  @Output() public modelChange: EventEmitter<go.IncrementalData> = new EventEmitter<go.IncrementalData>();\r\n\r\n  @ViewChild('ngPalette', { static: true }) public paletteDiv: ElementRef;\r\n\r\n  // The Palette itself\r\n  public palette: go.Palette | null = null;\r\n\r\n  // Differs for array Inputs (link / node data arrays)\r\n  public _ndaDiffer: any;\r\n  public _ldaDiffer: any;\r\n\r\n  // differ for modelData object\r\n  private _mdDiffer: KeyValueDiffer<string, any>;\r\n\r\n  constructor(private _differs: IterableDiffers, private _kvdiffers: KeyValueDiffers, public zone: NgZone) {\r\n    // differs used to check if there have been changed to the array @Inputs\r\n    // without them, changes to the input arrays won't register in ngOnChanges,\r\n    // since the array reference itself may be the same\r\n    this._ndaDiffer = this._differs.find([]).create(null);\r\n    this._ldaDiffer = this._differs.find([]).create(null);\r\n\r\n    // also watch if model data changes; this differ must be initialized in ngOnInit\r\n  } // end constructor\r\n\r\n  public ngOnInit() {\r\n    // initialize the differ that listens for changes to modelData object\r\n    if (this.modelData) {\r\n      this._mdDiffer = this._kvdiffers.find(this.modelData).create();\r\n    }\r\n  } // end ngOnInit\r\n\r\n  /**\r\n   * Initialize Palette after view init\r\n   */\r\n  public ngAfterViewInit() {\r\n    if (!this.paletteDiv) return;\r\n\r\n    this.palette = this.initPalette();\r\n\r\n    // This bit of code makes sure the mousemove event listeners on the canvas are run outside NgZone\r\n    // This makes it so change detection isn't triggered every time the mouse is moved inside the canvas, greatly improving performance\r\n    // If some state-altering behavior must happen on a mousemove event inside the palette,\r\n    // you will have to using zone.run() to make sure that event triggers angular change detection\r\n    this.palette.addEventListener = (DOMElement: Element | Window | Document, name: string, listener: any, capture: boolean) => {\r\n      const superAddEventListener = go.Diagram.prototype.addEventListener;\r\n      if (name === 'mousemove') {\r\n        this.zone.runOutsideAngular(() => superAddEventListener.call(this, DOMElement, name, listener, capture));\r\n      } else {\r\n        this.zone.run(() => {\r\n          superAddEventListener.call(this, DOMElement, name, listener, capture);\r\n        });\r\n      }\r\n    };\r\n\r\n    // assign the Palette's div, which (among many other things) will attach a bunch of listeners to the canvas,\r\n    // using the overridden addEventListener function above\r\n    const divRef = this.paletteDiv.nativeElement;\r\n    this.palette.div = divRef;\r\n\r\n    // initialize palette model\r\n    this.palette.delayInitialization(() => {\r\n      const model = this.palette.model;\r\n      model.commit((m: go.Model) => {\r\n        m.mergeNodeDataArray(m.cloneDeep(this.nodeDataArray));\r\n        if (this.linkDataArray && m instanceof go.GraphLinksModel) {\r\n          m.mergeLinkDataArray(m.cloneDeep(this.linkDataArray));\r\n        }\r\n        if (this.modelData) {\r\n          m.assignAllDataProperties(m.modelData, this.modelData);\r\n        }\r\n      }, null);\r\n    });\r\n\r\n\r\n    // initializer listener\r\n    this.modelChangedListener = (e: go.ChangedEvent) => {\r\n      if (e.isTransactionFinished) {\r\n        // this must be done within a NgZone.run block, so changes are detected in the parent component\r\n        this.zone.run(() => {\r\n          const dataChanges = e.model!.toIncrementalData(e);\r\n          this.modelChange.emit(dataChanges);\r\n        });\r\n      }\r\n    };\r\n    this.palette.addModelChangedListener(this.modelChangedListener);\r\n  } // end ngAfterViewInit\r\n\r\n  /**\r\n   * Always be checking if array Input data has changed (node and link data arrays)\r\n   */\r\n  public ngDoCheck() {\r\n    const nodeDataArrayChanges = this._ndaDiffer.diff(this.nodeDataArray);\r\n    const linkDataArrayChanges = this._ldaDiffer.diff(this.linkDataArray);\r\n    let modelDataChanges = null;\r\n    if (this._mdDiffer) {\r\n      modelDataChanges = this._mdDiffer.diff(this.modelData);\r\n    }\r\n    if (nodeDataArrayChanges || linkDataArrayChanges || modelDataChanges) {\r\n      this.updateFromAppData();\r\n    }\r\n  } // end ngDoCheck\r\n\r\n  /**\r\n   * Some input property has changed (or its contents changed) in parent component.\r\n   * Update palette data accordingly\r\n   */\r\n  public updateFromAppData() {\r\n    if (!this.palette) return;\r\n    const model = this.palette.model;\r\n\r\n    model.startTransaction('update data');\r\n    model.mergeNodeDataArray(model.cloneDeep(this.nodeDataArray));\r\n    if (this.linkDataArray && model instanceof go.GraphLinksModel) {\r\n      model.mergeLinkDataArray(model.cloneDeep(this.linkDataArray));\r\n    }\r\n    if (this.modelData) {\r\n      model.assignAllDataProperties(model.modelData, this.modelData);\r\n    }\r\n    model.commitTransaction('update data');\r\n\r\n  }\r\n\r\n}\r\n","import { Component, ElementRef, Input, NgZone, SimpleChanges, ViewChild } from '@angular/core';\r\nimport * as go from 'gojs';\r\n\r\n@Component({\r\n  selector: 'gojs-overview',\r\n  template: '<div #ngOverview [className]=divClassName></div>'\r\n})\r\nexport class OverviewComponent {\r\n\r\n  // The function used to initialize the Overview\r\n  @Input() public initOverview: () => go.Overview;\r\n\r\n  // Overview div class name. Use this name to style your Overview in CSS\r\n  @Input() public divClassName: string;\r\n\r\n  // The Diagram to observe with the Overview\r\n  @Input() public observedDiagram: go.Diagram = null;\r\n\r\n  @ViewChild('ngOverview', { static: true }) public overviewDiv: ElementRef;\r\n\r\n  // The Overview itself\r\n  public overview: go.Overview | null = null;\r\n\r\n  constructor(public zone: NgZone) { }\r\n\r\n  /**\r\n   * Initialize the overview\r\n   */\r\n  public ngAfterViewInit() {\r\n    if (!this.overviewDiv) return;\r\n    if (this.initOverview) {\r\n      this.overview = this.initOverview();\r\n    } else {\r\n      this.overview = new go.Overview();\r\n      this.overview.contentAlignment = go.Spot.Center;\r\n    }\r\n\r\n    // This bit of code makes sure the mousemove event listeners on the canvas are run outside NgZone\r\n    // This makes it so change detection isn't triggered every time the mouse is moved inside the canvas, greatly improving performance\r\n    // If some state-altering behavior must happen on a mousemove event inside the overview,\r\n    // you will have to using zone.run() to make sure that event triggers angular change detection\r\n    this.overview.addEventListener = (DOMElement: Element | Window | Document, name: string, listener: any, capture: boolean) => {\r\n      const superAddEventListener = go.Diagram.prototype.addEventListener;\r\n      if (name === 'mousemove') {\r\n        this.zone.runOutsideAngular(() => superAddEventListener.call(this, DOMElement, name, listener, capture));\r\n      } else {\r\n        this.zone.run(() => {\r\n          superAddEventListener.call(this, DOMElement, name, listener, capture);\r\n        });\r\n      }\r\n    };\r\n\r\n    this.overview.div = this.overviewDiv.nativeElement;\r\n  }\r\n\r\n  /**\r\n   * Only update when the observed diagram changes\r\n   * @param changes\r\n   */\r\n  public ngOnChanges(changes: SimpleChanges) {\r\n    if (!this.overview) return;\r\n    if (changes && changes.observedDiagram && changes.observedDiagram.currentValue !== changes.observedDiagram.previousValue) {\r\n      this.overview.observed = changes.observedDiagram.currentValue;\r\n    }\r\n  }\r\n\r\n}\r\n","import { NgModule } from '@angular/core';\nimport { DiagramComponent } from './diagram.component';\nimport { OverviewComponent } from './overview.component';\nimport { PaletteComponent } from './palette.component';\n\n@NgModule({\n  declarations: [\n    DiagramComponent,\n    OverviewComponent,\n    PaletteComponent\n  ],\n  imports: [\n  ],\n  exports: [\n    DiagramComponent,\n    OverviewComponent,\n    PaletteComponent\n  ]\n})\nexport class GojsAngularModule { }\n","import { Injectable } from '@angular/core';\r\nimport * as go from 'gojs';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class DataSyncService {\r\n\r\n  constructor() { }\r\n\r\n  /**\r\n   * Sync a node data array with a set of changes\r\n   * @param changes The set of changes to the GoJS model\r\n   * @param nodeData The node data array to merge these changes with\r\n   * @returns A node data array, merged with the changes\r\n   */\r\n  public static syncNodeData(changes: go.IncrementalData, nodeData: Array<go.ObjectData>) {\r\n    if (!changes) return nodeData;\r\n    if (!changes.modifiedNodeData && !changes.insertedNodeKeys && !changes.removedNodeKeys) return nodeData;\r\n\r\n    // maintain a map of modified nodes for fast lookup during insertion\r\n    const modifiedNodesMap = new go.Map<go.Key, go.ObjectData>();\r\n\r\n    // account for modified node data\r\n    if (changes.modifiedNodeData) {\r\n      changes.modifiedNodeData.forEach((nd: go.ObjectData) => {\r\n        modifiedNodesMap.set(nd.key, nd);\r\n        const key = nd.key;\r\n        for (let i = 0; i < nodeData.length; i++) {\r\n          const ndEntry = nodeData[i];\r\n          if (ndEntry.key === key) {\r\n            nodeData[i] = nd;\r\n          }\r\n        }\r\n      });\r\n    }\r\n\r\n    // account for inserted node data\r\n    if (changes.insertedNodeKeys) {\r\n      changes.insertedNodeKeys.forEach((key: go.Key) => {\r\n        const nd = modifiedNodesMap.get(key);\r\n        if (nd) {\r\n          nodeData.push(nd);\r\n        }\r\n      });\r\n    }\r\n\r\n    // account for removed node data\r\n    if (changes.removedNodeKeys) {\r\n      nodeData = nodeData.filter((nd: go.ObjectData) => {\r\n        if (changes.removedNodeKeys.includes(nd.key)) {\r\n          return false;\r\n        } return true;\r\n      });\r\n    }\r\n\r\n    return nodeData;\r\n  }\r\n\r\n  /**\r\n   * Sync a link data array with a set of changes\r\n   * @param changes The set of changes to the GoJS model\r\n   * @param linkData The link data array to merge these changes with\r\n   * @returns A link data array, merged with the changes\r\n   */\r\n  public static syncLinkData(changes: go.IncrementalData, linkData: Array<go.ObjectData>) {\r\n    if (!changes) return linkData;\r\n    if (!changes.modifiedLinkData && !changes.insertedLinkKeys && !changes.removedLinkKeys) return linkData;\r\n\r\n    // maintain a map of modified nodes for fast lookup during insertion\r\n    const modifiedLinksMap = new go.Map<go.Key, go.ObjectData>();\r\n\r\n    // account for modified link data\r\n    if (changes.modifiedLinkData) {\r\n      changes.modifiedLinkData.forEach((ld: go.ObjectData) => {\r\n        modifiedLinksMap.set(ld.key, ld);\r\n        const key = ld.key;\r\n        for (let i = 0; i < linkData.length; i++) {\r\n          const ldEntry = linkData[i];\r\n          if (ldEntry.key === key) {\r\n            linkData[i] = ld;\r\n          }\r\n        }\r\n      });\r\n    }\r\n\r\n    // account for inserted link data\r\n    if (changes.insertedLinkKeys) {\r\n      changes.insertedLinkKeys.forEach((key: go.Key) => {\r\n        const nd = modifiedLinksMap.get(key);\r\n        if (nd) {\r\n          linkData.push(nd);\r\n        }\r\n      });\r\n    }\r\n\r\n    // account for removed link data\r\n    if (changes.removedLinkKeys) {\r\n      linkData = linkData.filter((ld: go.ObjectData) => {\r\n        if (changes.removedLinkKeys.includes(ld.key)) {\r\n          return false;\r\n        } return true;\r\n      });\r\n    }\r\n\r\n    return linkData;\r\n  }\r\n\r\n  /**\r\n   * Sync modelData with a set of changes\r\n   * @param changes The set of changes to the GoJS model\r\n   * @param modelData The modelData to merge these changes with\r\n   * @returns A modelData object, merged with the changes\r\n   */\r\n  public static syncModelData(changes: go.IncrementalData, modelData: go.ObjectData) {\r\n    if (!changes) return modelData;\r\n    if (!changes.modelData) return modelData;\r\n    if (changes.modelData) {\r\n      return changes.modelData;\r\n    }\r\n  }\r\n\r\n\r\n}\r\n"]}